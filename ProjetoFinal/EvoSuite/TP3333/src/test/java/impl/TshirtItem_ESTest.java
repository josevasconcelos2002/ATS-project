/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:18:57 GMT 2024
 */

package impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.item.Item;
import com.marketplace.vintage.item.ItemProperty;
import com.marketplace.vintage.item.ItemType;
import com.marketplace.vintage.item.condition.ItemCondition;
import com.marketplace.vintage.item.condition.UsedItemCondition;

import java.math.BigDecimal;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TshirtItem_ESTest extends TshirtItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.EXTRA_LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "", 0, usedItemCondition0, "", "", bigDecimal0, "", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize1 = tshirtItem0.getSize();
      assertEquals(TshirtItem.TshirtItemSize.EXTRA_LARGE, tshirtItem_TshirtItemSize1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 2156);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.EXTRA_LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, (String) null, 2156, usedItemCondition0, (String) null, (String) null, (BigDecimal) null, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      ItemProperty itemProperty0 = ItemProperty.BASE_PRICE;
      Class<String> class0 = String.class;
      String string0 = tshirtItem0.getProperty(itemProperty0, class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1891, 1891);
      BigDecimal bigDecimal0 = new BigDecimal((long) 1891);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "", 1891, usedItemCondition0, "Z%w*UC", "DIMENSION_AREA", bigDecimal0, "", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      BigDecimal bigDecimal1 = tshirtItem0.getPriceCorrection(1);
      assertEquals((short) (-945), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-437), (-437));
      BigDecimal bigDecimal0 = new BigDecimal((-437));
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.SMALL;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PALM_TREES;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, "k", 39, usedItemCondition0, "k", "k", bigDecimal0, "ou':(t.+i>KX", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      BigDecimal bigDecimal1 = tshirtItem0.getPriceCorrection(39);
      assertEquals((byte) (-38), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("p}Bb{hg@sP\"re!");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.SMALL;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "", 0, usedItemCondition0, "p}Bb{hg@sP\"re!", "", bigDecimal0, ", brand='", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      Item item0 = tshirtItem0.clone();
      assertNotSame(item0, tshirtItem0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.EXTRA_LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PALM_TREES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, ", itemCondition=", 0, usedItemCondition0, "", "", bigDecimal0, "Invalid item type: ", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      ItemProperty itemProperty0 = ItemProperty.STOCK;
      // Undeclared exception!
      try { 
        tshirtItem0.getProperty(itemProperty0, (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PALM_TREES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "", 0, usedItemCondition0, "**TK|fd9", "", bigDecimal0, "", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      ItemProperty itemProperty0 = ItemProperty.COLLECTION_YEAR;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        tshirtItem0.getProperty(itemProperty0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property not available in item: COLLECTION_YEAR
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.EXTRA_LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "F?S7Wf\"k~Q", 1, (ItemCondition) null, "Nv", "USED", bigDecimal0, "6}ur*DIY3^F&", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      // Undeclared exception!
      try { 
        tshirtItem0.getPriceCorrection(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.TshirtItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-328), (-1));
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = null;
      try {
        tshirtItem0 = new TshirtItem(uUID0, "", (-328), usedItemCondition0, "v,r8YQ:fUhs}k[", "com.marketplace.vintage.item.ItemType", (BigDecimal) null, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stock cannot be negative
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TshirtItem tshirtItem0 = null;
      try {
        tshirtItem0 = new TshirtItem((TshirtItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.TshirtItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.EXTRA_LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "", 0, usedItemCondition0, "", "", bigDecimal0, "", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      TshirtItem tshirtItem1 = new TshirtItem(tshirtItem0);
      assertEquals("", tshirtItem1.getDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(35, 35);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, (String) null, 35, usedItemCondition0, (String) null, (String) null, bigDecimal0, (String) null, (TshirtItem.TshirtItemSize) null, tshirtItem_TshirtItemPattern0);
      tshirtItem0.getSize();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-437), (-437));
      BigDecimal bigDecimal0 = new BigDecimal((-437));
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.SMALL;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PALM_TREES;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, "k", 39, usedItemCondition0, "k", "k", bigDecimal0, "ou':(t.+i>KX", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern1 = tshirtItem0.getPattern();
      assertSame(tshirtItem_TshirtItemPattern0, tshirtItem_TshirtItemPattern1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(15, 125);
      BigDecimal bigDecimal0 = new BigDecimal(125);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.EXTRA_LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "", 15, usedItemCondition0, "", "", bigDecimal0, "", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern1 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem1 = new TshirtItem(uUID0, "", 15, usedItemCondition0, "", "", bigDecimal0, "", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern1);
      boolean boolean0 = tshirtItem0.equals(tshirtItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(35, 35);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, (String) null, 35, usedItemCondition0, (String) null, (String) null, bigDecimal0, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize1 = TshirtItem.TshirtItemSize.MEDIUM;
      TshirtItem tshirtItem1 = new TshirtItem((UUID) null, (String) null, 35, usedItemCondition0, (String) null, (String) null, bigDecimal0, (String) null, tshirtItem_TshirtItemSize1, tshirtItem_TshirtItemPattern0);
      boolean boolean0 = tshirtItem0.equals(tshirtItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(7, 7);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, (String) null, 7, usedItemCondition0, (String) null, (String) null, bigDecimal0, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      TshirtItem tshirtItem1 = new TshirtItem((UUID) null, "Used (7/10, 7 previous owners)", 7, usedItemCondition0, "Used (7/10, 7 previous owners)", (String) null, bigDecimal0, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      boolean boolean0 = tshirtItem1.equals(tshirtItem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(35, 35);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, (String) null, 35, usedItemCondition0, (String) null, (String) null, bigDecimal0, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      boolean boolean0 = tshirtItem0.equals(usedItemCondition0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(35, 35);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, (String) null, 35, usedItemCondition0, (String) null, (String) null, bigDecimal0, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      boolean boolean0 = tshirtItem0.equals(tshirtItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-437), (-437));
      BigDecimal bigDecimal0 = new BigDecimal((-437));
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.SMALL;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PALM_TREES;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, "k", 39, usedItemCondition0, "k", "k", bigDecimal0, "ou':(t.+i>KX", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      boolean boolean0 = tshirtItem0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(35, 35);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, (String) null, 35, usedItemCondition0, (String) null, (String) null, bigDecimal0, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      BigDecimal bigDecimal1 = tshirtItem0.getPriceCorrection(35);
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(3, 3);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "", 3, usedItemCondition0, "", "", bigDecimal0, "", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      ItemProperty itemProperty0 = ItemProperty.DESCRIPTION;
      Class<Object> class0 = Object.class;
      Object object0 = tshirtItem0.getProperty(itemProperty0, class0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(39, 39);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.MEDIUM;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PALM_TREES;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, "", 39, usedItemCondition0, "", "", bigDecimal0, "Used (39/10, 39 previous owners)", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      ItemProperty itemProperty0 = ItemProperty.TSHIRT_PATTERN;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        tshirtItem0.getProperty(itemProperty0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(3, 3);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "", 3, usedItemCondition0, "", "", bigDecimal0, "", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      ItemProperty itemProperty0 = ItemProperty.TSHIRT_SIZE;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        tshirtItem0.getProperty(itemProperty0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-639), 1553);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.SMALL;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "", 1553, usedItemCondition0, "K4x", "impl.TshirtItem", (BigDecimal) null, "", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      tshirtItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(39, 39);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.MEDIUM;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PALM_TREES;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, "", 39, usedItemCondition0, "", "", bigDecimal0, "Used (39/10, 39 previous owners)", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      String string0 = tshirtItem0.toString();
      assertEquals("TshirtItem{size=MEDIUM, pattern=PALM_TREES, alphanumericID='', itemCondition=Used (39/10, 39 previous owners), description='', brand='', basePrice=1, parcelCarrierName=Used (39/10, 39 previous owners)}", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(39, 39);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.MEDIUM;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PALM_TREES;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, "", 39, usedItemCondition0, "", "", bigDecimal0, "Used (39/10, 39 previous owners)", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      ItemType itemType0 = tshirtItem0.getItemType();
      assertEquals(ItemType.TSHIRT, itemType0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(35, 35);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem((UUID) null, (String) null, 35, usedItemCondition0, (String) null, (String) null, bigDecimal0, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      Item item0 = tshirtItem0.clone();
      boolean boolean0 = tshirtItem0.equals(item0);
      assertTrue(boolean0);
  }
}
