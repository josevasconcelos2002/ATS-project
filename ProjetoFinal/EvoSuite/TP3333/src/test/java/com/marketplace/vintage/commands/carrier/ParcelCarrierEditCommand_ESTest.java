/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:53:23 GMT 2024
 */

package com.marketplace.vintage.commands.carrier;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.Vintage;
import com.marketplace.vintage.carrier.NormalParcelCarrier;
import com.marketplace.vintage.carrier.ParcelCarrierController;
import com.marketplace.vintage.carrier.ParcelCarrierManager;
import com.marketplace.vintage.commands.carrier.ParcelCarrierEditCommand;
import com.marketplace.vintage.expression.Exp4jExpressionSolver;
import com.marketplace.vintage.input.impl.BufferedInputPrompter;
import com.marketplace.vintage.input.impl.StdinInputPrompter;
import com.marketplace.vintage.item.ItemController;
import com.marketplace.vintage.item.ItemFactory;
import com.marketplace.vintage.item.ItemManager;
import com.marketplace.vintage.logging.JavaLogger;
import com.marketplace.vintage.logging.Logger;
import com.marketplace.vintage.logging.OnlyWarnLogger;
import com.marketplace.vintage.order.OrderController;
import com.marketplace.vintage.scripting.ScriptController;
import com.marketplace.vintage.time.TimeManager;
import com.marketplace.vintage.user.UserController;
import com.marketplace.vintage.user.UserManager;
import com.marketplace.vintage.utils.VintageDate;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParcelCarrierEditCommand_ESTest extends ParcelCarrierEditCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage((ItemController) null, (OrderController) null, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("5k1l", "5k1l");
      List<String> list0 = normalParcelCarrier0.getDeliveredOrders();
      ParcelCarrierEditCommand parcelCarrierEditCommand0 = new ParcelCarrierEditCommand(vintage0, list0);
      Logger logger0 = OnlyWarnLogger.of((Logger) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(listIterator0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5k1l";
      parcelCarrierController0.registerParcelCarrier(normalParcelCarrier0);
      linkedList0.add("0>4rD*Z^}h!K");
      // Undeclared exception!
      try { 
        parcelCarrierEditCommand0.executeSafely(logger0, bufferedInputPrompter0, stringArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ParcelCarrierEditCommand parcelCarrierEditCommand0 = new ParcelCarrierEditCommand((Vintage) null, linkedList0);
      JavaLogger javaLogger0 = new JavaLogger();
      OnlyWarnLogger onlyWarnLogger0 = new OnlyWarnLogger(javaLogger0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        parcelCarrierEditCommand0.executeSafely(onlyWarnLogger0, stdinInputPrompter0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.commands.carrier.ParcelCarrierEditCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier(", ", ", ");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ", ";
      parcelCarrierController0.registerParcelCarrier(normalParcelCarrier0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      Vintage vintage0 = new Vintage((ItemController) null, (OrderController) null, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      ParcelCarrierEditCommand parcelCarrierEditCommand0 = new ParcelCarrierEditCommand(vintage0, linkedList0);
      OnlyWarnLogger onlyWarnLogger0 = new OnlyWarnLogger((Logger) null);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      stdinInputPrompter0.close();
      // Undeclared exception!
      try { 
        parcelCarrierEditCommand0.executeSafely(onlyWarnLogger0, stdinInputPrompter0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage((ItemController) null, (OrderController) null, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("5k1l", "5k1l");
      List<String> list0 = normalParcelCarrier0.getDeliveredOrders();
      ParcelCarrierEditCommand parcelCarrierEditCommand0 = new ParcelCarrierEditCommand(vintage0, list0);
      Logger logger0 = OnlyWarnLogger.of((Logger) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(listIterator0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5k1l";
      parcelCarrierController0.registerParcelCarrier(normalParcelCarrier0);
      // Undeclared exception!
      try { 
        parcelCarrierEditCommand0.executeSafely(logger0, bufferedInputPrompter0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No more input available
         //
         verifyException("com.marketplace.vintage.input.impl.BufferedInputPrompter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ParcelCarrierEditCommand parcelCarrierEditCommand0 = new ParcelCarrierEditCommand((Vintage) null, linkedList0);
      OnlyWarnLogger onlyWarnLogger0 = new OnlyWarnLogger((Logger) null);
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter((Iterator<String>) null);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        parcelCarrierEditCommand0.executeSafely(onlyWarnLogger0, bufferedInputPrompter0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.marketplace.vintage.commands.carrier.ParcelCarrierEditCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      ScriptController scriptController0 = new ScriptController();
      JavaLogger javaLogger0 = new JavaLogger();
      String[] stringArray0 = new String[17];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      Vintage vintage0 = new Vintage(itemController0, (OrderController) null, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, (UserController) null, scriptController0);
      ParcelCarrierEditCommand parcelCarrierEditCommand0 = new ParcelCarrierEditCommand(vintage0, linkedList0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      parcelCarrierEditCommand0.executeSafely(javaLogger0, stdinInputPrompter0, stringArray0);
      assertEquals(1, parcelCarrierEditCommand0.getMinArgs());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage((ItemController) null, (OrderController) null, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("5k1l", "5k1l");
      List<String> list0 = normalParcelCarrier0.getDeliveredOrders();
      ParcelCarrierEditCommand parcelCarrierEditCommand0 = new ParcelCarrierEditCommand(vintage0, list0);
      Logger logger0 = OnlyWarnLogger.of((Logger) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5k1l";
      parcelCarrierController0.registerParcelCarrier(normalParcelCarrier0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      // Undeclared exception!
      try { 
        parcelCarrierEditCommand0.executeSafely(logger0, stdinInputPrompter0, stringArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }
}
