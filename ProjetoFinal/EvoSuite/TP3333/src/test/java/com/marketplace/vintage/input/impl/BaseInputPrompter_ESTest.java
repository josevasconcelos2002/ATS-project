/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 21:12:49 GMT 2024
 */

package com.marketplace.vintage.input.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.input.impl.BufferedInputPrompter;
import com.marketplace.vintage.input.impl.StdinInputPrompter;
import com.marketplace.vintage.logging.JavaLogger;
import com.marketplace.vintage.logging.Logger;
import com.marketplace.vintage.logging.OnlyWarnLogger;
import com.marketplace.vintage.logging.PrefixLogger;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseInputPrompter_ESTest extends BaseInputPrompter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iterator0).hasNext();
      doReturn((String) null, "").when(iterator0).next();
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      JavaLogger javaLogger0 = new JavaLogger();
      // Undeclared exception!
      try { 
        bufferedInputPrompter0.askForInput((Logger) javaLogger0, "", (Function<String, Object>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No more input available
         //
         verifyException("com.marketplace.vintage.input.impl.BufferedInputPrompter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = PrefixLogger.of("com.marketplace.vintage.input.impl.BaseInputPrompter", javaLogger0);
      Logger logger1 = OnlyWarnLogger.of(logger0);
      Function<String, String> function0 = Function.identity();
      SystemInUtil.addInputLine("f");
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<String, String> function2 = function0.andThen((Function<? super String, ? extends String>) function1);
      String string0 = stdinInputPrompter0.askForInput(logger1, "com.marketplace.vintage.input.impl.BaseInputPrompter", function2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = PrefixLogger.of("com.marketplace.vintage.input.impl.BaseInputPrompter", javaLogger0);
      Logger logger1 = OnlyWarnLogger.of(logger0);
      Function<String, String> function0 = Function.identity();
      SystemInUtil.addInputLine("f");
      String string0 = stdinInputPrompter0.askForInput(logger1, "com.marketplace.vintage.input.impl.BaseInputPrompter", function0);
      assertEquals("f", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      JavaLogger javaLogger0 = new JavaLogger();
      String string0 = bufferedInputPrompter0.askForInput((Logger) javaLogger0, "com.marketplace.vintage.logging.OnlyWarnLogger");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn(" ").when(iterator0).next();
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      JavaLogger javaLogger0 = new JavaLogger();
      String string0 = bufferedInputPrompter0.askForInput((Logger) javaLogger0, "No more input available");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      SystemInUtil.addInputLine("");
      JavaLogger javaLogger0 = new JavaLogger();
      String string0 = stdinInputPrompter0.askForInput((Logger) javaLogger0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      JavaLogger javaLogger0 = new JavaLogger();
      // Undeclared exception!
      try { 
        stdinInputPrompter0.askForInput((Logger) javaLogger0, "wl57vP2+Q1U=A;1p", (Function<String, Object>) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      Logger logger0 = OnlyWarnLogger.of((Logger) null);
      // Undeclared exception!
      try { 
        bufferedInputPrompter0.askForInput(logger0, "8q", (Function<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.logging.OnlyWarnLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      stdinInputPrompter0.close();
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = PrefixLogger.of("wGv`=/ZW;", javaLogger0);
      OnlyWarnLogger onlyWarnLogger0 = new OnlyWarnLogger(logger0);
      Function<String, String> function0 = Function.identity();
      // Undeclared exception!
      try { 
        stdinInputPrompter0.askForInput((Logger) onlyWarnLogger0, "wGv`=/ZW;", function0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = OnlyWarnLogger.of(javaLogger0);
      // Undeclared exception!
      try { 
        stdinInputPrompter0.askForInput(logger0, "]I2%yzo}");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      // Undeclared exception!
      try { 
        stdinInputPrompter0.askForInput((Logger) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.input.impl.BaseInputPrompter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      stdinInputPrompter0.close();
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = PrefixLogger.of("com.marketplace.vintage.logging.PrefixLogger", javaLogger0);
      Logger logger1 = OnlyWarnLogger.of(logger0);
      // Undeclared exception!
      try { 
        stdinInputPrompter0.askForInput(logger1, "com.marketplace.vintage.logging.PrefixLogger");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      JavaLogger javaLogger0 = new JavaLogger();
      // Undeclared exception!
      try { 
        bufferedInputPrompter0.askForInput((Logger) javaLogger0, "com.marketplace.vintage.logging.OnlyWarnLogger");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No more input available
         //
         verifyException("com.marketplace.vintage.input.impl.BufferedInputPrompter", e);
      }
  }
}
