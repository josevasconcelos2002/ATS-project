/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:38:59 GMT 2024
 */

package com.marketplace.vintage.scripting.runner;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.Vintage;
import com.marketplace.vintage.carrier.ParcelCarrierController;
import com.marketplace.vintage.carrier.ParcelCarrierManager;
import com.marketplace.vintage.expression.Exp4jExpressionSolver;
import com.marketplace.vintage.expression.ExpressionSolver;
import com.marketplace.vintage.input.InputPrompter;
import com.marketplace.vintage.input.impl.BufferedInputPrompter;
import com.marketplace.vintage.input.impl.StdinInputPrompter;
import com.marketplace.vintage.item.ItemController;
import com.marketplace.vintage.item.ItemFactory;
import com.marketplace.vintage.item.ItemManager;
import com.marketplace.vintage.logging.JavaLogger;
import com.marketplace.vintage.logging.Logger;
import com.marketplace.vintage.logging.OnlyWarnLogger;
import com.marketplace.vintage.logging.PrefixLogger;
import com.marketplace.vintage.order.OrderController;
import com.marketplace.vintage.order.OrderFactory;
import com.marketplace.vintage.order.OrderManager;
import com.marketplace.vintage.scripting.Script;
import com.marketplace.vintage.scripting.ScriptController;
import com.marketplace.vintage.scripting.runner.CommandScriptRunner;
import com.marketplace.vintage.time.TimeManager;
import com.marketplace.vintage.user.UserController;
import com.marketplace.vintage.user.UserManager;
import com.marketplace.vintage.utils.VintageDate;
import com.marketplace.vintage.view.View;
import com.marketplace.vintage.view.ViewFactory;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommandScriptRunner_ESTest extends CommandScriptRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = PrefixLogger.of((String) null, javaLogger0);
      Logger logger1 = OnlyWarnLogger.of(logger0);
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      CommandScriptRunner commandScriptRunner0 = new CommandScriptRunner(logger1, (ViewFactory) null, vintage0);
      Script script0 = new Script((VintageDate) null, (String) null);
      // Undeclared exception!
      try { 
        commandScriptRunner0.runScript(script0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.scripting.runner.CommandScriptRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OnlyWarnLogger onlyWarnLogger0 = new OnlyWarnLogger((Logger) null);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, (OrderController) null, (TimeManager) null, parcelCarrierController0, (ExpressionSolver) null, userController0, scriptController0);
      ViewFactory viewFactory0 = new ViewFactory(onlyWarnLogger0, stdinInputPrompter0, vintage0);
      CommandScriptRunner commandScriptRunner0 = new CommandScriptRunner(onlyWarnLogger0, viewFactory0, vintage0);
      // Undeclared exception!
      try { 
        commandScriptRunner0.createViewFromIdentifier((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.scripting.runner.CommandScriptRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      OnlyWarnLogger onlyWarnLogger0 = new OnlyWarnLogger(javaLogger0);
      Logger logger0 = PrefixLogger.of("st", onlyWarnLogger0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      ViewFactory viewFactory0 = new ViewFactory(logger0, stdinInputPrompter0, (Vintage) null);
      CommandScriptRunner commandScriptRunner0 = new CommandScriptRunner(logger0, viewFactory0, (Vintage) null);
      // Undeclared exception!
      try { 
        commandScriptRunner0.createViewFromIdentifier("uJer:brTnd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown view identifier: uJer:brTnd
         //
         verifyException("com.marketplace.vintage.scripting.runner.CommandScriptRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      OnlyWarnLogger onlyWarnLogger0 = new OnlyWarnLogger(javaLogger0);
      Logger logger0 = PrefixLogger.of("st", onlyWarnLogger0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      ViewFactory viewFactory0 = new ViewFactory(logger0, stdinInputPrompter0, (Vintage) null);
      CommandScriptRunner commandScriptRunner0 = new CommandScriptRunner(logger0, viewFactory0, (Vintage) null);
      View view0 = commandScriptRunner0.createViewFromIdentifier("admin");
      assertNotNull(view0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = OnlyWarnLogger.of(javaLogger0);
      VintageDate vintageDate0 = VintageDate.of(2, 2, 2);
      Script script0 = new Script(vintageDate0, "FD8,(UN[:}[");
      CommandScriptRunner commandScriptRunner0 = new CommandScriptRunner(logger0, (ViewFactory) null, (Vintage) null);
      // Undeclared exception!
      try { 
        commandScriptRunner0.runScript(script0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown view identifier: FD8
         //
         verifyException("com.marketplace.vintage.scripting.runner.CommandScriptRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = PrefixLogger.of("com.marketplace.vintage.scripting.runner.CommandScriptRunner", javaLogger0);
      Logger logger1 = OnlyWarnLogger.of(logger0);
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController((ItemManager) null, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      ViewFactory viewFactory0 = new ViewFactory(logger1, (InputPrompter) null, vintage0);
      CommandScriptRunner commandScriptRunner0 = new CommandScriptRunner(logger1, viewFactory0, vintage0);
      Script script0 = new Script((VintageDate) null, "com.marketplace.vintage.scripting.runner.CommandScriptRunner");
      // Undeclared exception!
      try { 
        commandScriptRunner0.runScript(script0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't split view and command from script: com.marketplace.vintage.scripting.runner.CommandScriptRunner
         //
         verifyException("com.marketplace.vintage.scripting.runner.CommandScriptRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = OnlyWarnLogger.of(javaLogger0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      VintageDate vintageDate0 = VintageDate.of(2, 2, (-3008));
      TimeManager timeManager0 = new TimeManager(vintageDate0);
      Vintage vintage0 = new Vintage((ItemController) null, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      CommandScriptRunner commandScriptRunner0 = new CommandScriptRunner(logger0, (ViewFactory) null, vintage0);
      Script script0 = new Script(vintageDate0, "user:fd8,(un[<d[");
      // Undeclared exception!
      try { 
        commandScriptRunner0.runScript(script0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with the email fd8 was not found
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      Vintage vintage0 = new Vintage(itemController0, (OrderController) null, (TimeManager) null, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      ViewFactory viewFactory0 = new ViewFactory(javaLogger0, bufferedInputPrompter0, vintage0);
      CommandScriptRunner commandScriptRunner0 = new CommandScriptRunner(javaLogger0, viewFactory0, vintage0);
      // Undeclared exception!
      try { 
        commandScriptRunner0.createViewFromIdentifier("user:brand");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with the email brand was not found
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }
}
