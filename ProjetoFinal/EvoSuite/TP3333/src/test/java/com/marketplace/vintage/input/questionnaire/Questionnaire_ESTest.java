/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:57:43 GMT 2024
 */

package com.marketplace.vintage.input.questionnaire;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.input.impl.BufferedInputPrompter;
import com.marketplace.vintage.input.impl.StdinInputPrompter;
import com.marketplace.vintage.input.questionnaire.Questionnaire;
import com.marketplace.vintage.input.questionnaire.QuestionnaireAnswers;
import com.marketplace.vintage.input.questionnaire.QuestionnaireQuestion;
import com.marketplace.vintage.logging.JavaLogger;
import com.marketplace.vintage.logging.Logger;
import com.marketplace.vintage.logging.OnlyWarnLogger;
import com.marketplace.vintage.logging.PrefixLogger;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Questionnaire_ESTest extends Questionnaire_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<QuestionnaireQuestion> linkedList0 = new LinkedList<QuestionnaireQuestion>();
      Function<String, String> function0 = Function.identity();
      SystemInUtil.addInputLine(">FW");
      QuestionnaireQuestion questionnaireQuestion0 = new QuestionnaireQuestion((String) null, "\";l", function0);
      linkedList0.offer(questionnaireQuestion0);
      Questionnaire questionnaire0 = new Questionnaire(linkedList0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = PrefixLogger.of("", javaLogger0);
      QuestionnaireAnswers questionnaireAnswers0 = questionnaire0.ask(stdinInputPrompter0, logger0);
      assertNotNull(questionnaireAnswers0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<QuestionnaireQuestion> linkedList0 = new LinkedList<QuestionnaireQuestion>();
      QuestionnaireQuestion questionnaireQuestion0 = new QuestionnaireQuestion("}HEvGBiy", "}HEvGBiy", (Function<String, ?>) null);
      linkedList0.add(questionnaireQuestion0);
      Questionnaire questionnaire0 = new Questionnaire(linkedList0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      Logger logger0 = PrefixLogger.of("}HEvGBiy", (Logger) null);
      // Undeclared exception!
      try { 
        questionnaire0.ask(stdinInputPrompter0, logger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.logging.PrefixLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<QuestionnaireQuestion> linkedList0 = new LinkedList<QuestionnaireQuestion>();
      Function<String, String> function0 = Function.identity();
      QuestionnaireQuestion questionnaireQuestion0 = new QuestionnaireQuestion((String) null, "\";l", function0);
      linkedList0.offer(questionnaireQuestion0);
      Questionnaire questionnaire0 = new Questionnaire(linkedList0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      JavaLogger javaLogger0 = new JavaLogger();
      stdinInputPrompter0.close();
      Logger logger0 = PrefixLogger.of("", javaLogger0);
      // Undeclared exception!
      try { 
        questionnaire0.ask(stdinInputPrompter0, logger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Scanner closed
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<QuestionnaireQuestion> linkedList0 = new LinkedList<QuestionnaireQuestion>();
      Function<String, String> function0 = Function.identity();
      QuestionnaireQuestion questionnaireQuestion0 = new QuestionnaireQuestion((String) null, "\";l", function0);
      linkedList0.offer(questionnaireQuestion0);
      Questionnaire questionnaire0 = new Questionnaire(linkedList0);
      JavaLogger javaLogger0 = new JavaLogger();
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      Logger logger0 = OnlyWarnLogger.of(javaLogger0);
      // Undeclared exception!
      try { 
        questionnaire0.ask(bufferedInputPrompter0, logger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No more input available
         //
         verifyException("com.marketplace.vintage.input.impl.BufferedInputPrompter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Questionnaire questionnaire0 = null;
      try {
        questionnaire0 = new Questionnaire((List<QuestionnaireQuestion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<QuestionnaireQuestion> linkedList0 = new LinkedList<QuestionnaireQuestion>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      QuestionnaireQuestion questionnaireQuestion0 = new QuestionnaireQuestion("", "6Z$T98I", unaryOperator0);
      linkedList0.add(questionnaireQuestion0);
      Questionnaire questionnaire0 = new Questionnaire(linkedList0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = OnlyWarnLogger.of(javaLogger0);
      // Undeclared exception!
      try { 
        questionnaire0.ask(stdinInputPrompter0, logger0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }
}
