/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 21:08:53 GMT 2024
 */

package com.marketplace.vintage.commands.item.stock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.Vintage;
import com.marketplace.vintage.carrier.ParcelCarrierController;
import com.marketplace.vintage.carrier.ParcelCarrierManager;
import com.marketplace.vintage.expression.Exp4jExpressionSolver;
import com.marketplace.vintage.item.Item;
import com.marketplace.vintage.item.ItemController;
import com.marketplace.vintage.item.ItemFactory;
import com.marketplace.vintage.item.ItemManager;
import com.marketplace.vintage.item.condition.UsedItemCondition;
import com.marketplace.vintage.logging.Logger;
import com.marketplace.vintage.order.OrderController;
import com.marketplace.vintage.order.OrderFactory;
import com.marketplace.vintage.order.OrderManager;
import com.marketplace.vintage.scripting.ScriptController;
import com.marketplace.vintage.time.TimeManager;
import com.marketplace.vintage.user.UserController;
import com.marketplace.vintage.user.UserManager;
import com.marketplace.vintage.view.impl.UserView;
import impl.PremiumMalaItem;
import java.math.BigDecimal;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ItemStockRemoveCommand_ESTest extends ItemStockRemoveCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, (TimeManager) null, parcelCarrierController0, exp4jExpressionSolver0, (UserController) null, scriptController0);
      ItemStockRemoveCommand itemStockRemoveCommand0 = new ItemStockRemoveCommand((UserView) null, vintage0);
      UUID uUID0 = MockUUID.fromString("o>- y0F4");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1680, 656);
      BigDecimal bigDecimal0 = new BigDecimal((-1698.4111429258614));
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "o>- y0F4", 1680, usedItemCondition0, "Z", "o>- y0F4", bigDecimal0, "item stock remove <item> <stock>", (-561), "Z", 0, 0);
      // Undeclared exception!
      try { 
        itemStockRemoveCommand0.operation((Logger) null, premiumMalaItem0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An item with the id o>- y0F4 was not found
         //
         verifyException("com.marketplace.vintage.item.ItemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ItemStockRemoveCommand itemStockRemoveCommand0 = new ItemStockRemoveCommand((UserView) null, (Vintage) null);
      // Undeclared exception!
      try { 
        itemStockRemoveCommand0.operation((Logger) null, (Item) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.commands.item.stock.ItemStockRemoveCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController((ParcelCarrierManager) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      Vintage vintage0 = new Vintage(itemController0, orderController0, (TimeManager) null, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      ItemStockRemoveCommand itemStockRemoveCommand0 = new ItemStockRemoveCommand((UserView) null, vintage0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "Stock '", 15, usedItemCondition0, "", "", bigDecimal0, "xH$S/|<\"", 0, "", 0, 1680);
      // Undeclared exception!
      try { 
        itemStockRemoveCommand0.operation((Logger) null, premiumMalaItem0, (-574));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stock change cannot be negative.
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }
}
