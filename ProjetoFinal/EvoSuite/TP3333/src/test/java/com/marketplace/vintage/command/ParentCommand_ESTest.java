/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:52:39 GMT 2024
 */

package com.marketplace.vintage.command;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.command.Command;
import com.marketplace.vintage.command.ParentCommand;
import com.marketplace.vintage.input.InputPrompter;
import com.marketplace.vintage.input.impl.StdinInputPrompter;
import com.marketplace.vintage.logging.JavaLogger;
import com.marketplace.vintage.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParentCommand_ESTest extends ParentCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      ParentCommand parentCommand1 = new ParentCommand(parentCommand0, "", "");
      assertEquals(" ", parentCommand1.getFullName());
      assertEquals("", parentCommand1.getName());
      assertEquals("", parentCommand1.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand((String) null, "69vgd)lT(b&c(");
      String string0 = parentCommand0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("?'mo|]RMP0*c>M", "?'mo|]RMP0*c>M");
      String string0 = parentCommand0.getName();
      assertEquals("?'mo|]RMP0*c>M", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand((String) null, "com.marketplace.vintage.commands.HelpCommand");
      String string0 = parentCommand0.getFullName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand(" (type '", "");
      String string0 = parentCommand0.getFullName();
      assertEquals("", parentCommand0.getDescription());
      assertEquals(" (type '", string0);
      assertEquals(" (type '", parentCommand0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand((String) null, (String) null);
      String string0 = parentCommand0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      String string0 = parentCommand0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("q<", (String) null);
      Command command0 = parentCommand0.getCommand("help");
      assertEquals("q< help", command0.getUsage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      parentCommand0.registerCommand(parentCommand0);
      Command command0 = parentCommand0.getCommand("");
      assertEquals("", command0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand((String) null, "KFdiU");
      // Undeclared exception!
      try { 
        parentCommand0.registerCommand((Command) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.command.ParentCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("p)hahku/2n`'-LK", "p)hahku/2n`'-LK");
      // Undeclared exception!
      try { 
        parentCommand0.getCommand((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.command.ParentCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand(" (type '", "com.marketplace.vintage.command.ParentCommand");
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        parentCommand0.execute((Logger) null, (InputPrompter) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.command.ParentCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParentCommand parentCommand0 = null;
      try {
        parentCommand0 = new ParentCommand((ParentCommand) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.command.ParentCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      String string0 = parentCommand0.getFullName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      String string0 = parentCommand0.getUsage();
      assertEquals(" <subcommand>", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      String string0 = parentCommand0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand(" (type '", "com.marketplace.vintage.command.ParentCommand");
      String string0 = parentCommand0.getDescription();
      assertEquals(" (type '", parentCommand0.getFullName());
      assertEquals("com.marketplace.vintage.command.ParentCommand", string0);
      assertEquals(" (type '", parentCommand0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand(" (type '", "com.marketplace.vintage.command.ParentCommand");
      parentCommand0.getRegisteredCommands();
      assertEquals(" (type '", parentCommand0.getName());
      assertEquals("com.marketplace.vintage.command.ParentCommand", parentCommand0.getDescription());
      assertEquals(" (type '", parentCommand0.getFullName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("6", "6");
      parentCommand0.registerCommand(parentCommand0);
      JavaLogger javaLogger0 = new JavaLogger();
      String[] stringArray0 = new String[39];
      stringArray0[0] = "6";
      parentCommand0.execute(javaLogger0, (InputPrompter) null, stringArray0);
      assertEquals(39, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("6", "6");
      int int0 = parentCommand0.getMinArgs();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("Za:GeG,Dab[LVsQ*8{", "Za:GeG,Dab[LVsQ*8{");
      JavaLogger javaLogger0 = new JavaLogger();
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      String[] stringArray0 = new String[0];
      parentCommand0.registerCommand(parentCommand0);
      parentCommand0.execute(javaLogger0, stdinInputPrompter0, stringArray0);
      assertEquals("Za:GeG,Dab[LVsQ*8{", parentCommand0.getFullName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("Za:GeG,Dab[LVsQ*8{", "Za:GeG,Dab[LVsQ*8{");
      Command command0 = parentCommand0.getCommand("Za:GeG,Dab[LVsQ*8{");
      assertNull(command0);
  }
}
