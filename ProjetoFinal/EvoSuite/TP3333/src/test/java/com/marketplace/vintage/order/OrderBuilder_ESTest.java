/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 21:04:29 GMT 2024
 */

package com.marketplace.vintage.order;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.item.Item;
import com.marketplace.vintage.item.condition.ItemCondition;
import com.marketplace.vintage.item.condition.UsedItemCondition;
import com.marketplace.vintage.utils.VintageDate;
import impl.MalaItem;
import impl.PremiumMalaItem;
import impl.PremiumSapatilhasItem;
import java.math.BigDecimal;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OrderBuilder_ESTest extends OrderBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("Jpz*YKm~{!XU");
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder("Jpz*YKm~{!XU", uUID0, (VintageDate) null);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "impl.PremiumMalaItem", 0, usedItemCondition0, "impl.PremiumMalaItem", "", bigDecimal0, "", 0, "BASE_ITEM_PROPERTIES", 0, 0);
      orderBuilder0.addOrderedItem(premiumMalaItem0, 178);
      BigDecimal bigDecimal1 = orderBuilder0.getTotalPrice();
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder("4X.zy!zp", uUID0, (VintageDate) null);
      BigDecimal bigDecimal0 = new BigDecimal((-488));
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "j6;", 0, (ItemCondition) null, "9t)ak)MAF\"", "AFw?|jy~\"X=qq(a", bigDecimal0, "", (-488), "4X.zy!zp", 0, 0);
      orderBuilder0.addItemSatisfactionPrice(premiumMalaItem0, bigDecimal0);
      BigDecimal bigDecimal1 = orderBuilder0.getTotalPrice();
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder("4X.zy!zp", uUID0, (VintageDate) null);
      BigDecimal bigDecimal0 = new BigDecimal((-488));
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "j6;", 0, (ItemCondition) null, "9t)ak)MAF\"", "AFw?|jy~\"X=qq(a", bigDecimal0, "", (-488), "4X.zy!zp", 0, 0);
      orderBuilder0.addItemSatisfactionPrice(premiumMalaItem0, bigDecimal0);
      OrderBuilder orderBuilder1 = orderBuilder0.addParcelCarrierShipmentCost("j6;", (-18), bigDecimal0);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(8, (-18));
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "4X.zy!zp", 8, usedItemCondition0, "j6;", "j6;", bigDecimal0, "4X.zy!zp", 8, true, "4X.zy!zp", 8, (-1));
      orderBuilder1.addParcelCarrierShipmentCost("j6;", (-2305), bigDecimal0);
      OrderBuilder orderBuilder2 = orderBuilder1.addItemSatisfactionPrice(premiumSapatilhasItem0, bigDecimal0);
      OrderBuilder orderBuilder3 = orderBuilder2.addOrderedItem(premiumSapatilhasItem0, 8);
      orderBuilder3.addOrderedItem(premiumSapatilhasItem0, 8);
      BigDecimal bigDecimal1 = orderBuilder3.getTotalPrice();
      assertEquals((short) (-2928), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder("", uUID0, (VintageDate) null);
      orderBuilder0.addParcelCarrierShipmentCost("Sapatilhas Premium", 5, (BigDecimal) null);
      // Undeclared exception!
      try { 
        orderBuilder0.getTotalPrice();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder("p", uUID0, (VintageDate) null);
      orderBuilder0.addParcelCarrierShipmentCost("HUB*g", 8, (BigDecimal) null);
      // Undeclared exception!
      try { 
        orderBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder("560fV", uUID0, (VintageDate) null);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(209, 209);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      MalaItem malaItem0 = new MalaItem(uUID0, "560fV", 209, usedItemCondition0, "ABv{6", "com.marketplace.vintage.item.condition.UsedItemCondition", bigDecimal0, "", 209, "IJL", (-1605), (-1605));
      orderBuilder0.addOrderedItem(malaItem0, 0);
      orderBuilder0.addOrderedItem(malaItem0, 209);
      // Undeclared exception!
      orderBuilder0.addOrderedItem(malaItem0, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("djRj)#9*?KAV}");
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder("", uUID0, vintageDate0);
      // Undeclared exception!
      try { 
        orderBuilder0.addOrderedItem((Item) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.order.OrderBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      VintageDate vintageDate0 = VintageDate.of(1, 5, 1);
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder("com.marketplace.vintage.order.OrderBuilder", uUID0, vintageDate0);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-3673), 0);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "com.marketplace.vintage.order.OrderBuilder", 12, usedItemCondition0, (String) null, "com.marketplace.vintage.order.OrderBuilder", (BigDecimal) null, (String) null, 0, false, "com.marketplace.vintage.order.OrderBuilder", 1263, (-3673));
      // Undeclared exception!
      try { 
        orderBuilder0.addOrderedItem(premiumSapatilhasItem0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current year cannot be before collection year
         //
         verifyException("impl.PremiumSapatilhasItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder("4Xzy!zp", uUID0, (VintageDate) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        orderBuilder0.addItemSatisfactionPrice((Item) null, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.order.invoice.ItemSatisfactionInvoiceLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder(", basePrice=", uUID0, (VintageDate) null);
      Order order0 = orderBuilder0.build();
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      OrderBuilder orderBuilder0 = OrderBuilder.newBuilder("", uUID0, (VintageDate) null);
      BigDecimal bigDecimal0 = orderBuilder0.getTotalPrice();
      assertEquals((short)0, bigDecimal0.shortValue());
  }
}
