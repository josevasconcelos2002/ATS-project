/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:07:34 GMT 2024
 */

package com.marketplace.vintage.user;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.user.User;
import com.marketplace.vintage.user.UserManager;
import java.util.List;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserManager_ESTest extends UserManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      UUID uUID0 = MockUUID.fromString("com.marketplace.vintage.exceptions.EntityNotFoundException");
      User user0 = new User(uUID0, "1a]", "1a]", " ", "1a]", "+e&cK&)`TP@&#?}R3");
      userManager0.registerUser(user0);
      List<User> list0 = userManager0.getAll();
      assertTrue(list0.contains(user0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.updateUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  /*
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.registerUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      User user0 = new User("", "{4bDz", "#>wjjxv8", "", "");
      // Undeclared exception!
      try { 
        userManager0.registerUser(user0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The user's username cannot be null or empty
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.getUserByEmail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.existsUserWithEmail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      userManager0.createUser("com.marketplace.vintage.exceptions.EntityNotFoundException", ">)W{},", "com.marketplace.vintage.user.User", "com.marketplace.vintage.exceptions.EntityAlreadyExistsException", ">)W{},");
      // Undeclared exception!
      try { 
        userManager0.createUser("com.marketplace.vintage.exceptions.EntityNotFoundException", "com.marketplace.vintage.user.User", "com.marketplace.vintage.exceptions.EntityNotFoundException", "com.marketplace.vintage.exceptions.EntityAlreadyExistsException", "com.marketplace.vintage.exceptions.EntityAlreadyExistsException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with that username already exists
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.createUser((String) null, (String) null, "j", (String) null, "(bno3K2Q$#VzUY1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      userManager0.createUser("2g5A&Jj", "2g5A&Jj", "2g5A&Jj", "A user with the id ", "");
      // Undeclared exception!
      try { 
        userManager0.validateUsername("2g5A&Jj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with that username already exists
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.validateUsername("The user's username cannot be null or empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The user's username cannot contain spaces
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      userManager0.validateUsername("2g5A&Jj");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.validateUsername((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The user's username cannot be null or empty
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.validateUsername("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The user's username cannot be null or empty
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      User user0 = userManager0.createUser("[(ly:<b4yTL5L", "[(ly:<b4yTL5L", "[(ly:<b4yTL5L", "[(ly:<b4yTL5L", "[(ly:<b4yTL5L");
      // Undeclared exception!
      try { 
        userManager0.updateUser(user0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with the email [(ly:<b4yTL5L was not found
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      UUID uUID0 = MockUUID.fromString("C$=}sxt>8>Px8@");
      User user0 = new User(uUID0, "pgnNo~@21b=rZ,]P_", "pgnNo~@21b=rZ,]P_", "pgnNo~@21b=rZ,]P_", "C$=}sxt>8>Px8@", "pgnNo~@21b=rZ,]P_");
      userManager0.registerUser(user0);
      User user1 = new User(uUID0, "C$=}sxt>8>Px8@", "pgnNo~@21b=rZ,]P_", "C$=}sxt>8>Px8@", "pgnNo~@21b=rZ,]P_", "pgnNo~@21b=rZ,]P_");
      // Undeclared exception!
      try { 
        userManager0.updateUser(user1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with the username C$=}sxt>8>Px8@ was not found
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      User user0 = userManager0.createUser("sptnj\"x7.", "sptnj\"x7.", "sptnj\"x7.", "sptnj\"x7.", (String) null);
      userManager0.updateUser(user0);
      assertEquals("sptnj\"x7.", user0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, "com.marketplace.vintage.exceptions.EntityAlreadyExistsException", "Y~1;{S", "com.marketplace.vintage.exceptions.EntityAlreadyExistsException", "com.marketplace.vintage.exceptions.EntityAlreadyExistsException", "com.marketplace.vintage.exceptions.EntityAlreadyExistsException");
      // Undeclared exception!
      try { 
        userManager0.updateUser(user0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with the id 00000000-0100-4000-8200-000003000000 was not found
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.getUserByEmail("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with the email  was not found
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.getUserByUsername((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with the username null was not found
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      userManager0.createUser("CF", "CF", "CF", "CF", "CF");
      User user0 = userManager0.getUserByUsername("CF");
      assertEquals("CF", user0.getTaxNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        userManager0.getUserById(uUID0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with the id 00000000-0100-4000-8200-000003000000 was not found
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User");
      userManager0.registerUser(user0);
      User user1 = userManager0.getUserById(uUID0);
      assertEquals("com.marketplace.vintage.user.User", user1.getTaxNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User");
      userManager0.registerUser(user0);
      // Undeclared exception!
      try { 
        userManager0.registerUser(user0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with that username already exists
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      // Undeclared exception!
      try { 
        userManager0.createUser(" ", " ", " ", " ", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The user's username cannot contain spaces
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User");
      userManager0.registerUser(user0);
      boolean boolean0 = userManager0.existsUserWithUsername("com.marketplace.vintage.user.User");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      boolean boolean0 = userManager0.existsUserWithUsername((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User", "com.marketplace.vintage.user.User");
      userManager0.registerUser(user0);
      boolean boolean0 = userManager0.existsUserWithEmail("com.marketplace.vintage.user.User");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      boolean boolean0 = userManager0.existsUserWithEmail("A user with t8at email already exists");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      userManager0.createUser("CF", "CF", "CF", "CF", "CF");
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, "AHS:L[)", "CF", "^<sa", "AHS:L[)", "^<sa");
      // Undeclared exception!
      try { 
        userManager0.registerUser(user0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with that email already exists
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, "Zz)KP{u(s", "Zz)KP{u(s", "Zz)KP{u(s", "C$=}sxt>8>Px8@", "Zz)KP{u(s");
      userManager0.registerUser(user0);
      User user1 = new User(uUID0, "C$=}sxt>8>Px8@", "Zz)KP{u(s", "C$=}sxt>8>Px8@", "Zz)KP{u(s", "Zz)KP{u(s");
      // Undeclared exception!
      try { 
        userManager0.registerUser(user1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A user with that id already exists
         //
         verifyException("com.marketplace.vintage.user.UserManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      userManager0.createUser("1", "1", "1", "1", "1");
      User user0 = userManager0.getUserByEmail("1");
      assertEquals("1", user0.getUsername());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UserManager userManager0 = new UserManager();
      List<User> list0 = userManager0.getAll();
      assertTrue(list0.isEmpty());
  }
}
