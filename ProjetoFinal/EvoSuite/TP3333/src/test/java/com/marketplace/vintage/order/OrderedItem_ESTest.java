/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 21:09:00 GMT 2024
 */

package com.marketplace.vintage.order;

import org.junit.Test;
import static org.junit.Assert.*;
import com.marketplace.vintage.order.OrderedItem;
import java.math.BigDecimal;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OrderedItem_ESTest extends OrderedItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OrderedItem orderedItem0 = new OrderedItem((UUID) null, "", "", (BigDecimal) null);
      BigDecimal bigDecimal0 = orderedItem0.getTotalPrice();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      OrderedItem orderedItem0 = new OrderedItem(uUID0, "", "", bigDecimal0);
      BigDecimal bigDecimal1 = orderedItem0.getTotalPrice();
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      OrderedItem orderedItem0 = new OrderedItem(uUID0, "", "", bigDecimal0);
      BigDecimal bigDecimal1 = orderedItem0.getTotalPrice();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OrderedItem orderedItem0 = new OrderedItem((UUID) null, "", "", (BigDecimal) null);
      UUID uUID0 = orderedItem0.getSellerId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(946);
      UUID uUID0 = MockUUID.fromString("com.marketplace.vintage.order.OrderedItem");
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      OrderedItem orderedItem0 = new OrderedItem(uUID0, "com.marketplace.vintage.order.OrderedItem", (String) null, bigDecimal0);
      UUID uUID1 = orderedItem0.getSellerId();
      assertEquals("b2030000-b303-4000-b403-0000b5030000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = new BigDecimal(2133L);
      OrderedItem orderedItem0 = new OrderedItem(uUID0, "", "yU'L$DQ)IN?^[I", bigDecimal0);
      String string0 = orderedItem0.getParcelCarrierName();
      assertEquals("", orderedItem0.getItemId());
      assertEquals("yU'L$DQ)IN?^[I", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      OrderedItem orderedItem0 = new OrderedItem(uUID0, "", "", bigDecimal0);
      String string0 = orderedItem0.getParcelCarrierName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("F>-<T]BF_^JA7");
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      OrderedItem orderedItem0 = new OrderedItem(uUID0, "F>-<T]BF_^JA7", "F>-<T]BF_^JA7", bigDecimal0);
      String string0 = orderedItem0.getItemId();
      assertEquals("F>-<T]BF_^JA7", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      OrderedItem orderedItem0 = new OrderedItem(uUID0, "", "", (BigDecimal) null);
      String string0 = orderedItem0.getItemId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("com.marketplace.vintage.order.OrderedItem");
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      OrderedItem orderedItem0 = new OrderedItem(uUID0, "com.marketplace.vintage.order.OrderedItem", (String) null, bigDecimal0);
      UUID uUID1 = orderedItem0.getSellerId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      OrderedItem orderedItem0 = new OrderedItem(uUID0, (String) null, (String) null, bigDecimal0);
      String string0 = orderedItem0.getItemId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      OrderedItem orderedItem0 = new OrderedItem(uUID0, (String) null, (String) null, bigDecimal0);
      String string0 = orderedItem0.getParcelCarrierName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = new BigDecimal((-3594L));
      OrderedItem orderedItem0 = new OrderedItem(uUID0, "", "com.marketplace.vintage.order.OrderedItem", bigDecimal0);
      orderedItem0.getTotalPrice();
      assertEquals("", orderedItem0.getItemId());
      assertEquals("com.marketplace.vintage.order.OrderedItem", orderedItem0.getParcelCarrierName());
  }
}
