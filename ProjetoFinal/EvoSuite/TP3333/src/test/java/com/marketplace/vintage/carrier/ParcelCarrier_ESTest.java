/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:37:16 GMT 2024
 */

package com.marketplace.vintage.carrier;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.carrier.NormalParcelCarrier;
import com.marketplace.vintage.carrier.ParcelCarrier;
import com.marketplace.vintage.carrier.ParcelCarrierType;
import com.marketplace.vintage.carrier.PremiumParcelCarrier;
import com.marketplace.vintage.expression.Exp4jExpressionSolver;
import com.marketplace.vintage.expression.ExpressionSolver;
import com.marketplace.vintage.item.ItemType;
import java.math.BigDecimal;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParcelCarrier_ESTest extends ParcelCarrier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("HUTEU)tBEFG`", "HUTEU)tBEFG`");
      BigDecimal bigDecimal0 = normalParcelCarrier0.getBaseValueForExpedition(3);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier("tax", "tax");
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      BigDecimal bigDecimal0 = premiumParcelCarrier0.getShippingCost(exp4jExpressionSolver0, 5);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier("basePrice", "basePrice");
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      BigDecimal bigDecimal0 = premiumParcelCarrier0.getShippingCost(exp4jExpressionSolver0, 3142);
      assertEquals((byte)3, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier((String) null, "");
      String string0 = normalParcelCarrier0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("", "3@c7");
      String string0 = normalParcelCarrier0.getName();
      assertEquals("", string0);
      assertEquals("3@c7", normalParcelCarrier0.getExpeditionPriceExpression());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier((String) null, (String) null);
      String string0 = normalParcelCarrier0.getExpeditionPriceExpression();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("bkoU6%", "J");
      assertEquals("J", normalParcelCarrier0.getExpeditionPriceExpression());
      
      normalParcelCarrier0.setExpeditionPriceExpression("");
      normalParcelCarrier0.getExpeditionPriceExpression();
      assertEquals("bkoU6%", normalParcelCarrier0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("+LR'd[!", "+LR'd[!");
      ItemType itemType0 = ItemType.MALA;
      boolean boolean0 = normalParcelCarrier0.canDeliverItemType(itemType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier(".{<<", "Ag.v<FLcJjpW),");
      ItemType itemType0 = ItemType.TSHIRT;
      premiumParcelCarrier0.canDeliverItemType(itemType0);
      assertEquals(".{<<", premiumParcelCarrier0.getName());
      assertEquals("Ag.v<FLcJjpW),", premiumParcelCarrier0.getExpeditionPriceExpression());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier(")~}z~$#c'MbA~}r5{>h0", ")~}z~$#c'MbA~}r5{>h0");
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      // Undeclared exception!
      try { 
        premiumParcelCarrier0.getShippingCost(exp4jExpressionSolver0, 10000);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier("com.marketplace.vintage.utils.VintageDate", ".Ovfr");
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      // Undeclared exception!
      try { 
        premiumParcelCarrier0.getShippingCost(exp4jExpressionSolver0, 94);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("B0S`+!rl^*", "B0S`+!rl^*");
      // Undeclared exception!
      try { 
        normalParcelCarrier0.getShippingCost((ExpressionSolver) null, 2530);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.carrier.ParcelCarrier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("bkoU6%", "J");
      BigDecimal bigDecimal0 = normalParcelCarrier0.getBaseValueForExpedition(1);
      assertEquals("bkoU6%", normalParcelCarrier0.getName());
      assertEquals("J", normalParcelCarrier0.getExpeditionPriceExpression());
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("/5C0", "/5C0");
      // Undeclared exception!
      try { 
        normalParcelCarrier0.getBaseValueForExpedition((-1728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Amount of items must be greater than 0
         //
         verifyException("com.marketplace.vintage.carrier.ParcelCarrier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("11ojg", "s?m7Ld3tjQo87: i");
      normalParcelCarrier0.getExpeditionTax();
      assertEquals("s?m7Ld3tjQo87: i", normalParcelCarrier0.getExpeditionPriceExpression());
      assertEquals("11ojg", normalParcelCarrier0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("11ojg", "s?m7Ld3tjQo87: i");
      String string0 = normalParcelCarrier0.getExpeditionPriceExpression();
      assertEquals("s?m7Ld3tjQo87: i", string0);
      assertEquals("11ojg", normalParcelCarrier0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier("z|S", "z|S");
      PremiumParcelCarrier premiumParcelCarrier1 = new PremiumParcelCarrier(premiumParcelCarrier0);
      boolean boolean0 = premiumParcelCarrier0.equals(premiumParcelCarrier1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier("z|S", "z|S");
      boolean boolean0 = premiumParcelCarrier0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier("z|S", "z|S");
      boolean boolean0 = premiumParcelCarrier0.equals(premiumParcelCarrier0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier("com.marketplace.vintage.utils.VintageDate", ".Ovfr");
      Object object0 = new Object();
      boolean boolean0 = premiumParcelCarrier0.equals(object0);
      assertEquals("com.marketplace.vintage.utils.VintageDate", premiumParcelCarrier0.getName());
      assertEquals(".Ovfr", premiumParcelCarrier0.getExpeditionPriceExpression());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("com.marketplace.vintage.utils.VintageDate", ".Ovfr");
      BigDecimal bigDecimal0 = normalParcelCarrier0.getBaseValueForExpedition(1688);
      assertEquals("com.marketplace.vintage.utils.VintageDate", normalParcelCarrier0.getName());
      assertEquals((byte)3, bigDecimal0.byteValue());
      assertEquals(".Ovfr", normalParcelCarrier0.getExpeditionPriceExpression());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("p8H1zKD:eHX$@", "p8H1zKD:eHX$@");
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      // Undeclared exception!
      try { 
        normalParcelCarrier0.getShippingCost(exp4jExpressionSolver0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown function or variable 'p8H1zKD' at pos 0 in expression 'p8H1zKD:eHX$@'
         //
         verifyException("net.objecthunter.exp4j.tokenizer.Tokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("", "^");
      // Undeclared exception!
      try { 
        normalParcelCarrier0.getShippingCost((ExpressionSolver) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Amount of items must be greater than 0
         //
         verifyException("com.marketplace.vintage.carrier.ParcelCarrier", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier("z|S", "z|S");
      ParcelCarrierType parcelCarrierType0 = premiumParcelCarrier0.getType();
      assertEquals(ParcelCarrierType.PREMIUM, parcelCarrierType0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("com.marketplace.vintage.utils.VintageDate", ".Ovfr");
      normalParcelCarrier0.addDeliveredOrder("com.marketplace.vintage.utils.VintageDate");
      normalParcelCarrier0.getDeliveredOrders();
      assertEquals("com.marketplace.vintage.utils.VintageDate", normalParcelCarrier0.getName());
      assertEquals(".Ovfr", normalParcelCarrier0.getExpeditionPriceExpression());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("com.marketplace.vintage.utils.VintageDate", ".Ovfr");
      normalParcelCarrier0.getDeliveredOrders();
      assertEquals(".Ovfr", normalParcelCarrier0.getExpeditionPriceExpression());
      assertEquals("com.marketplace.vintage.utils.VintageDate", normalParcelCarrier0.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier(")~}z~$#c'MbA~}r5{>h0", ")~}z~$#c'MbA~}r5{>h0");
      premiumParcelCarrier0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier("z|S", "z|S");
      String string0 = premiumParcelCarrier0.getName();
      assertEquals("z|S", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("com.marketplace.vintage.utils.VintageDate", ".Ovfr");
      ParcelCarrier parcelCarrier0 = normalParcelCarrier0.clone();
      assertEquals(".Ovfr", parcelCarrier0.getExpeditionPriceExpression());
      assertEquals("com.marketplace.vintage.utils.VintageDate", parcelCarrier0.getName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("B0S`+!rl^*", "B0S`+!rl^*");
      String string0 = normalParcelCarrier0.toString();
      assertEquals("ParcelCarrier{name='B0S`+!rl^*', expeditionPriceExpression='B0S`+!rl^*', type=NORMAL}", string0);
  }
}
