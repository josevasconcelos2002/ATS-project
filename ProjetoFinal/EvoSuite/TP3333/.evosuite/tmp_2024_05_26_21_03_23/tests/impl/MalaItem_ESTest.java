/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:16:03 GMT 2024
 */

package impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.item.Item;
import com.marketplace.vintage.item.ItemProperty;
import com.marketplace.vintage.item.condition.ItemCondition;
import com.marketplace.vintage.item.condition.UsedItemCondition;
import impl.MalaItem;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MalaItem_ESTest extends MalaItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("VCS>&>3M");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(125, 125);
      BigDecimal bigDecimal0 = new BigDecimal(125);
      MalaItem malaItem0 = new MalaItem(uUID0, "VCS>&>3M", 125, usedItemCondition0, "VCS>&>3M", "VCS>&>3M", bigDecimal0, "VCS>&>3M", 125, "VCS>&>3M", 125, 125);
      MalaItem malaItem1 = new MalaItem(uUID0, "VCS>&>3M", 125, usedItemCondition0, "VCS>&>3M", "VCS>&>3M", bigDecimal0, "VCS>&>3M", 125, "VCS>&>3M", 4, 4);
      BigDecimal bigDecimal1 = malaItem1.getPriceCorrection(125);
      assertEquals((byte) (-124), bigDecimal1.byteValue());
      
      boolean boolean0 = malaItem0.equals(malaItem1);
      assertEquals(125, malaItem1.getDimensionArea());
      assertEquals(4, malaItem1.getDepreciationRateOverYears());
      assertEquals(4, malaItem1.getCollectionYear());
      assertFalse(boolean0);
      
      malaItem1.equals(malaItem0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(6, 6);
      BigDecimal bigDecimal0 = new BigDecimal(3);
      MalaItem malaItem0 = new MalaItem(uUID0, "<numberOfPrevousOwners>", 3, usedItemCondition0, "<numberOfPrevousOwners>", "<numberOfPrevousOwners>", bigDecimal0, "<numberOfPrevousOwners>", 6, "<numberOfPrevousOwners>", 6, 6);
      malaItem0.equals((Object) null);
      MalaItem malaItem1 = new MalaItem(uUID0, "<numberOfPrevousOwners>", 3, usedItemCondition0, "<numberOfPrevousOwners>", "<numberOfPrevousOwners>", bigDecimal0, "<numberOfPrevousOwners>", 3, "<numberOfPrevousOwners>", 6, 6);
      malaItem0.equals(malaItem1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("VCS>&>3M");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(125, 125);
      BigDecimal bigDecimal0 = new BigDecimal(125);
      MalaItem malaItem0 = new MalaItem(uUID0, "VCS>&>3M", 125, usedItemCondition0, "VCS>&>3M", "VCS>&>3M", bigDecimal0, "VCS>&>3M", 125, "VCS>&>3M", 125, 125);
      ItemProperty itemProperty0 = ItemProperty.DIMENSION_AREA;
      Class<Object> class0 = Object.class;
      malaItem0.getProperty(itemProperty0, class0);
      MalaItem malaItem1 = new MalaItem(uUID0, "VCS>&>3M", 125, usedItemCondition0, "VCS>&>3M", "VCS>&>3M", bigDecimal0, "VCS>&>3M", 125, "", 4, (-1054));
      malaItem1.getPriceCorrection(125);
      malaItem0.equals(malaItem1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-1885), (-1885));
      BigDecimal bigDecimal0 = new BigDecimal(3278);
      bigDecimal0.intValue();
      MalaItem malaItem0 = new MalaItem(uUID0, "<numberOfPrevousOwners>", 3278, usedItemCondition0, "<numberOfPrevousOwners>", "<numberOfPrevousOwners>", bigDecimal0, "<numberOfPrevousOwners>", (-1885), "<numberOfPrevousOwners>", (-1885), (-1885));
      malaItem0.equals((Object) null);
      malaItem0.equals("<numberOfPrevousOwners>");
      MalaItem malaItem1 = new MalaItem(uUID0, "<numberOfPrevousOwners>", 3278, usedItemCondition0, "<numberOfPrevousOwners>", "<numberOfPrevousOwners>", bigDecimal0, "<numberOfPrevousOwners>", 3278, "<numberOfPrevousOwners>", (-1885), (-1885));
      malaItem0.equals(malaItem1);
      malaItem0.getItemType();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal(100.0);
      int int0 = 0;
      MalaItem malaItem0 = new MalaItem(uUID0, "EC`gk2x@k>", 0, usedItemCondition0, "EC`gk2x@k>", "EC`gk2x@k>", bigDecimal0, "EC`gk2x@k>", 0, "EC`gk2x@k>", (-847), 7);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      Class<Integer> class0 = Integer.class;
      malaItem1.toString();
      // Undeclared exception!
      try { 
        malaItem1.getProperty((ItemProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("GXh(xEwO)r)SWI");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(303, 303);
      usedItemCondition0.toString();
      MalaItem malaItem0 = new MalaItem(uUID0, "", 303, usedItemCondition0, "impl.MalaItem", "GXh(xEwO)r)SWI", (BigDecimal) null, ";x\"#F<Xl#;KZ", 303, "GXh(xEwO)r)SWI", 0, 303);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      int int0 = 0;
      malaItem0.toString();
      usedItemCondition0.toString();
      malaItem1.equals(malaItem1);
      malaItem0.setCurrentStock(1);
      // Undeclared exception!
      try { 
        malaItem1.getFinalPrice(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("MATERIAL");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(12, 12);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.plus();
      usedItemCondition0.getDisplayString();
      MalaItem malaItem0 = new MalaItem(uUID0, "MATERIAL", 12, usedItemCondition0, "", "MATERIAL", bigDecimal0, "MATERIAL", 2, "", (-3690), 2);
      usedItemCondition0.getDisplayString();
      malaItem0.getPriceCorrection(3621);
      malaItem0.setCurrentStock(3636);
      malaItem0.hashCode();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      Item item0 = malaItem0.clone();
      malaItem0.getItemType();
      malaItem0.hashCode();
      bigDecimal0.toString();
      malaItem0.hashCode();
      MalaItem malaItem1 = new MalaItem(malaItem0);
      malaItem0.getItemType();
      malaItem0.getMaterial();
      malaItem0.getDimensionArea();
      item0.equals(malaItem1);
      // Undeclared exception!
      malaItem0.getPriceCorrection(1984);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("TShirt");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 55);
      MalaItem malaItem0 = new MalaItem(uUID0, "TShirt", 0, usedItemCondition0, ";hx3yItIqp/", "$F4/!3HPD", (BigDecimal) null, "", 0, ", basePrice=", 55, 9);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      ItemProperty itemProperty0 = ItemProperty.BASE_PRICE;
      Class<Object> class0 = Object.class;
      malaItem1.setCurrentStock(0);
      usedItemCondition0.getDisplayString();
      usedItemCondition0.toString();
      malaItem1.getProperty(itemProperty0, class0);
      malaItem0.getDimensionArea();
      malaItem1.equals("Used (0/10, 55 previous owners)");
      // Undeclared exception!
      try { 
        malaItem1.getPriceCorrection(9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current year cannot be before collection year
         //
         verifyException("impl.MalaItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("VCS>&>3M");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-1), 0);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      usedItemCondition0.toString();
      MalaItem malaItem0 = new MalaItem(uUID0, "No item type with display name ", 125, usedItemCondition0, "No item type with display name ", "6|-_)(~oO4Y*K KX", bigDecimal0, "VCS>&>3M", 125, "No item type with display name ", 11, 0);
      ItemProperty itemProperty0 = ItemProperty.DIMENSION_AREA;
      Class<Object> class0 = Object.class;
      BigDecimal bigDecimal1 = new BigDecimal((double) 0);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      bigDecimal0.subtract(bigDecimal1, mathContext0);
      usedItemCondition0.toString();
      malaItem0.getProperty(itemProperty0, class0);
      int int0 = malaItem0.getDepreciationRateOverYears();
      assertEquals(0, int0);
      
      int int1 = malaItem0.getDimensionArea();
      assertEquals(125, int1);
      assertEquals("No item type with display name ", malaItem0.getMaterial());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("W\"");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      MalaItem malaItem0 = new MalaItem(uUID0, "W\"", 0, usedItemCondition0, "", "com.marketplace.vintage.item.condition.ItemConditionType", bigDecimal0, (String) null, 0, "", (-2130), (-2130));
      String string0 = malaItem0.getMaterial();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals((-2130), malaItem0.getDepreciationRateOverYears());
      assertEquals(0, malaItem0.getDimensionArea());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(21, 1);
      usedItemCondition0.getDisplayString();
      MalaItem malaItem0 = new MalaItem(uUID0, (String) null, 1, usedItemCondition0, (String) null, (String) null, (BigDecimal) null, (String) null, (-456), (String) null, 1094, 1094);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      malaItem1.clone();
      malaItem1.getDimensionArea();
      malaItem0.equals((Object) null);
      // Undeclared exception!
      try { 
        malaItem1.getPriceCorrection(1849);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(" was found");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 79);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MalaItem malaItem0 = new MalaItem(uUID0, " was found", 0, usedItemCondition0, " was found", " was found", bigDecimal0, " was found", 0, "Mala Premium", 2191, 79);
      malaItem0.equals(bigDecimal0);
      malaItem0.getItemType();
      ItemProperty itemProperty0 = ItemProperty.COLOR;
      Class<MalaItem> class0 = MalaItem.class;
      // Undeclared exception!
      try { 
        malaItem0.getProperty(itemProperty0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property not available in item: COLOR
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("GfgRa");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(10, (-390));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MalaItem malaItem0 = new MalaItem(uUID0, "DIMENSION_AREA", 10, usedItemCondition0, "DIMENSION_AREA", "GfgRa", bigDecimal0, "com.marketplace.vintage.item.Item", (-390), "", 14, 14);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      malaItem1.clone();
      usedItemCondition0.toString();
      malaItem0.getCollectionYear();
      malaItem1.getDimensionArea();
      malaItem1.getDepreciationRateOverYears();
      // Undeclared exception!
      try { 
        malaItem1.getPriceCorrection(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current year cannot be before collection year
         //
         verifyException("impl.MalaItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(6, 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      MalaItem malaItem0 = new MalaItem(uUID0, "V|jg_C;i9`YPs,gPLi", 6, usedItemCondition0, "c,", "V|jg_C;i9`YPs,gPLi", bigDecimal0, "@Q[Xm", (-454), (String) null, 6, 3);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      malaItem1.getMaterial();
      malaItem1.getCollectionYear();
      ItemProperty itemProperty0 = ItemProperty.HAS_LACES;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        malaItem1.getProperty(itemProperty0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property not available in item: HAS_LACES
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(16, 485);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MalaItem malaItem0 = new MalaItem(uUID0, "TSHIRT_PATTERN", 16, usedItemCondition0, "", "2aO%G 3|`", bigDecimal0, "2aO%G 3|`", 485, ">/Y~e!_(2 $9~", 485, 16);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      int int0 = malaItem1.getDimensionArea();
      assertTrue(malaItem1.equals((Object)malaItem0));
      assertEquals(485, int0);
      assertEquals(16, malaItem1.getDepreciationRateOverYears());
      assertEquals(">/Y~e!_(2 $9~", malaItem1.getMaterial());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("GZHeDjE");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal((long) 0);
      bigDecimal1.remainder(bigDecimal0);
      bigDecimal0.multiply(bigDecimal1);
      usedItemCondition0.toString();
      MalaItem malaItem0 = new MalaItem(uUID0, ", appreciationRateOverYears=", 0, usedItemCondition0, "", "", bigDecimal0, "GZHeDjE", 2286, "Current year cannot be before collection year", 0, 1571);
      malaItem0.getMaterial();
      malaItem0.getItemType();
      String string0 = malaItem0.toString();
      assertEquals("MalaItem{dimensionArea=2286, material='Current year cannot be before collection year', collectionYear=0, appreciationRateOverYears=1571, alphanumericID=', appreciationRateOverYears=', itemCondition=Used (0/10, 0 previous owners), description='', brand='', basePrice=10, parcelCarrierName=GZHeDjE}", string0);
      
      malaItem0.getItemType();
      malaItem0.getMaterial();
      BigDecimal bigDecimal2 = new BigDecimal((long) 0);
      MalaItem malaItem1 = new MalaItem(uUID0, "", 0, usedItemCondition0, "Current year cannot be before collection year", "Current year cannot be before collection year", bigDecimal2, "", 0, "COLLECTION_YEAR", 7, 4);
      boolean boolean0 = malaItem0.equals(malaItem1);
      assertFalse(boolean0);
      
      Item item0 = malaItem1.clone();
      malaItem0.clone();
      malaItem1.getMaterial();
      assertTrue(malaItem1.equals((Object)item0));
      
      int int0 = malaItem0.getDepreciationRateOverYears();
      assertEquals(1571, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MalaItem malaItem0 = new MalaItem(uUID0, "", 0, usedItemCondition0, "", "", bigDecimal0, "", 0, "DRi;'B-iV`7+oL\"", 184, 0);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      ItemProperty itemProperty0 = ItemProperty.MATERIAL;
      Class<Object> class0 = Object.class;
      Object object0 = malaItem1.getProperty(itemProperty0, class0);
      assertEquals(0, malaItem1.getDepreciationRateOverYears());
      assertEquals("DRi;'B-iV`7+oL\"", object0);
      assertEquals(0, malaItem1.getDimensionArea());
      assertTrue(malaItem1.equals((Object)malaItem0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(2, (-2691));
      MalaItem malaItem0 = new MalaItem(uUID0, "%R2IH/", 125, usedItemCondition0, "", "", (BigDecimal) null, "", 1616, "", 125, (-1401));
      MalaItem malaItem1 = new MalaItem(malaItem0);
      int int0 = malaItem1.getCollectionYear();
      assertEquals(1616, malaItem1.getDimensionArea());
      assertEquals("", malaItem1.getMaterial());
      assertTrue(malaItem1.equals((Object)malaItem0));
      assertEquals((-1401), malaItem1.getDepreciationRateOverYears());
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("QP3]%9n");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(5001, 741);
      usedItemCondition0.toString();
      usedItemCondition0.toString();
      usedItemCondition0.getDisplayString();
      BigDecimal bigDecimal0 = new BigDecimal(741);
      MalaItem malaItem0 = new MalaItem(uUID0, (String) null, 0, usedItemCondition0, "QP3]%9n", "", bigDecimal0, (String) null, 741, "eab)", (-1), 5001);
      ItemProperty itemProperty0 = ItemProperty.STOCK;
      Class<Object> class0 = Object.class;
      bigDecimal0.pow(0);
      malaItem0.getProperty(itemProperty0, class0);
      String string0 = malaItem0.toString();
      assertEquals("MalaItem{dimensionArea=741, material='eab)', collectionYear=-1, appreciationRateOverYears=5001, alphanumericID='null', itemCondition=Used (5001/10, 741 previous owners), description='QP3]%9n', brand='', basePrice=741, parcelCarrierName=null}", string0);
      
      malaItem0.clone();
      BigDecimal bigDecimal1 = malaItem0.getPriceCorrection(0);
      assertEquals((short)28479, bigDecimal1.shortValue());
      
      malaItem0.getItemType();
      malaItem0.hashCode();
      Item item0 = malaItem0.clone();
      assertTrue(item0.equals((Object)malaItem0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      MalaItem malaItem0 = new MalaItem(uUID0, "TSHIRT_SIZE", 0, usedItemCondition0, "TSHIRT_SIZE", "X![;7nTc^I", bigDecimal0, "X![;7nTc^I", 0, "X![;7nTc^I", 0, 0);
      String string0 = malaItem0.getMaterial();
      assertEquals("X![;7nTc^I", string0);
      assertEquals(0, malaItem0.getDimensionArea());
      assertEquals(0, malaItem0.getDepreciationRateOverYears());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("PLAIN");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1618, 3304);
      BigDecimal bigDecimal0 = new BigDecimal((long) 1618);
      bigDecimal0.toEngineeringString();
      int int0 = 0;
      bigDecimal0.longValue();
      MalaItem malaItem0 = new MalaItem(uUID0, "PLAIN", 3304, usedItemCondition0, "TSHIRT", "PLAIN", bigDecimal0, "PLAIN", 0, "TSHIRT", 0, 0);
      usedItemCondition0.toString();
      malaItem0.hashCode();
      MalaItem malaItem1 = new MalaItem(malaItem0);
      bigDecimal0.toPlainString();
      malaItem0.clone();
      malaItem0.clone();
      // Undeclared exception!
      try { 
        malaItem1.getPriceCorrection((-3108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current year cannot be before collection year
         //
         verifyException("impl.MalaItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(39, 39);
      usedItemCondition0.toString();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MalaItem malaItem0 = new MalaItem(uUID0, "", 39, usedItemCondition0, "", "", bigDecimal0, "", 39, "", 39, 0);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      malaItem1.toString();
      boolean boolean0 = malaItem0.equals(malaItem1);
      assertTrue(boolean0);
      
      usedItemCondition0.toString();
      malaItem0.hashCode();
      String string0 = malaItem1.toString();
      assertEquals("MalaItem{dimensionArea=39, material='', collectionYear=39, appreciationRateOverYears=0, alphanumericID='', itemCondition=Used (39/10, 39 previous owners), description='', brand='', basePrice=10, parcelCarrierName=}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1207, 1207);
      BigDecimal bigDecimal0 = new BigDecimal((long) 1207);
      MalaItem malaItem0 = new MalaItem(uUID0, (String) null, 1207, usedItemCondition0, (String) null, "w!HtY2UHF^5_LA`dP&u", bigDecimal0, (String) null, 1207, "", 1207, (-1152));
      int int0 = malaItem0.getDepreciationRateOverYears();
      assertEquals((-1152), int0);
      
      ItemProperty itemProperty0 = ItemProperty.BRAND;
      Class<String> class0 = String.class;
      malaItem0.getProperty(itemProperty0, class0);
      assertEquals(1207, malaItem0.getDimensionArea());
      assertEquals(1207, malaItem0.getCollectionYear());
      assertEquals("", malaItem0.getMaterial());
      
      // Undeclared exception!
      try { 
        malaItem0.getPriceCorrection((-1152));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current year cannot be before collection year
         //
         verifyException("impl.MalaItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(", basePrice=");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal(13);
      MalaItem malaItem0 = new MalaItem(uUID0, ", basePrice=", 0, usedItemCondition0, ", basePrice=", ", basePrice=", bigDecimal0, ", basePrice=", 0, (String) null, 0, (-1243));
      MalaItem malaItem1 = new MalaItem(malaItem0);
      int int0 = malaItem1.getDimensionArea();
      assertTrue(malaItem1.equals((Object)malaItem0));
      assertEquals(0, malaItem1.getCollectionYear());
      assertEquals(0, int0);
      assertEquals((-1243), malaItem1.getDepreciationRateOverYears());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      MalaItem malaItem0 = new MalaItem(uUID0, "impl.MalaItem", 0, usedItemCondition0, "impl.MalaItem", "impl.MalaItem", bigDecimal0, "", 0, "", 0, 0);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      int int0 = malaItem1.getCollectionYear();
      assertEquals("", malaItem1.getMaterial());
      assertTrue(malaItem1.equals((Object)malaItem0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 1027);
      MalaItem malaItem0 = new MalaItem(uUID0, "^{3u*+#'+U", 0, usedItemCondition0, "^{3u*+#'+U", "^{3u*+#'+U", (BigDecimal) null, "^{3u*+#'+U", 0, "q G/#lKu", 0, 0);
      malaItem0.getMaterial();
      int int0 = malaItem0.getDepreciationRateOverYears();
      assertEquals(0, int0);
      
      String string0 = malaItem0.getMaterial();
      assertEquals("q G/#lKu", string0);
      assertEquals(0, malaItem0.getDimensionArea());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MalaItem malaItem0 = null;
      MalaItem malaItem1 = null;
      try {
        malaItem1 = new MalaItem((MalaItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.MalaItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = new BigDecimal((long) 10);
      MalaItem malaItem0 = new MalaItem(uUID0, "Current year cannot be before collection year", 10, (ItemCondition) null, (String) null, (String) null, bigDecimal0, ", parcelCarrierName=", 10, "", 10, 12);
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal1 = bigDecimal0.abs(mathContext0);
      ItemProperty itemProperty0 = ItemProperty.COLLECTION_YEAR;
      Class<String> class0 = String.class;
      mathContext0.equals("V!2Z+)ZM-i");
      mathContext0.equals(bigDecimal1);
      // Undeclared exception!
      try { 
        malaItem0.getProperty(itemProperty0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-1136), 5);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MalaItem malaItem0 = new MalaItem(uUID0, "", 0, usedItemCondition0, "", (String) null, bigDecimal0, "", (-980), "", (-980), 1827);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      malaItem1.getPriceCorrection((-980));
      malaItem1.getDepreciationRateOverYears();
      ItemProperty itemProperty0 = ItemProperty.HAS_LACES;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        malaItem0.getProperty(itemProperty0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property not available in item: HAS_LACES
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal(100.0);
      MalaItem malaItem0 = new MalaItem(uUID0, "EC`gk2x@k>", 0, usedItemCondition0, "EC`gk2x@k>", "EC`gk2x@k>", bigDecimal0, "EC`gk2x@k>", 0, "EC`gk2x@k>", (-847), 7);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      ItemProperty itemProperty0 = ItemProperty.COLLECTION_YEAR;
      Class<Integer> class0 = Integer.class;
      String string0 = malaItem1.toString();
      assertEquals("MalaItem{dimensionArea=0, material='EC`gk2x@k>', collectionYear=-847, appreciationRateOverYears=7, alphanumericID='EC`gk2x@k>', itemCondition=Used (0/10, 0 previous owners), description='EC`gk2x@k>', brand='EC`gk2x@k>', basePrice=100, parcelCarrierName=EC`gk2x@k>}", string0);
      
      malaItem1.getProperty(itemProperty0, class0);
      BigDecimal bigDecimal1 = malaItem1.getPriceCorrection(145);
      assertEquals((byte) (-99), bigDecimal1.byteValue());
      
      malaItem0.getCollectionYear();
      malaItem0.hashCode();
      assertEquals(7, malaItem0.getDepreciationRateOverYears());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1100, (-3818));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MalaItem malaItem0 = new MalaItem(uUID0, "RJ'", 1100, usedItemCondition0, "V&He|xWisZpCnBY.u", "Bj[oO#:8`)b", bigDecimal0, "RJ'", (-3818), "Bj[oO#:8`)b", 1100, (-3818));
      String string0 = malaItem0.toString();
      assertEquals("MalaItem{dimensionArea=-3818, material='Bj[oO#:8`)b', collectionYear=1100, appreciationRateOverYears=-3818, alphanumericID='RJ'', itemCondition=Used (1100/10, -3818 previous owners), description='V&He|xWisZpCnBY.u', brand='Bj[oO#:8`)b', basePrice=0, parcelCarrierName=RJ'}", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("Q_c9(I");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      MalaItem malaItem0 = new MalaItem(uUID0, "Q_c9(I", 13, (ItemCondition) null, (String) null, "", bigDecimal0, "", 0, "", 0, 0);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      BigDecimal bigDecimal1 = malaItem1.getPriceCorrection(13);
      assertEquals(0, malaItem1.getDimensionArea());
      assertTrue(malaItem1.equals((Object)malaItem0));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals("", malaItem1.getMaterial());
      assertEquals(0, malaItem1.getDepreciationRateOverYears());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-118), 13);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      MalaItem malaItem0 = new MalaItem(uUID0, "", 3, usedItemCondition0, "", (String) null, bigDecimal0, "", 3, "F", (-118), (-118));
      MalaItem malaItem1 = new MalaItem(malaItem0);
      malaItem1.getItemType();
      assertEquals((-118), malaItem1.getCollectionYear());
      assertEquals("F", malaItem1.getMaterial());
      assertEquals((-118), malaItem1.getDepreciationRateOverYears());
      assertTrue(malaItem1.equals((Object)malaItem0));
      assertEquals(3, malaItem1.getDimensionArea());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MalaItem malaItem0 = new MalaItem((UUID) null, "", 1, (ItemCondition) null, "*", "I=", (BigDecimal) null, "", 1, "TShirt", 0, 0);
      ItemProperty itemProperty0 = ItemProperty.DEPRECIATION_RATE_OVER_YEARS;
      Class<Integer> class0 = Integer.class;
      Integer integer0 = malaItem0.getProperty(itemProperty0, class0);
      bigInteger0.equals(integer0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      MalaItem malaItem1 = null;
      try {
        malaItem1 = new MalaItem((UUID) null, "I=", (-728), (ItemCondition) null, "", "I=", bigDecimal0, "I=", (-728), "", 0, (-728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stock cannot be negative
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(7, 7);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MalaItem malaItem0 = new MalaItem((UUID) null, "", 7, usedItemCondition0, "", "", bigDecimal0, "", (-1), "", 10, (-1));
      MalaItem malaItem1 = new MalaItem(malaItem0);
      malaItem1.hashCode();
      assertEquals((-1), malaItem1.getDimensionArea());
      assertTrue(malaItem1.equals((Object)malaItem0));
      assertEquals((-1), malaItem1.getDepreciationRateOverYears());
      assertEquals(10, malaItem1.getCollectionYear());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-1955), 279);
      MalaItem malaItem0 = new MalaItem(uUID0, "Used (<conditionLevel>/10, <numberOfPreviousOwners> previous owners)", 279, usedItemCondition0, "#5>5nIz", "Used (<conditionLevel>/10, <numberOfPreviousOwners> previous owners)", (BigDecimal) null, "Used (<conditionLevel>/10, <numberOfPreviousOwners> previous owners)", (-1955), "#5>5nIz", (-1955), (-1955));
      Item item0 = malaItem0.clone();
      assertTrue(item0.equals((Object)malaItem0));
      
      BigDecimal bigDecimal0 = malaItem0.getPriceCorrection((-1955));
      assertEquals("#5>5nIz", malaItem0.getMaterial());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1955), malaItem0.getDepreciationRateOverYears());
      assertEquals((-1955), malaItem0.getCollectionYear());
      assertEquals((-1955), malaItem0.getDimensionArea());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      MalaItem malaItem0 = new MalaItem((UUID) null, "n+&Tf_:?WWe5t?", 0, (ItemCondition) null, "n+&Tf_:?WWe5t?", "n+&Tf_:?WWe5t?", bigDecimal0, "R}1R E.as;YG9($", (-2063), "R}1R E.as;YG9($", 0, (-2063));
      MalaItem malaItem1 = new MalaItem(malaItem0);
      assertEquals(0, malaItem1.getCollectionYear());
      assertTrue(malaItem1.equals((Object)malaItem0));
      assertEquals((-2063), malaItem1.getDimensionArea());
      assertEquals("R}1R E.as;YG9($", malaItem1.getMaterial());
      assertEquals((-2063), malaItem1.getDepreciationRateOverYears());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("VCS>&>3M");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(125, 125);
      BigDecimal bigDecimal0 = new BigDecimal(125);
      MalaItem malaItem0 = new MalaItem(uUID0, "VCS>&>3M", 125, usedItemCondition0, "VCS>&>3M", "VCS>&>3M", bigDecimal0, "VCS>&>3M", 125, "VCS>&>3M", 125, 125);
      ItemProperty itemProperty0 = ItemProperty.DIMENSION_AREA;
      Class<Object> class0 = Object.class;
      Object object0 = malaItem0.getProperty(itemProperty0, class0);
      assertEquals(125, object0);
      
      MalaItem malaItem1 = new MalaItem(uUID0, "VCS>&>3M", 125, usedItemCondition0, "VCS>&>3M", "VCS>&>3M", bigDecimal0, "VCS>&>3M", 125, "", 125, 125);
      BigDecimal bigDecimal1 = malaItem1.getPriceCorrection(125);
      assertEquals((byte)0, bigDecimal1.byteValue());
      
      boolean boolean0 = malaItem0.equals(malaItem1);
      assertFalse(boolean0);
      assertEquals(125, malaItem1.getDepreciationRateOverYears());
      assertEquals(125, malaItem1.getCollectionYear());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(6, 6);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      MalaItem malaItem0 = new MalaItem(uUID0, "<numberOfPrevousOwners>", 3278, usedItemCondition0, "<numberOfPrevousOwners>", "<numberOfPrevousOwners>", bigDecimal0, "<numberOfPrevousOwners>", 6, "<numberOfPrevousOwners>", 6, 6);
      usedItemCondition0.toString();
      boolean boolean0 = malaItem0.equals((Object) null);
      assertFalse(boolean0);
      
      MalaItem malaItem1 = new MalaItem(uUID0, "<numberOfPrevousOwners>", 3278, usedItemCondition0, "<numberOfPrevousOwners>", "<numberOfPrevousOwners>", bigDecimal0, "<numberOfPrevousOwners>", 3278, "<numberOfPrevousOwners>", 6, 6);
      boolean boolean1 = malaItem0.equals(malaItem1);
      assertFalse(boolean1);
      
      String string0 = malaItem1.toString();
      assertEquals("MalaItem{dimensionArea=3278, material='<numberOfPrevousOwners>', collectionYear=6, appreciationRateOverYears=6, alphanumericID='<numberOfPrevousOwners>', itemCondition=Used (6/10, 6 previous owners), description='<numberOfPrevousOwners>', brand='<numberOfPrevousOwners>', basePrice=1, parcelCarrierName=<numberOfPrevousOwners>}", string0);
      assertFalse(malaItem1.equals((Object)malaItem0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("BwN3YNH|bXHyu_cBhK");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(294, 294);
      MalaItem malaItem0 = new MalaItem(uUID0, "BwN3YNH|bXHyu_cBhK", 294, usedItemCondition0, "BwN3YNH|bXHyu_cBhK", "BwN3YNH|bXHyu_cBhK", (BigDecimal) null, "BwN3YNH|bXHyu_cBhK", 294, "BwN3YNH|bXHyu_cBhK", 294, 294);
      malaItem0.equals(malaItem0);
      int int0 = 1313;
      // Undeclared exception!
      try { 
        malaItem0.getPriceCorrection(1313);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1207, 1207);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MalaItem malaItem0 = new MalaItem(uUID0, (String) null, 1207, usedItemCondition0, (String) null, (String) null, bigDecimal0, (String) null, 1207, (String) null, 1207, (-1117));
      ItemProperty itemProperty0 = ItemProperty.BRAND;
      Class<String> class0 = String.class;
      malaItem0.getProperty(itemProperty0, class0);
      // Undeclared exception!
      try { 
        malaItem0.getPriceCorrection((-1117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current year cannot be before collection year
         //
         verifyException("impl.MalaItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-1885), (-1885));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MalaItem malaItem0 = new MalaItem(uUID0, "<numberOfPrevousOwners>", 3278, usedItemCondition0, "<numberOfPrevousOwners>", "<numberOfPrevousOwners>", bigDecimal0, "@$1kMn ", (-1885), "@$1kMn ", (-1885), (-1885));
      boolean boolean0 = malaItem0.equals("<numberOfPrevousOwners>");
      assertFalse(boolean0);
      
      MalaItem malaItem1 = new MalaItem(uUID0, "@$1kMn ", 3278, usedItemCondition0, "@$1kMn ", "@$1kMn ", bigDecimal0, "<numberOfPrevousOwners>", 3278, "<numberOfPrevousOwners>", (-1885), (-1885));
      boolean boolean1 = malaItem0.equals(malaItem1);
      assertEquals((-1885), malaItem1.getCollectionYear());
      assertEquals(3278, malaItem1.getDimensionArea());
      assertEquals("<numberOfPrevousOwners>", malaItem1.getMaterial());
      assertEquals((-1885), malaItem1.getDepreciationRateOverYears());
      assertFalse(boolean1);
      assertEquals((-1885), malaItem0.getDimensionArea());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MalaItem malaItem0 = new MalaItem((UUID) null, "NEW", 2935, (ItemCondition) null, "NEW", "NEW", (BigDecimal) null, "NEW", 2935, "NEW", 2935, 2935);
      ItemProperty itemProperty0 = ItemProperty.DEPRECIATION_RATE_OVER_YEARS;
      Class<Integer> class0 = Integer.class;
      Integer integer0 = malaItem0.getProperty(itemProperty0, class0);
      assertEquals(2935, malaItem0.getCollectionYear());
      assertEquals(2935, (int)integer0);
      assertEquals(2935, malaItem0.getDimensionArea());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      byte[] byteArray0 = new byte[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      MalaItem malaItem0 = new MalaItem(uUID0, "+.W", 0, usedItemCondition0, "+.W", "+.W", bigDecimal0, "+.W", (byte)0, "+.W", (byte)0, 0);
      ItemProperty itemProperty0 = ItemProperty.MATERIAL;
      Class<Object> class0 = Object.class;
      Object object0 = malaItem0.getProperty(itemProperty0, class0);
      assertEquals("+.W", object0);
      
      Item item0 = malaItem0.clone();
      assertTrue(item0.equals((Object)malaItem0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("MATERIAL");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(12, 12);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      MalaItem malaItem0 = new MalaItem(uUID0, "MATERIAL", 12, usedItemCondition0, "MATERIAL", "MATERIAL", bigDecimal0, "MATERIAL", 12, "MATERIAL", 12, 12);
      MalaItem malaItem1 = new MalaItem(malaItem0);
      malaItem1.getItemType();
      malaItem0.hashCode();
      boolean boolean0 = malaItem1.equals(malaItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MalaItem malaItem0 = new MalaItem(uUID0, "EC`dk2J@k>", 0, usedItemCondition0, "EC`dk2J@k>", "EC`dk2J@k>", bigDecimal0, "EC`dk2J@k>", 0, "EC`dk2J@k>", 0, 0);
      ItemProperty itemProperty0 = ItemProperty.COLLECTION_YEAR;
      Class<Integer> class0 = Integer.class;
      Integer integer0 = malaItem0.getProperty(itemProperty0, class0);
      assertEquals(0, malaItem0.getDepreciationRateOverYears());
      assertEquals(0, (int)integer0);
      assertEquals(0, malaItem0.getDimensionArea());
  }
}
