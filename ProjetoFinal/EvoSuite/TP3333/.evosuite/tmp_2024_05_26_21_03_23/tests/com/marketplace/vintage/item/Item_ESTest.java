/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:15:16 GMT 2024
 */

package com.marketplace.vintage.item;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.item.Item;
import com.marketplace.vintage.item.ItemProperty;
import com.marketplace.vintage.item.condition.ItemCondition;
import com.marketplace.vintage.item.condition.UsedItemCondition;
import impl.MalaItem;
import impl.PremiumMalaItem;
import impl.PremiumSapatilhasItem;
import impl.SapatilhasItem;
import impl.TshirtItem;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Item_ESTest extends Item_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 654);
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 7, usedItemCondition0, "WN{BX>;6", "Yd%pGwsGyBu3bb/)2g/", bigDecimal0, "Yd%pGwsGyBu3bb/)2g/", 0, ", size=", 2, 0);
      PremiumMalaItem premiumMalaItem1 = new PremiumMalaItem(uUID0, "H4R9!:i(%]+(r|D{", 654, usedItemCondition0, "Stock cannot be negative", ", appreciationRateOverYears=", (BigDecimal) null, "com.marketplace.vintage.item.Item$1", (-311), "com.marketplace.vintage.item.Item$1", 2, 0);
      premiumMalaItem1.setCurrentStock(0);
      premiumMalaItem0.equals(premiumMalaItem1);
      assertEquals(0, premiumMalaItem1.getCurrentStock());
      assertEquals("Yd%pGwsGyBu3bb/)2g/", premiumMalaItem0.getParcelCarrierName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(735, 3);
      BigDecimal bigDecimal0 = new BigDecimal(3);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "F", 4, usedItemCondition0, "F", "F", bigDecimal0, "", (-1840), false, "F", 3, (-1840));
      ItemProperty itemProperty0 = ItemProperty.BRAND;
      Class<Object> class0 = Object.class;
      Object object0 = premiumSapatilhasItem0.getProperty(itemProperty0, class0);
      assertEquals("", premiumSapatilhasItem0.getParcelCarrierName());
      assertEquals("F", premiumSapatilhasItem0.getAlphanumericId());
      assertEquals(4, premiumSapatilhasItem0.getCurrentStock());
      assertEquals("F", premiumSapatilhasItem0.getDescription());
      assertEquals("F", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("mJu7&C#LLPX8+>P");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1373, 1373);
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.SMALL;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "com.marketplace.vintage.item.ItemProperty", 125, usedItemCondition0, "mJu7&C#LLPX8+>P", "'%\"+[A@<QM7n", bigDecimal0, "", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      ItemProperty itemProperty0 = ItemProperty.STOCK;
      Class<Integer> class0 = Integer.class;
      Integer integer0 = tshirtItem0.getProperty(itemProperty0, class0);
      assertEquals("mJu7&C#LLPX8+>P", tshirtItem0.getDescription());
      assertEquals("", tshirtItem0.getParcelCarrierName());
      assertEquals("'%\"+[A@<QM7n", tshirtItem0.getBrand());
      assertEquals("com.marketplace.vintage.item.ItemProperty", tshirtItem0.getAlphanumericId());
      assertEquals(125, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-3374), 654);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "Yd%pGwsGyBu3bb/)2g/", 654, usedItemCondition0, "Stock cannot be negative", ", appreciationRateOverYears=", (BigDecimal) null, "WN{BX>;6", (-311), "WN{BX>;6", 2, 654);
      ItemProperty itemProperty0 = ItemProperty.BASE_PRICE;
      Class<Object> class0 = Object.class;
      premiumMalaItem0.getProperty(itemProperty0, class0);
      assertEquals("Stock cannot be negative", premiumMalaItem0.getDescription());
      assertEquals("WN{BX>;6", premiumMalaItem0.getParcelCarrierName());
      assertEquals(654, premiumMalaItem0.getCurrentStock());
      assertEquals(", appreciationRateOverYears=", premiumMalaItem0.getBrand());
      assertEquals("Yd%pGwsGyBu3bb/)2g/", premiumMalaItem0.getAlphanumericId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("j!Q");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(125, 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, (String) null, 0, usedItemCondition0, "y:?NyjTq.A>UF]7", "y:?NyjTq.A>UF]7", bigDecimal0, "j!Q", 0, (String) null, 1094, 0);
      ItemProperty itemProperty0 = ItemProperty.ITEM_CONDITION;
      Class<Object> class0 = Object.class;
      premiumMalaItem0.getProperty(itemProperty0, class0);
      assertEquals(0, premiumMalaItem0.getCurrentStock());
      assertEquals("j!Q", premiumMalaItem0.getParcelCarrierName());
      assertEquals("y:?NyjTq.A>UF]7", premiumMalaItem0.getBrand());
      assertEquals("y:?NyjTq.A>UF]7", premiumMalaItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = new BigDecimal((long) 763);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "b", 763, (ItemCondition) null, "impl.SapatilhasItem", "Ret", bigDecimal0, "b", 0, true, "b", 0, 0);
      premiumSapatilhasItem0.getPriceCorrection(0);
      assertEquals("b", premiumSapatilhasItem0.getParcelCarrierName());
      assertEquals(763, premiumSapatilhasItem0.getCurrentStock());
      assertEquals("b", premiumSapatilhasItem0.getAlphanumericId());
      assertEquals("impl.SapatilhasItem", premiumSapatilhasItem0.getDescription());
      assertEquals("Ret", premiumSapatilhasItem0.getBrand());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(2, 2);
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) 2, 0);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem((UUID) null, (String) null, 2, usedItemCondition0, (String) null, (String) null, bigDecimal0, ")dv-AX<b3a@R", 1317, false, ", color='", 1562, (-2324));
      premiumSapatilhasItem0.getPriceCorrection(2139);
      assertEquals(2, premiumSapatilhasItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("Stock cannot be negative");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(6, 6);
      BigDecimal bigDecimal0 = new BigDecimal((double) 6);
      SapatilhasItem sapatilhasItem0 = new SapatilhasItem(uUID0, "Stock cannot be negative", 6, usedItemCondition0, "eoIz&A`c)P8oaOI-", "JSX1(P28", bigDecimal0, "Stock cannot be negative", 2039, true, "JSX1(P28", 6);
      sapatilhasItem0.getPriceCorrection(14);
      assertEquals("eoIz&A`c)P8oaOI-", sapatilhasItem0.getDescription());
      assertEquals("JSX1(P28", sapatilhasItem0.getBrand());
      assertEquals("Stock cannot be negative", sapatilhasItem0.getParcelCarrierName());
      assertEquals(6, sapatilhasItem0.getCurrentStock());
      assertEquals("Stock cannot be negative", sapatilhasItem0.getAlphanumericId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(" qX");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.LARGE;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "", 1313, usedItemCondition0, "[LU]-BH6]0j\u0005", "", bigDecimal0, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      String string0 = tshirtItem0.getParcelCarrierName();
      assertEquals("", tshirtItem0.getAlphanumericId());
      assertEquals(1313, tshirtItem0.getCurrentStock());
      assertEquals("", tshirtItem0.getBrand());
      assertNull(string0);
      assertEquals("[LU]-BH6]0j\u0005", tshirtItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "7Z", 128, (ItemCondition) null, "->o", "", (BigDecimal) null, "V", 128, true, "", 128, 0);
      String string0 = premiumSapatilhasItem0.getParcelCarrierName();
      assertEquals("", premiumSapatilhasItem0.getBrand());
      assertEquals(128, premiumSapatilhasItem0.getCurrentStock());
      assertEquals("V", string0);
      assertEquals("7Z", premiumSapatilhasItem0.getAlphanumericId());
      assertEquals("->o", premiumSapatilhasItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(771, 714);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem((UUID) null, "`", 714, usedItemCondition0, "Rj4NK')WR`s&v#", "Rj4NK')WR`s&v#", bigDecimal0, "Rj4NK')WR`s&v#", 714, "`", 3859, (-70));
      premiumMalaItem0.getOwnerUuid();
      assertEquals("`", premiumMalaItem0.getAlphanumericId());
      assertEquals("Rj4NK')WR`s&v#", premiumMalaItem0.getBrand());
      assertEquals(714, premiumMalaItem0.getCurrentStock());
      assertEquals("Rj4NK')WR`s&v#", premiumMalaItem0.getParcelCarrierName());
      assertEquals("Rj4NK')WR`s&v#", premiumMalaItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 125);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "Stock cannot be negative", 0, usedItemCondition0, "", "F56|e^8v", (BigDecimal) null, "F56|e^8v", 0, "F56|e^8v", (-1576), 0);
      premiumMalaItem0.getItemType();
      assertEquals("F56|e^8v", premiumMalaItem0.getParcelCarrierName());
      assertEquals("", premiumMalaItem0.getDescription());
      assertEquals("F56|e^8v", premiumMalaItem0.getBrand());
      assertEquals("Stock cannot be negative", premiumMalaItem0.getAlphanumericId());
      assertEquals(0, premiumMalaItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("SAPATILHAS_PREMIUM");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(3, 3113);
      BigDecimal bigDecimal0 = new BigDecimal((-1169));
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.EXTRA_LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PALM_TREES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "SAPATILHAS_PREMIUM", 4375, usedItemCondition0, "SAPATILHAS_PREMIUM", "SAPATILHAS_PREMIUM", bigDecimal0, "SAPATILHAS_PREMIUM", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      tshirtItem0.getItemType();
      assertEquals(4375, tshirtItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, (-1403));
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) 0);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "com.marketplace.vintage.item.Item$1", 0, usedItemCondition0, "com.marketplace.vintage.item.Item$1", "com.marketplace.vintage.item.Item$1", bigDecimal0, "y@j", (-1403), "com.marketplace.vintage.item.Item$1", (-1403), (-1403));
      premiumMalaItem0.getItemCondition();
      assertEquals(0, premiumMalaItem0.getCurrentStock());
      assertEquals("com.marketplace.vintage.item.Item$1", premiumMalaItem0.getBrand());
      assertEquals("com.marketplace.vintage.item.Item$1", premiumMalaItem0.getDescription());
      assertEquals("y@j", premiumMalaItem0.getParcelCarrierName());
      assertEquals("com.marketplace.vintage.item.Item$1", premiumMalaItem0.getAlphanumericId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(125, (-2622));
      BigDecimal bigDecimal0 = new BigDecimal(125);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 125, usedItemCondition0, "", "", bigDecimal0, "", 656, "", 125, (-3229));
      BigDecimal bigDecimal1 = premiumMalaItem0.getFinalPrice(193);
      assertEquals(125, premiumMalaItem0.getCurrentStock());
      assertEquals((short)9539, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(2, 2796);
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal((-4630), mathContext0);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 2796, usedItemCondition0, "", "{y}z^K,1CW{^AOo~-gM", bigDecimal0, "", 2, "", 2, (-1));
      BigDecimal bigDecimal1 = premiumMalaItem0.getFinalPrice(2);
      assertEquals("", premiumMalaItem0.getAlphanumericId());
      assertEquals((short) (-4630), bigDecimal1.shortValue());
      assertEquals(2796, premiumMalaItem0.getCurrentStock());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals("", premiumMalaItem0.getParcelCarrierName());
      assertEquals("{y}z^K,1CW{^AOo~-gM", premiumMalaItem0.getBrand());
      assertEquals("", premiumMalaItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1988, 1938);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "j_}, DOs<B", 0, usedItemCondition0, "j_}, DOs<B", "(", bigDecimal0, "", 15, false, (String) null, 206, (-238));
      String string0 = premiumSapatilhasItem0.getDescription();
      assertEquals("(", premiumSapatilhasItem0.getBrand());
      assertEquals("", premiumSapatilhasItem0.getParcelCarrierName());
      assertEquals("j_}, DOs<B", string0);
      assertEquals(0, premiumSapatilhasItem0.getCurrentStock());
      assertEquals("j_}, DOs<B", premiumSapatilhasItem0.getAlphanumericId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(3341, 3341);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MalaItem malaItem0 = new MalaItem(uUID0, "", 0, usedItemCondition0, "", "", bigDecimal0, "", 3341, "com.marketplace.vintage.item.Item$1", 7, (-154));
      malaItem0.getDescription();
      assertEquals(0, malaItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, (-1871));
      BigDecimal bigDecimal0 = new BigDecimal((-1837));
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "@7x4`G!]='5", 0, usedItemCondition0, "", "", bigDecimal0, "", 0, false, "", (-1), 2);
      int int0 = premiumSapatilhasItem0.getCurrentStock();
      assertEquals(0, int0);
      assertEquals("", premiumSapatilhasItem0.getBrand());
      assertEquals("@7x4`G!]='5", premiumSapatilhasItem0.getAlphanumericId());
      assertEquals("", premiumSapatilhasItem0.getParcelCarrierName());
      assertEquals("", premiumSapatilhasItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-1222), 164);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "X6zxb]efU!7&UIO;2", 164, usedItemCondition0, "", "o~R|x}V'j5Oz", bigDecimal0, "X6zxb]efU!7&UIO;2", (-1222), false, "|=DHdrqLj", 164, 592);
      String string0 = premiumSapatilhasItem0.getBrand();
      assertEquals("X6zxb]efU!7&UIO;2", premiumSapatilhasItem0.getAlphanumericId());
      assertEquals("o~R|x}V'j5Oz", string0);
      assertEquals(164, premiumSapatilhasItem0.getCurrentStock());
      assertEquals("X6zxb]efU!7&UIO;2", premiumSapatilhasItem0.getParcelCarrierName());
      assertEquals("", premiumSapatilhasItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(3721, 2);
      MalaItem malaItem0 = new MalaItem(uUID0, "mbMLg^|US[BH)", 0, usedItemCondition0, "", "", (BigDecimal) null, "#v+oN,aCHAsF2", 0, "M92<Wd", 0, 7);
      String string0 = malaItem0.getBrand();
      assertEquals("mbMLg^|US[BH)", malaItem0.getAlphanumericId());
      assertEquals("", string0);
      assertEquals("", malaItem0.getDescription());
      assertEquals(0, malaItem0.getCurrentStock());
      assertEquals("#v+oN,aCHAsF2", malaItem0.getParcelCarrierName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("Av(SFMkT,TTwsK0Y2:");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-129), 6);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.MEDIUM;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "Av(SFMkT,TTwsK0Y2:", 1572, usedItemCondition0, "Av(SFMkT,TTwsK0Y2:", "Av(SFMkT,TTwsK0Y2:", (BigDecimal) null, "Av(SFMkT,TTwsK0Y2:", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      tshirtItem0.getBasePrice();
      assertEquals(1572, tshirtItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-1902), 0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 0, usedItemCondition0, "", (String) null, bigDecimal0, (String) null, 0, (String) null, 302, 0);
      premiumMalaItem0.getBasePrice();
      assertEquals(0, premiumMalaItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(3, (-2400));
      BigDecimal bigDecimal0 = new BigDecimal((-855));
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.MEDIUM;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "=-~6}8/d", 160, usedItemCondition0, (String) null, "", bigDecimal0, (String) null, tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      tshirtItem0.getBasePrice();
      assertEquals(160, tshirtItem0.getCurrentStock());
      assertEquals("=-~6}8/d", tshirtItem0.getAlphanumericId());
      assertEquals("", tshirtItem0.getBrand());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("^om*6vKYoFL<}{8E");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(2634, 4087);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      MalaItem malaItem0 = new MalaItem(uUID0, (String) null, 4087, usedItemCondition0, (String) null, "^om*6vKYoFL<}{8E", bigDecimal0, "vn8Kl!}yn/qo:V", 2634, "", 2224, 13);
      String string0 = malaItem0.getAlphanumericId();
      assertNull(string0);
      assertEquals("vn8Kl!}yn/qo:V", malaItem0.getParcelCarrierName());
      assertEquals(4087, malaItem0.getCurrentStock());
      assertEquals("^om*6vKYoFL<}{8E", malaItem0.getBrand());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "Dm{A-NrL-X$MHK:b", 13, usedItemCondition0, "kBW kk$nii", "Dm{A-NrL-X$MHK:b", bigDecimal0, "Dm{A-NrL-X$MHK:b", 0, (String) null, 0, 0);
      String string0 = premiumMalaItem0.getAlphanumericId();
      assertEquals(13, premiumMalaItem0.getCurrentStock());
      assertEquals("Dm{A-NrL-X$MHK:b", string0);
      assertEquals("Dm{A-NrL-X$MHK:b", premiumMalaItem0.getParcelCarrierName());
      assertEquals("Dm{A-NrL-X$MHK:b", premiumMalaItem0.getBrand());
      assertEquals("kBW kk$nii", premiumMalaItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 0, usedItemCondition0, "", "", bigDecimal0, "", 1985, "", 0, (-1731));
      premiumMalaItem0.equals(premiumMalaItem0);
      assertEquals(0, premiumMalaItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-1222), 164);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "X6zxb]efU!7&UIO;2", 164, usedItemCondition0, "", "o~R|x}V'j5Oz", bigDecimal0, "X6zxb]efU!7&UIO;2", (-1222), false, "|=DHdrqLj", 164, 592);
      premiumSapatilhasItem0.equals((Object) null);
      assertEquals("", premiumSapatilhasItem0.getDescription());
      assertEquals("X6zxb]efU!7&UIO;2", premiumSapatilhasItem0.getParcelCarrierName());
      assertEquals("o~R|x}V'j5Oz", premiumSapatilhasItem0.getBrand());
      assertEquals(164, premiumSapatilhasItem0.getCurrentStock());
      assertEquals("X6zxb]efU!7&UIO;2", premiumSapatilhasItem0.getAlphanumericId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, (-1403));
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) 0);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "com.marketplace.vintage.item.Item$1", 0, usedItemCondition0, "com.marketplace.vintage.item.Item$1", "com.marketplace.vintage.item.Item$1", bigDecimal0, "y@j", (-1403), "com.marketplace.vintage.item.Item$1", (-1403), (-1403));
      Item item0 = premiumMalaItem0.clone();
      assertEquals("com.marketplace.vintage.item.Item$1", item0.getDescription());
      assertEquals("com.marketplace.vintage.item.Item$1", item0.getAlphanumericId());
      assertEquals("com.marketplace.vintage.item.Item$1", item0.getBrand());
      assertEquals(0, item0.getCurrentStock());
      assertEquals("y@j", item0.getParcelCarrierName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = new BigDecimal((long) 763);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "b", 763, (ItemCondition) null, "impl.SapatilhasItem", "Ret", bigDecimal0, "b", 0, true, "b", 0, 0);
      Item item0 = premiumSapatilhasItem0.clone();
      assertEquals("Ret", item0.getBrand());
      assertEquals("impl.SapatilhasItem", item0.getDescription());
      assertEquals("b", item0.getAlphanumericId());
      assertEquals(763, premiumSapatilhasItem0.getCurrentStock());
      assertEquals("b", item0.getParcelCarrierName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(" qX");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.SMALL;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "+={%mv>", 0, usedItemCondition0, "+={%mv>", (String) null, bigDecimal0, "+={%mv>", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      ItemProperty itemProperty0 = ItemProperty.PARCEL_CARRIER_NAME;
      // Undeclared exception!
      try { 
        tshirtItem0.getProperty(itemProperty0, (Class<PremiumMalaItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(376, 13);
      BigDecimal bigDecimal0 = new BigDecimal(249L);
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.MEDIUM;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.PLAIN;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "STRIPES", 13, usedItemCondition0, "", "STRIPES", bigDecimal0, "MALA_PREMIUM", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      ItemProperty itemProperty0 = ItemProperty.APPRECIATION_RATE_OVER_YEARS;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        tshirtItem0.getProperty(itemProperty0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Property not available in item: APPRECIATION_RATE_OVER_YEARS
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 125);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "Stock cannot be negative", 0, usedItemCondition0, "", "F56|e^8v", (BigDecimal) null, "F56|e^8v", 0, "F56|e^8v", (-1576), 0);
      // Undeclared exception!
      try { 
        premiumMalaItem0.getPriceCorrection(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("impl.MalaItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-1222), 164);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "X6zxb]efU!7&UIO;2", 164, usedItemCondition0, "", "o~R|x}V'j5Oz", bigDecimal0, "X6zxb]efU!7&UIO;2", (-1222), false, "|=DHdrqLj", 164, 592);
      // Undeclared exception!
      try { 
        premiumSapatilhasItem0.getPriceCorrection((-4003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current year cannot be before collection year
         //
         verifyException("impl.PremiumSapatilhasItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("*uEXci(Y{Ow3G%");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1, 1);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "*uEXci(Y{Ow3G%", 1, usedItemCondition0, "*uEXci(Y{Ow3G%", "*uEXci(Y{Ow3G%", (BigDecimal) null, "n%42mK{", 1743, true, "*uEXci(Y{Ow3G%", 1927, 2);
      // Undeclared exception!
      try { 
        premiumSapatilhasItem0.getFinalPrice(1927);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(235, 235);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "", 235, usedItemCondition0, "", "", bigDecimal0, "", 235, false, "", 235, (-1018));
      // Undeclared exception!
      try { 
        premiumSapatilhasItem0.getFinalPrice((-1232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current year cannot be before collection year
         //
         verifyException("impl.PremiumSapatilhasItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, (-2522));
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "", 16, usedItemCondition0, "", (String) null, (BigDecimal) null, "", 3620, true, "", 6, 16);
      // Undeclared exception!
      try { 
        premiumSapatilhasItem0.setCurrentStock((-2522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stock cannot be negative
         //
         verifyException("com.marketplace.vintage.item.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(" qX");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "", 734, usedItemCondition0, ">yBZh-G", (String) null, bigDecimal0, "+={%mv>", 9, true, "", 619, 0);
      String string0 = premiumSapatilhasItem0.getAlphanumericId();
      assertEquals(734, premiumSapatilhasItem0.getCurrentStock());
      assertEquals("", string0);
      assertEquals(">yBZh-G", premiumSapatilhasItem0.getDescription());
      assertEquals("+={%mv>", premiumSapatilhasItem0.getParcelCarrierName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(" qX");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TshirtItem.TshirtItemSize tshirtItem_TshirtItemSize0 = TshirtItem.TshirtItemSize.EXTRA_LARGE;
      TshirtItem.TshirtItemPattern tshirtItem_TshirtItemPattern0 = TshirtItem.TshirtItemPattern.STRIPES;
      TshirtItem tshirtItem0 = new TshirtItem(uUID0, "+={%mv>", 0, usedItemCondition0, "+={%mv>", (String) null, bigDecimal0, "+={%mv>", tshirtItem_TshirtItemSize0, tshirtItem_TshirtItemPattern0);
      String string0 = tshirtItem0.getBrand();
      assertEquals(0, tshirtItem0.getCurrentStock());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(128, 128);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, ", alphanumericID='", 128, usedItemCondition0, (String) null, ", alphanumericID='", bigDecimal0, "vcdrPUcKDa^[XN", 128, "9Be7)m9Q", 8, 128);
      String string0 = premiumMalaItem0.getDescription();
      assertEquals("vcdrPUcKDa^[XN", premiumMalaItem0.getParcelCarrierName());
      assertEquals(128, premiumMalaItem0.getCurrentStock());
      assertEquals(", alphanumericID='", premiumMalaItem0.getBrand());
      assertNull(string0);
      assertEquals(", alphanumericID='", premiumMalaItem0.getAlphanumericId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 0, usedItemCondition0, "", "", bigDecimal0, "", 1985, "", 0, (-1731));
      premiumMalaItem0.getOwnerUuid();
      assertEquals(0, premiumMalaItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BigDecimal bigDecimal0 = new BigDecimal((long) 763);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "b", 763, (ItemCondition) null, "impl.SapatilhasItem", "Ret", bigDecimal0, "b", 0, true, "b", 0, 0);
      premiumSapatilhasItem0.getItemCondition();
      assertEquals("impl.SapatilhasItem", premiumSapatilhasItem0.getDescription());
      assertEquals("b", premiumSapatilhasItem0.getAlphanumericId());
      assertEquals("Ret", premiumSapatilhasItem0.getBrand());
      assertEquals("b", premiumSapatilhasItem0.getParcelCarrierName());
      assertEquals(763, premiumSapatilhasItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(735, 3);
      BigDecimal bigDecimal0 = new BigDecimal(3);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "F", 4, usedItemCondition0, "F", "F", bigDecimal0, "", (-1840), false, "F", 3, (-1840));
      String string0 = premiumSapatilhasItem0.getParcelCarrierName();
      assertEquals("", string0);
      assertEquals(4, premiumSapatilhasItem0.getCurrentStock());
      assertEquals("F", premiumSapatilhasItem0.getAlphanumericId());
      assertEquals("F", premiumSapatilhasItem0.getBrand());
      assertEquals("F", premiumSapatilhasItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("Stock cannot be negative");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(6, 6);
      BigDecimal bigDecimal0 = new BigDecimal((double) 6);
      SapatilhasItem sapatilhasItem0 = new SapatilhasItem(uUID0, "Stock cannot be negative", 6, usedItemCondition0, "eoIz&A`c)P8oaOI-", "JSX1(P28", bigDecimal0, "Stock cannot be negative", 2039, true, "JSX1(P28", 6);
      sapatilhasItem0.getBasePrice();
      assertEquals("Stock cannot be negative", sapatilhasItem0.getParcelCarrierName());
      assertEquals(6, sapatilhasItem0.getCurrentStock());
      assertEquals("JSX1(P28", sapatilhasItem0.getBrand());
      assertEquals("Stock cannot be negative", sapatilhasItem0.getAlphanumericId());
      assertEquals("eoIz&A`c)P8oaOI-", sapatilhasItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(135, (-590));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, (String) null, 135, usedItemCondition0, "t[z!v", (String) null, bigDecimal0, "USED", 0, "t[z!v", 135, 4798);
      int int0 = premiumMalaItem0.getCurrentStock();
      assertEquals("t[z!v", premiumMalaItem0.getDescription());
      assertEquals(135, int0);
      assertEquals("USED", premiumMalaItem0.getParcelCarrierName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(37, 37);
      BigDecimal bigDecimal0 = new BigDecimal((long) 37);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "com.marketplace.vintage.item.condition.ItemConditionType", 37, usedItemCondition0, "", "", bigDecimal0, "", 37, "", 37, 37);
      PremiumMalaItem premiumMalaItem1 = new PremiumMalaItem(uUID0, "com.marketplace.vintage.item.condition.ItemConditionType", 37, usedItemCondition0, "", "", bigDecimal0, "com.marketplace.vintage.item.condition.ItemConditionType", 37, "", 37, 37);
      boolean boolean0 = premiumMalaItem0.equals(premiumMalaItem1);
      assertEquals("com.marketplace.vintage.item.condition.ItemConditionType", premiumMalaItem0.getAlphanumericId());
      assertEquals(37, premiumMalaItem1.getCurrentStock());
      assertFalse(boolean0);
      assertEquals("", premiumMalaItem1.getDescription());
      assertEquals("", premiumMalaItem1.getBrand());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(18, 18);
      BigDecimal bigDecimal0 = new BigDecimal(18);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "CLFE\"Ywb<jsF'kK/ 2", 18, usedItemCondition0, "CLFE\"Ywb<jsF'kK/ 2", "CLFE\"Ywb<jsF'kK/ 2", bigDecimal0, "CLFE\"Ywb<jsF'kK/ 2", 18, "CLFE\"Ywb<jsF'kK/ 2", 18, 18);
      PremiumMalaItem premiumMalaItem1 = new PremiumMalaItem(uUID0, "CLFE\"Ywb<jsF'kK/ 2", 18, usedItemCondition0, "CLFE\"Ywb<jsF'kK/ 2", "CLFE\"Ywb<jsF'kK/ 2", (BigDecimal) null, "CLFE\"Ywb<jsF'kK/ 2", 18, "CLFE\"Ywb<jsF'kK/ 2", 18, 18);
      boolean boolean0 = premiumMalaItem0.equals(premiumMalaItem1);
      assertFalse(boolean0);
      assertEquals(18, premiumMalaItem1.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(7, 7);
      BigDecimal bigDecimal0 = new BigDecimal(7);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 7, usedItemCondition0, "", "", bigDecimal0, "", 7, ", size=", 7, 7);
      PremiumMalaItem premiumMalaItem1 = new PremiumMalaItem(uUID0, "", 7, usedItemCondition0, ", size=", "", bigDecimal0, "", 7, "", 7, 7);
      premiumMalaItem0.equals(premiumMalaItem1);
      assertEquals("", premiumMalaItem1.getBrand());
      assertEquals("", premiumMalaItem1.getParcelCarrierName());
      assertEquals(7, premiumMalaItem1.getCurrentStock());
      assertEquals(", size=", premiumMalaItem1.getDescription());
      assertEquals("", premiumMalaItem1.getAlphanumericId());
      assertEquals(7, premiumMalaItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(21, 21);
      BigDecimal bigDecimal0 = new BigDecimal(21);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "CLFE\"YPUwb|jsF'kK/ [", 21, (ItemCondition) null, "CLFE\"YPUwb|jsF'kK/ [", "CLFE\"YPUwb|jsF'kK/ [", bigDecimal0, "CLFE\"YPUwb|jsF'kK/ [", 21, "CLFE\"YPUwb|jsF'kK/ [", 21, 21);
      PremiumMalaItem premiumMalaItem1 = new PremiumMalaItem(uUID0, "CLFE\"YPUwb|jsF'kK/ [", 21, usedItemCondition0, "CLFE\"YPUwb|jsF'kK/ [", "CLFE\"YPUwb|jsF'kK/ [", bigDecimal0, "CLFE\"YPUwb|jsF'kK/ [", 21, "CLFE\"YPUwb|jsF'kK/ [", 21, 21);
      boolean boolean0 = premiumMalaItem0.equals(premiumMalaItem1);
      assertEquals(21, premiumMalaItem1.getCurrentStock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(22, 22);
      BigDecimal bigDecimal0 = new BigDecimal((long) 22);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 22, usedItemCondition0, "", "Stock cannot be negtiGe", bigDecimal0, "Stock cannot be negtiGe", 22, "Stock cannot be negtiGe", 22, 22);
      PremiumMalaItem premiumMalaItem1 = new PremiumMalaItem(uUID0, "Stock cannot be negtiGe", 22, usedItemCondition0, "", "", bigDecimal0, "", 22, "", 22, 22);
      premiumMalaItem0.equals(premiumMalaItem1);
      assertEquals("Stock cannot be negtiGe", premiumMalaItem1.getAlphanumericId());
      assertEquals(22, premiumMalaItem1.getCurrentStock());
      assertEquals("Stock cannot be negtiGe", premiumMalaItem0.getBrand());
      assertEquals("", premiumMalaItem1.getDescription());
      assertEquals("", premiumMalaItem0.getDescription());
      assertEquals("Stock cannot be negtiGe", premiumMalaItem0.getParcelCarrierName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(778, 778);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 778, usedItemCondition0, "", "", bigDecimal0, "", 778, "", 778, 778);
      PremiumMalaItem premiumMalaItem1 = new PremiumMalaItem((UUID) null, "", 778, usedItemCondition0, "", "", bigDecimal0, "", 778, "", 778, 778);
      boolean boolean0 = premiumMalaItem0.equals(premiumMalaItem1);
      assertEquals(778, premiumMalaItem1.getCurrentStock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-3374), 654);
      BigDecimal bigDecimal0 = new BigDecimal((long) 7);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 7, usedItemCondition0, "WN{BX>;6", "Yd%pGwsGyBu3bb/)2g/", bigDecimal0, "Yd%pGwsGyBu3bb/)2g/", 0, ", size=", 2, (-3374));
      PremiumMalaItem premiumMalaItem1 = new PremiumMalaItem(uUID0, "Yd%pGwsGyBu3bb/)2g/", 654, usedItemCondition0, "Stock cannot be negative", ", appreciationRateOverYears=", (BigDecimal) null, "WN{BX>;6", (-311), "WN{BX>;6", 2, 654);
      premiumMalaItem0.equals(premiumMalaItem1);
      assertEquals("Stock cannot be negative", premiumMalaItem1.getDescription());
      assertEquals(654, premiumMalaItem1.getCurrentStock());
      assertEquals(", appreciationRateOverYears=", premiumMalaItem1.getBrand());
      assertEquals("Yd%pGwsGyBu3bb/)2g/", premiumMalaItem1.getAlphanumericId());
      assertEquals("WN{BX>;6", premiumMalaItem1.getParcelCarrierName());
      assertEquals(7, premiumMalaItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "P(Suus", 0, usedItemCondition0, "P(Suus", "P(Suus", bigDecimal0, "P(Suus", 0, "P(Suus", 0, 0);
      PremiumMalaItem premiumMalaItem1 = new PremiumMalaItem(premiumMalaItem0);
      boolean boolean0 = premiumMalaItem1.equals(premiumMalaItem0);
      assertEquals(0, premiumMalaItem0.getCurrentStock());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(4765, 4765);
      BigDecimal bigDecimal0 = new BigDecimal(4765);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "", 4765, usedItemCondition0, " G+JP|gP", "", bigDecimal0, " G+JP|gP", 4765, true, " G+JP|gP", 4765, 4765);
      PremiumSapatilhasItem premiumSapatilhasItem1 = new PremiumSapatilhasItem(uUID0, "", 4765, usedItemCondition0, " G+JP|gP", " G+JP|gP", bigDecimal0, "", 4765, true, " G+JP|gP", 4765, 4765);
      boolean boolean0 = premiumSapatilhasItem0.equals(premiumSapatilhasItem1);
      assertFalse(boolean0);
      assertEquals("", premiumSapatilhasItem0.getBrand());
      assertEquals(" G+JP|gP", premiumSapatilhasItem0.getParcelCarrierName());
      assertEquals("", premiumSapatilhasItem1.getParcelCarrierName());
      assertEquals(" G+JP|gP", premiumSapatilhasItem1.getBrand());
      assertEquals(" G+JP|gP", premiumSapatilhasItem1.getDescription());
      assertEquals(4765, premiumSapatilhasItem1.getCurrentStock());
      assertEquals(" G+JP|gP", premiumSapatilhasItem0.getDescription());
      assertEquals("", premiumSapatilhasItem0.getAlphanumericId());
      assertEquals("", premiumSapatilhasItem1.getAlphanumericId());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(22, 22);
      BigDecimal bigDecimal0 = new BigDecimal((long) 22);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 22, usedItemCondition0, "", "Stock cannot be negtiGe", bigDecimal0, "Stock cannot be negtiGe", 22, "Stock cannot be negtiGe", 22, 22);
      ItemProperty itemProperty0 = ItemProperty.BASE_PRICE;
      Class<MalaItem> class0 = MalaItem.class;
      // Undeclared exception!
      try { 
        premiumMalaItem0.getProperty(itemProperty0, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(4765, 4765);
      BigDecimal bigDecimal0 = new BigDecimal(4765);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 4765, usedItemCondition0, "", "", bigDecimal0, "", 4765, "", 4765, 4765);
      ItemProperty itemProperty0 = ItemProperty.DESCRIPTION;
      Class<String> class0 = String.class;
      premiumMalaItem0.getProperty(itemProperty0, class0);
      assertEquals(4765, premiumMalaItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(2224, (-679));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "M", 2224, usedItemCondition0, "M", "M", bigDecimal0, "9DlU;}ziVFg_Lj=_zZ", 2224, false, "F#<8^Q0WFJ|{+>zoJ%", (-679), (-2140));
      ItemProperty itemProperty0 = ItemProperty.PARCEL_CARRIER_NAME;
      Class<String> class0 = String.class;
      String string0 = premiumSapatilhasItem0.getProperty(itemProperty0, class0);
      assertEquals(2224, premiumSapatilhasItem0.getCurrentStock());
      assertEquals("M", premiumSapatilhasItem0.getDescription());
      assertEquals("M", premiumSapatilhasItem0.getAlphanumericId());
      assertEquals("M", premiumSapatilhasItem0.getBrand());
      assertEquals("9DlU;}ziVFg_Lj=_zZ", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(18, 18);
      BigDecimal bigDecimal0 = new BigDecimal(18);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "CLFE\"Ywb<jsF'kK/ 2", 18, usedItemCondition0, "CLFE\"Ywb<jsF'kK/ 2", "CLFE\"Ywb<jsF'kK/ 2", bigDecimal0, "CLFE\"Ywb<jsF'kK/ 2", 18, "CLFE\"Ywb<jsF'kK/ 2", 18, 18);
      premiumMalaItem0.hashCode();
      assertEquals(18, premiumMalaItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition((-6217), (-6217));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "com.marketplace.vintage.item.Item$1", 2179, usedItemCondition0, "", "", bigDecimal0, "", 2179, true, ", size=", (-3071), 4062);
      premiumSapatilhasItem0.getFinalPrice(2179);
      // Undeclared exception!
      premiumSapatilhasItem0.getFinalPrice(4062);
  }
}
