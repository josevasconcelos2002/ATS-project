/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:47:01 GMT 2024
 */

package com.marketplace.vintage.item;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.item.Item;
import com.marketplace.vintage.item.ItemController;
import com.marketplace.vintage.item.ItemFactory;
import com.marketplace.vintage.item.ItemManager;
import com.marketplace.vintage.item.ItemProperty;
import com.marketplace.vintage.item.ItemType;
import com.marketplace.vintage.item.condition.UsedItemCondition;
import impl.MalaItem;
import impl.PremiumSapatilhasItem;
import impl.SapatilhasItem;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ItemController_ESTest extends ItemController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(393, 125);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      SapatilhasItem sapatilhasItem0 = new SapatilhasItem(uUID0, "", 1544, usedItemCondition0, ", pattern=", ", pattern=", bigDecimal0, "?Z(zo", 0, false, "<numberOfPreviousOwners>", (-1200));
      itemController0.registerItem(sapatilhasItem0);
      int int0 = itemController0.removeItemStock(sapatilhasItem0, 0);
      assertEquals(1544, int0);
      assertEquals(1544, sapatilhasItem0.getCurrentStock());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.fromString("T=\"W=v~&d!a&iE1B");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal((-4L));
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "DIMENSION_AREA", 0, usedItemCondition0, "T=\"W=v~&d!a&iE1B", "DIMENSION_AREA", bigDecimal0, "2Uc{{p&[+ mf", 0, true, "Sapatilhas", (-5157), 0);
      itemController0.registerItem(premiumSapatilhasItem0);
      Item item0 = itemController0.getItem("DIMENSION_AREA");
      assertTrue(item0.equals((Object)premiumSapatilhasItem0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(20, 20);
      BigDecimal bigDecimal0 = new BigDecimal(20);
      MalaItem malaItem0 = new MalaItem(uUID0, "(eS5", 20, usedItemCondition0, "(eS5", "(eS5", bigDecimal0, "EEE-EEE", 20, "(eS5", 20, 20);
      itemManager0.registerItem(malaItem0);
      Item item0 = itemController0.getItem("(eS5");
      assertEquals("(eS5", item0.getBrand());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(20, 20);
      BigDecimal bigDecimal0 = new BigDecimal(20);
      MalaItem malaItem0 = new MalaItem(uUID0, "(eS5", 20, usedItemCondition0, "(eS5", "(eS5", bigDecimal0, "EEE-EEE", 20, "(eS5", 20, 20);
      itemManager0.registerItem(malaItem0);
      List<Item> list0 = itemController0.getAllItems();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(393, 125);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      SapatilhasItem sapatilhasItem0 = new SapatilhasItem(uUID0, "", 1544, usedItemCondition0, ", pattern=", ", pattern=", bigDecimal0, "?Z(zo", 0, false, "<numberOfPreviousOwners>", (-1200));
      itemController0.registerItem(sapatilhasItem0);
      boolean boolean0 = itemController0.containsItemById("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.fromString("T=\"W=v~&d!a&iE1B");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "DIMENSION_AREA", 0, usedItemCondition0, "T=\"W=v~&d!a&iE1B", "DIMENSION_AREA", bigDecimal0, "2Uc{{p&[+ mf", 0, true, "Sapatilhas", 0, 0);
      itemController0.registerItem(premiumSapatilhasItem0);
      int int0 = itemController0.addItemStock(premiumSapatilhasItem0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(20, 20);
      BigDecimal bigDecimal0 = new BigDecimal(20);
      MalaItem malaItem0 = new MalaItem(uUID0, "(eS5", 20, usedItemCondition0, "(eS5", "(eS5", bigDecimal0, "EEE-EEE", 20, "(eS5", 20, 20);
      itemManager0.registerItem(malaItem0);
      int int0 = itemController0.addItemStock(malaItem0, 20);
      assertEquals(40, malaItem0.getCurrentStock());
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      // Undeclared exception!
      try { 
        itemController0.removeItemStock((Item) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(393, 125);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      SapatilhasItem sapatilhasItem0 = new SapatilhasItem(uUID0, "", 1544, usedItemCondition0, ", pattern=", ", pattern=", bigDecimal0, "?Z(zo", 0, false, "<numberOfPreviousOwners>", (-1200));
      itemController0.registerItem(sapatilhasItem0);
      // Undeclared exception!
      try { 
        itemController0.registerItem(sapatilhasItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An item with that id already exists
         //
         verifyException("com.marketplace.vintage.item.ItemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      // Undeclared exception!
      try { 
        itemController0.registerItem((Item) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.ItemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      // Undeclared exception!
      try { 
        itemController0.itemHasStock("D+,f~$D,8,uCwD';n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An item with the id D+,f~$D,8,uCwD';n was not found
         //
         verifyException("com.marketplace.vintage.item.ItemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController((ItemManager) null, itemFactory0);
      // Undeclared exception!
      try { 
        itemController0.itemHasStock("The item id must be of the format XXX-XXX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      // Undeclared exception!
      try { 
        itemController0.getItem("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An item with the id  was not found
         //
         verifyException("com.marketplace.vintage.item.ItemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController((ItemManager) null, itemFactory0);
      // Undeclared exception!
      try { 
        itemController0.getAllItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ItemController itemController0 = new ItemController((ItemManager) null, (ItemFactory) null);
      // Undeclared exception!
      try { 
        itemController0.generateUniqueCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      ItemType itemType0 = ItemType.TSHIRT;
      // Undeclared exception!
      try { 
        itemController0.createItem(uUID0, "AAA-AAA", itemType0, (Map<ItemProperty, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.ItemFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      ItemType itemType0 = ItemType.SAPATILHAS_PREMIUM;
      HashMap<ItemProperty, Object> hashMap0 = new HashMap<ItemProperty, Object>();
      ItemProperty itemProperty0 = ItemProperty.STOCK;
      hashMap0.put(itemProperty0, itemController0);
      // Undeclared exception!
      try { 
        itemController0.createItem(uUID0, "= gR_", itemType0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ItemController itemController0 = new ItemController((ItemManager) null, (ItemFactory) null);
      // Undeclared exception!
      try { 
        itemController0.containsItemById("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      // Undeclared exception!
      try { 
        itemController0.addItemStock((Item) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(20, 20);
      BigDecimal bigDecimal0 = new BigDecimal(20);
      MalaItem malaItem0 = new MalaItem(uUID0, "(eS5", 20, usedItemCondition0, "(eS5", "(eS5", bigDecimal0, "EEE-EEE", 20, "(eS5", 20, 20);
      itemManager0.registerItem(malaItem0);
      boolean boolean0 = itemController0.itemHasStock("(eS5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1534, 1534);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SapatilhasItem sapatilhasItem0 = new SapatilhasItem(uUID0, "DLNM:UUYW%", 1534, usedItemCondition0, "DLNM:UUYW%", "DLNM:UUYW%", bigDecimal0, "DLNM:UUYW%", 1534, false, "DLNM:UUYW%", 1534);
      itemController0.registerItem(sapatilhasItem0);
      itemController0.removeItemStock(sapatilhasItem0, 1534);
      assertEquals(0, sapatilhasItem0.getCurrentStock());
      
      boolean boolean0 = itemController0.itemHasStock("DLNM:UUYW%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController((ItemManager) null, itemFactory0);
      // Undeclared exception!
      try { 
        itemController0.removeItemStock((Item) null, (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stock change cannot be negative.
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1534, 1534);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SapatilhasItem sapatilhasItem0 = new SapatilhasItem(uUID0, "DLNM:UUYW%", 1534, usedItemCondition0, "DLNM:UUYW%", "DLNM:UUYW%", bigDecimal0, "DLNM:UUYW%", 1534, false, "DLNM:UUYW%", 1534);
      // Undeclared exception!
      try { 
        itemController0.removeItemStock(sapatilhasItem0, 1534);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An item with the id DLNM:UUYW% was not found
         //
         verifyException("com.marketplace.vintage.item.ItemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1534, 1534);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SapatilhasItem sapatilhasItem0 = new SapatilhasItem(uUID0, "DLNM:UUYW%", 1534, usedItemCondition0, "DLNM:UUYW%", "DLNM:UUYW%", bigDecimal0, "DLNM:UUYW%", 1534, false, "DLNM:UUYW%", 1534);
      // Undeclared exception!
      try { 
        itemController0.addItemStock(sapatilhasItem0, (-1023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stock change cannot be negative.
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(20, 20);
      BigDecimal bigDecimal0 = new BigDecimal(20);
      MalaItem malaItem0 = new MalaItem(uUID0, "(eS5", 20, usedItemCondition0, "(eS5", "(eS5", bigDecimal0, "EEE-EEE", 20, "(eS5", 20, 20);
      // Undeclared exception!
      try { 
        itemController0.addItemStock(malaItem0, 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An item with the id (eS5 was not found
         //
         verifyException("com.marketplace.vintage.item.ItemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      boolean boolean0 = itemController0.containsItemById("DLNM:UUYW%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UUID uUID0 = MockUUID.randomUUID();
      ItemType itemType0 = ItemType.MALA;
      HashMap<ItemProperty, Object> hashMap0 = new HashMap<ItemProperty, Object>();
      // Undeclared exception!
      try { 
        itemController0.createItem(uUID0, "(eS5", itemType0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The item property STOCK is required
         //
         verifyException("com.marketplace.vintage.item.ItemFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      List<Item> list0 = itemController0.getAllItems();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      String string0 = itemController0.generateUniqueCode();
      assertEquals("AAA-AAA", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ItemController itemController0 = new ItemController((ItemManager) null, (ItemFactory) null);
      // Undeclared exception!
      try { 
        itemController0.getItem("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }
}
