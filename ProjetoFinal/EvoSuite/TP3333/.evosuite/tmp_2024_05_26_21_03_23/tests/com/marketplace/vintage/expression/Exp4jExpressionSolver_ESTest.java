/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:53:46 GMT 2024
 */

package com.marketplace.vintage.expression;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.expression.Exp4jExpressionSolver;
import java.math.BigDecimal;
import java.util.EmptyStackException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Exp4jExpressionSolver_ESTest extends Exp4jExpressionSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      hashMap0.put("jXmZIWz3XYy", bigDecimal0);
      BigDecimal bigDecimal1 = exp4jExpressionSolver0.solve("jXmZIWz3XYy", hashMap0);
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      hashMap0.put("XmI6BWy", bigDecimal0);
      BigDecimal bigDecimal1 = exp4jExpressionSolver0.solve("XmI6BWy", hashMap0);
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = exp4jExpressionSolver0.isValid("\u03C6", linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = exp4jExpressionSolver0.isValid("signum", linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      // Undeclared exception!
      try { 
        exp4jExpressionSolver0.solve(")rFb9#C5_]p|y", hashMap0);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      // Undeclared exception!
      try { 
        exp4jExpressionSolver0.solve(".<=Xj5'", hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      // Undeclared exception!
      try { 
        exp4jExpressionSolver0.solve("' has not been set", (Map<String, BigDecimal>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.expression.Exp4jExpressionSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      // Undeclared exception!
      try { 
        exp4jExpressionSolver0.solve("", hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expression can not be empty
         //
         verifyException("net.objecthunter.exp4j.ExpressionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        exp4jExpressionSolver0.isValid("9)%M~n", linkedList0);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        exp4jExpressionSolver0.isValid(".\"vx>Lo11m", linkedList0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      // Undeclared exception!
      try { 
        exp4jExpressionSolver0.isValid("mS\u0005Qqq!", (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.expression.Exp4jExpressionSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        exp4jExpressionSolver0.isValid("", linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expression can not be empty
         //
         verifyException("net.objecthunter.exp4j.ExpressionBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      hashMap0.put("jXmZIWz3XYy", bigDecimal0);
      BigDecimal bigDecimal1 = exp4jExpressionSolver0.solve("jXmZIWz3XYy", hashMap0);
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      HashMap<String, BigDecimal> hashMap0 = new HashMap<String, BigDecimal>();
      // Undeclared exception!
      try { 
        exp4jExpressionSolver0.solve("jXmZIWz3XYy", hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown function or variable 'jXmZIWz3XYy' at pos 0 in expression 'jXmZIWz3XYy'
         //
         verifyException("net.objecthunter.exp4j.tokenizer.Tokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        exp4jExpressionSolver0.isValid("jXmZIWz3XYy", linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown function or variable 'jXmZIWz3XYy' at pos 0 in expression 'jXmZIWz3XYy'
         //
         verifyException("net.objecthunter.exp4j.tokenizer.Tokenizer", e);
      }
  }
}
