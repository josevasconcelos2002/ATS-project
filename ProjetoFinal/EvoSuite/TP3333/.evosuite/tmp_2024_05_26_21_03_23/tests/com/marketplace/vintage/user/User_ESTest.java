/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 21:05:18 GMT 2024
 */

package com.marketplace.vintage.user;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.user.User;
import java.util.List;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User user0 = new User((String) null, "", (String) null, "", (String) null);
      String string0 = user0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      User user0 = new User(uUID0, "", "", "YI%NF or/?_eb", "YI%NF or/?_eb", "");
      String string0 = user0.getUsername();
      assertEquals("YI%NF or/?_eb", user0.getAddress());
      assertEquals("", user0.getEmail());
      assertEquals("YI%NF or/?_eb", user0.getName());
      assertEquals("", string0);
      assertEquals("", user0.getTaxNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, (String) null, (String) null, (String) null, (String) null, (String) null);
      String string0 = user0.getTaxNumber();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = new User("", "", "", "", "");
      String string0 = user0.getTaxNumber();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("rmo4");
      User user0 = new User(uUID0, "rmo4", "6e4<5)]q3&k ", "&:", "mIE. V0", "com.marketplace.vintage.user.User");
      user0.addItemToShoppingCart("mIE. V0");
      user0.getShoppingCart();
      assertEquals("&:", user0.getName());
      assertEquals("com.marketplace.vintage.user.User", user0.getTaxNumber());
      assertEquals("rmo4", user0.getUsername());
      assertEquals("mIE. V0", user0.getAddress());
      assertEquals("6e4<5)]q3&k ", user0.getEmail());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, (String) null, (String) null, (String) null, (String) null, (String) null);
      String string0 = user0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User("", "", "", "", "");
      String string0 = user0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      User user0 = new User((UUID) null, "3F", "", "", "3F", "");
      user0.getId();
      assertEquals("", user0.getTaxNumber());
      assertEquals("3F", user0.getAddress());
      assertEquals("3F", user0.getUsername());
      assertEquals("", user0.getEmail());
      assertEquals("", user0.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(1518);
      UUID uUID0 = MockUUID.fromString("");
      User user0 = new User(uUID0, "", "", "", "ShlZv~6_qa~", "");
      user0.getId();
      assertEquals("ShlZv~6_qa~", user0.getAddress());
      assertEquals("", user0.getTaxNumber());
      assertEquals("", user0.getName());
      assertEquals("", user0.getEmail());
      assertEquals("", user0.getUsername());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = new User("", "", "I-", "", "3}bB ");
      String string0 = user0.getEmail();
      assertEquals("", string0);
      assertEquals("", user0.getAddress());
      assertEquals("", user0.getUsername());
      assertEquals("3}bB ", user0.getTaxNumber());
      assertEquals("I-", user0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      User user0 = new User(uUID0, "", "", "YI%NF or/?_eb", "YI%NF or/?_eb", "");
      user0.addCompletedSellOrderId("");
      user0.getCompletedSellsOrderIdsList();
      assertEquals("", user0.getTaxNumber());
      assertEquals("YI%NF or/?_eb", user0.getAddress());
      assertEquals("", user0.getEmail());
      assertEquals("YI%NF or/?_eb", user0.getName());
      assertEquals("", user0.getUsername());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      User user0 = new User(uUID0, "", "", "", "ShlZv~6_qa~", "");
      user0.addCompletedOrderId("*Lz#");
      user0.getCompletedOrderIdsList();
      assertEquals("", user0.getName());
      assertEquals("", user0.getTaxNumber());
      assertEquals("", user0.getEmail());
      assertEquals("ShlZv~6_qa~", user0.getAddress());
      assertEquals("", user0.getUsername());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("/X6.dc)");
      User user0 = new User(uUID0, "/X6.dc)", "/X6.dc)", "/X6.dc)", (String) null, (String) null);
      String string0 = user0.getAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, "8w", "8w", "8w", "", "fE/uT-");
      String string0 = user0.getAddress();
      assertEquals("8w", user0.getName());
      assertEquals("8w", user0.getEmail());
      assertEquals("", string0);
      assertEquals("fE/uT-", user0.getTaxNumber());
      assertEquals("8w", user0.getUsername());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User user0 = null;
      try {
        user0 = new User((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.user.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User(uUID0, "|)3Id [uy;^Fv^pUK+u", (String) null, "", "", "");
      String string0 = user0.getEmail();
      assertEquals("", user0.getName());
      assertEquals("", user0.getAddress());
      assertNull(string0);
      assertEquals("|)3Id [uy;^Fv^pUK+u", user0.getUsername());
      assertEquals("", user0.getTaxNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User user0 = new User((String) null, "", (String) null, "", (String) null);
      User user1 = new User(user0);
      assertFalse(user1.equals((Object)user0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      List<String> list0 = user0.getItemsBeingSold();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      user0.addItemBeingSold("tkcaiTuX#DQx1Vejs");
      List<String> list0 = user0.getItemsBeingSold();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      User user0 = new User("%ajbg}:[", "%ajbg}:[", "%ajbg}:[", "%ajbg}:[", "%ajbg}:[");
      String string0 = user0.getAddress();
      assertEquals("%ajbg}:[", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      user0.cleanShoppingCart();
      assertEquals("tkcaiTuX#DQx1Vejs", user0.getTaxNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      User user1 = user0.clone();
      assertFalse(user1.equals((Object)user0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      String string0 = user0.getTaxNumber();
      assertEquals("tkcaiTuX#DQx1Vejs", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      User user0 = new User("%ajbg}:[", "%ajbg}:[", "%ajbg}:[", "%ajbg}:[", "%ajbg}:[");
      UUID uUID0 = user0.getId();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      User user0 = new User("%ajbg}:[", "%ajbg}:[", "%ajbg}:[", "%ajbg}:[", "%ajbg}:[");
      List<String> list0 = user0.getCompletedOrderIdsList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      List<String> list0 = user0.getCompletedSellsOrderIdsList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      String string0 = user0.getName();
      assertEquals("tkcaiTuX#DQx1Vejs", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      String string0 = user0.getEmail();
      assertEquals("tkcaiTuX#DQx1Vejs", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      String string0 = user0.getUsername();
      assertEquals("tkcaiTuX#DQx1Vejs", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      List<String> list0 = user0.getShoppingCart();
      assertFalse(list0.contains("tkcaiTuX#DQx1Vejs"));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      User user0 = new User("tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs", "tkcaiTuX#DQx1Vejs");
      user0.removeItemFromShoppingCart("tkcaiTuX#DQx1Vejs");
      assertEquals("tkcaiTuX#DQx1Vejs", user0.getName());
  }
}
