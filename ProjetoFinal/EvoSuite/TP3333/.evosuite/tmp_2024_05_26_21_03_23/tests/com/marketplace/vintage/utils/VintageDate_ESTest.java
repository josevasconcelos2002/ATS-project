/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:35:21 GMT 2024
 */

package com.marketplace.vintage.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.utils.VintageDate;
import java.time.DateTimeException;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VintageDate_ESTest extends VintageDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      VintageDate vintageDate1 = vintageDate0.plusDays(3);
      boolean boolean0 = vintageDate0.isBetweenInclusive(vintageDate0, vintageDate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      VintageDate vintageDate1 = vintageDate0.plusDays(1);
      int int0 = vintageDate1.distance(vintageDate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      VintageDate vintageDate1 = vintageDate0.plusDays(3);
      boolean boolean0 = vintageDate0.isAfter(vintageDate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      VintageDate vintageDate1 = vintageDate0.plusDays(3);
      boolean boolean0 = vintageDate1.isAfterOrSame(vintageDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.fromString("06/03/-001");
      assertNotNull(vintageDate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        VintageDate.fromString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date must have the format: DD/MM/YYYY
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        VintageDate.fromString("Date must have the format: DD/MM/YYYY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date must have integers in: DD/MM/YYYY
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(2, 7, 0);
      int int0 = vintageDate0.getYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(2, 2, 4326);
      int int0 = vintageDate0.getYear();
      assertEquals(4326, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      VintageDate vintageDate1 = vintageDate0.plusDays(1);
      int int0 = vintageDate1.compareTo(vintageDate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(2, 2, 4326);
      VintageDate vintageDate1 = vintageDate0.plusDays(4540);
      int int0 = vintageDate0.compareTo(vintageDate1);
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        VintageDate.of((-3256), 2, 2);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -3256
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      // Undeclared exception!
      try { 
        vintageDate0.isBetweenInclusive((VintageDate) null, (VintageDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      // Undeclared exception!
      try { 
        vintageDate0.isBeforeOrSame((VintageDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      // Undeclared exception!
      try { 
        vintageDate0.isAfterOrSame((VintageDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      // Undeclared exception!
      try { 
        vintageDate0.isAfter((VintageDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        VintageDate.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      // Undeclared exception!
      try { 
        vintageDate0.distance((VintageDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      VintageDate vintageDate1 = vintageDate0.plusDays(1);
      boolean boolean0 = vintageDate0.isAfterOrSame(vintageDate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      boolean boolean0 = vintageDate0.isAfterOrSame(vintageDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      VintageDate vintageDate1 = vintageDate0.plusDays(3);
      boolean boolean0 = vintageDate1.isBeforeOrSame(vintageDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      boolean boolean0 = vintageDate0.isBeforeOrSame(vintageDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      int int0 = vintageDate0.getMonth();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      int int0 = vintageDate0.compareTo(vintageDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      int int0 = vintageDate0.getDayOfMonth();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      LocalDate localDate0 = vintageDate0.toJavaDate();
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      int int0 = vintageDate0.getYear();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, 3);
      VintageDate vintageDate1 = VintageDate.fromString("06/03/0003");
      boolean boolean0 = vintageDate1.isAfter(vintageDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, (-1));
      boolean boolean0 = vintageDate0.isAfter(vintageDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(3, 3, 3);
      VintageDate vintageDate1 = vintageDate0.plusDays(3);
      boolean boolean0 = vintageDate0.isBetweenInclusive(vintageDate1, vintageDate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        VintageDate.fromString("Date must have the f/rmat: DD/MM/YYYY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date must have the format: DD/MM/YYYY
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      int int0 = vintageDate0.distance(vintageDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      String string0 = vintageDate0.toString();
      assertEquals("01/01/0001", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      VintageDate vintageDate1 = vintageDate0.plusDays(1);
      boolean boolean0 = vintageDate1.isBetweenInclusive(vintageDate0, vintageDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VintageDate vintageDate0 = VintageDate.of(1, 1, (-647));
      // Undeclared exception!
      try { 
        vintageDate0.compareTo((VintageDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }
}
