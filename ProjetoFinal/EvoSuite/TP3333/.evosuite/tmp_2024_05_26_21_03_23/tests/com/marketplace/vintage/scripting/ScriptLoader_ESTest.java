/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:47:34 GMT 2024
 */

package com.marketplace.vintage.scripting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.scripting.Script;
import com.marketplace.vintage.scripting.ScriptLoader;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScriptLoader_ESTest extends ScriptLoader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ScriptLoader scriptLoader0 = new ScriptLoader();
      // Undeclared exception!
      try { 
        scriptLoader0.parseScript((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.scripting.ScriptLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ScriptLoader scriptLoader0 = new ScriptLoader();
      List<Script> list0 = scriptLoader0.loadScripts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("scripts.txt");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ScriptLoader scriptLoader0 = new ScriptLoader();
      // Undeclared exception!
      try { 
        scriptLoader0.loadScripts();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read scripts file: scripts.txt
         //
         verifyException("com.marketplace.vintage.scripting.ScriptLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ScriptLoader scriptLoader0 = new ScriptLoader();
      // Undeclared exception!
      try { 
        scriptLoader0.parseScript("%-02d/%d04d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Script must have two parts: date and command
         //
         verifyException("com.marketplace.vintage.scripting.ScriptLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ScriptLoader scriptLoader0 = new ScriptLoader();
      // Undeclared exception!
      try { 
        scriptLoader0.parseScript("ye3~HfK,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date must have the format: DD/MM/YYYY
         //
         verifyException("com.marketplace.vintage.utils.VintageDate", e);
      }
  }
}
