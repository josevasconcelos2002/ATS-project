/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:51:29 GMT 2024
 */

package com.marketplace.vintage.commands.item;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.Vintage;
import com.marketplace.vintage.carrier.NormalParcelCarrier;
import com.marketplace.vintage.carrier.ParcelCarrierController;
import com.marketplace.vintage.carrier.ParcelCarrierManager;
import com.marketplace.vintage.commands.item.ItemListCommand;
import com.marketplace.vintage.expression.Exp4jExpressionSolver;
import com.marketplace.vintage.input.impl.StdinInputPrompter;
import com.marketplace.vintage.item.ItemController;
import com.marketplace.vintage.item.ItemFactory;
import com.marketplace.vintage.item.ItemManager;
import com.marketplace.vintage.item.condition.UsedItemCondition;
import com.marketplace.vintage.logging.JavaLogger;
import com.marketplace.vintage.order.OrderController;
import com.marketplace.vintage.order.OrderFactory;
import com.marketplace.vintage.order.OrderManager;
import com.marketplace.vintage.scripting.ScriptController;
import com.marketplace.vintage.time.TimeManager;
import com.marketplace.vintage.user.User;
import com.marketplace.vintage.user.UserController;
import com.marketplace.vintage.user.UserManager;
import com.marketplace.vintage.utils.VintageDate;
import com.marketplace.vintage.view.impl.UserView;
import impl.PremiumMalaItem;
import java.math.BigDecimal;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ItemListCommand_ESTest extends ItemListCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      UUID uUID0 = MockUUID.randomUUID();
      User user0 = new User("@M;32u'o*.g.", "@M;32u'o*.g.", "@M;32u'o*.g.", "@M;32u'o*.g.", "@M;32u'o*.g.");
      user0.addItemBeingSold("@M;32u'o*.g.");
      JavaLogger javaLogger0 = new JavaLogger();
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      TimeManager timeManager0 = new TimeManager(vintageDate0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1, (-2020));
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("", ";dD");
      BigDecimal bigDecimal0 = normalParcelCarrier0.getExpeditionTax();
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "@M;32u'o*.g.", 1, usedItemCondition0, ";dD", "", bigDecimal0, "o5W%Jkc(?U", 10000, ";dD", (-1), (-1));
      itemController0.registerItem(premiumMalaItem0);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      UserView userView0 = new UserView(javaLogger0, stdinInputPrompter0, vintage0, user0);
      ItemListCommand itemListCommand0 = new ItemListCommand(userView0, vintage0);
      // Undeclared exception!
      try { 
        itemListCommand0.executeSafely(javaLogger0, stdinInputPrompter0, (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A carrier with the name o5W%Jkc(?U was not found
         //
         verifyException("com.marketplace.vintage.carrier.ParcelCarrierManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      User user0 = new User("", "", "", "", "");
      user0.addItemBeingSold("");
      JavaLogger javaLogger0 = new JavaLogger();
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      VintageDate vintageDate0 = VintageDate.of(1, 1, 1);
      TimeManager timeManager0 = new TimeManager(vintageDate0);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      ScriptController scriptController0 = new ScriptController();
      UserController userController0 = new UserController(userManager0);
      Vintage vintage0 = new Vintage((ItemController) null, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      UserView userView0 = new UserView(javaLogger0, stdinInputPrompter0, vintage0, user0);
      ItemListCommand itemListCommand0 = new ItemListCommand(userView0, vintage0);
      // Undeclared exception!
      try { 
        itemListCommand0.executeSafely(javaLogger0, stdinInputPrompter0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      User user0 = new User("8x", "8x", "8x", "8x", "8x");
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      UserView userView0 = new UserView(javaLogger0, stdinInputPrompter0, (Vintage) null, user0);
      ItemListCommand itemListCommand0 = new ItemListCommand(userView0, (Vintage) null);
      itemListCommand0.executeSafely(javaLogger0, stdinInputPrompter0, (String[]) null);
      assertEquals(0, itemListCommand0.getMinArgs());
  }
}
