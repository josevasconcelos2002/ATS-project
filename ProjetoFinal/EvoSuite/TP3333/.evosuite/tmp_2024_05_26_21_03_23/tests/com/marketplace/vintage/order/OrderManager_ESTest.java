/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:24:57 GMT 2024
 */

package com.marketplace.vintage.order;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.order.Order;
import com.marketplace.vintage.order.OrderManager;
import com.marketplace.vintage.order.OrderStatus;
import com.marketplace.vintage.order.OrderedItem;
import com.marketplace.vintage.order.invoice.InvoiceLine;
import com.marketplace.vintage.utils.VintageDate;
import java.math.BigDecimal;
import java.time.DateTimeException;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OrderManager_ESTest extends OrderManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      UUID uUID0 = MockUUID.fromString("Date must have integers in: DD/MM/YYYY");
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      Order order0 = new Order("Date must have integers in: DD/MM/YYYY", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null);
      assertNotNull(order0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals("Date must have integers in: DD/MM/YYYY", order0.getOrderId());
      
      orderManager0.registerOrder(order0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals("Date must have integers in: DD/MM/YYYY", order0.getOrderId());
      
      String string0 = orderManager0.generateUniqueOrderId();
      assertNotNull(string0);
      assertEquals("ORD-EEEEEE", string0);
      
      OrderStatus orderStatus0 = OrderStatus.RETURNED;
      Order order1 = new Order("ORD-EEEEEE", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null, orderStatus0);
      assertNotNull(order1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("ORD-EEEEEE", order1.getOrderId());
      assertEquals(OrderStatus.RETURNED, order1.getOrderStatus());
      assertTrue(order1.hasBeenReturned());
      assertFalse(order1.equals((Object)order0));
      
      orderManager0.registerOrder(order1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("ORD-EEEEEE", order1.getOrderId());
      assertEquals(OrderStatus.RETURNED, order1.getOrderStatus());
      assertTrue(order1.hasBeenReturned());
      assertNotSame(order1, order0);
      assertFalse(order1.equals((Object)order0));
      
      Order order2 = orderManager0.getOrder("ORD-EEEEEE");
      assertNotNull(order2);
      assertEquals("ORD-EEEEEE", order2.getOrderId());
      assertTrue(order2.hasBeenReturned());
      assertEquals(OrderStatus.RETURNED, order2.getOrderStatus());
      assertNotSame(order2, order1);
      assertNotSame(order2, order0);
      assertFalse(order2.equals((Object)order1));
      assertFalse(order2.equals((Object)order0));
      
      // Undeclared exception!
      orderManager0.generateUniqueOrderId();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      LinkedList<InvoiceLine> linkedList0 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = orderManager0.generateUniqueOrderId();
      assertNotNull(string0);
      assertEquals("ORD-EEEEEE", string0);
      
      OrderStatus orderStatus0 = OrderStatus.ORDERED;
      Order order0 = new Order("ORD-XXXXX", uUID0, (List<OrderedItem>) null, linkedList0, (BigDecimal) null, (VintageDate) null, orderStatus0);
      assertNotNull(order0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals("ORD-XXXXX", order0.getOrderId());
      
      orderManager0.registerOrder(order0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals("ORD-XXXXX", order0.getOrderId());
      
      // Undeclared exception!
      try { 
        orderManager0.getOrder("ORD-XXXXX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(" was not found");
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      BigDecimal bigDecimal0 = new BigDecimal((-1762.70548765));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      
      Order order0 = new Order(" was not found", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null);
      assertNotNull(order0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(" was not found", order0.getOrderId());
      
      Order order1 = new Order(order0);
      assertNotNull(order1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertFalse(order1.hasBeenReturned());
      assertEquals(" was not found", order1.getOrderId());
      assertFalse(order1.equals((Object)order0));
      
      LinkedList linkedList2 = (LinkedList)linkedList0.clone();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList2.size());
      
      LinkedList<InvoiceLine> linkedList3 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      assertTrue(linkedList3.equals((Object)linkedList1));
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      double double0 = bigDecimal1.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      String string0 = bigDecimal1.toEngineeringString();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      orderManager0.registerOrder(order0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(" was not found", order0.getOrderId());
      assertNotSame(linkedList1, linkedList3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(order0, order1);
      assertTrue(linkedList1.equals((Object)linkedList3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(order0.equals((Object)order1));
      
      Predicate<Order> predicate0 = Predicate.isEqual((Object) order0);
      assertNotNull(predicate0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(" was not found", order0.getOrderId());
      assertNotSame(linkedList1, linkedList3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(order0, order1);
      assertTrue(linkedList1.equals((Object)linkedList3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(order0.equals((Object)order1));
      
      List<Order> list0 = orderManager0.getAll(predicate0);
      assertNotNull(list0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(" was not found", order0.getOrderId());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(linkedList1, linkedList3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(order0, order1);
      assertFalse(list0.contains(order0));
      assertTrue(linkedList1.equals((Object)linkedList3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(order0.equals((Object)order1));
      
      OrderStatus orderStatus0 = OrderStatus.ORDERED;
      List<Order> list1 = orderManager0.getAllWithStatus(orderStatus0);
      assertNotNull(list1);
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      assertFalse(list1.contains(order0));
      assertFalse(list1.equals((Object)list0));
      
      boolean boolean0 = orderManager0.containsOrder(" was not found");
      assertTrue(boolean0);
      
      boolean boolean1 = orderManager0.containsOrder("RETURNED");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      String string0 = " was not found";
      UUID uUID0 = MockUUID.fromString(" was not found");
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      BigDecimal bigDecimal0 = new BigDecimal((-1762.70548765));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      
      Order order0 = new Order(" was not found", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null);
      assertNotNull(order0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(" was not found", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      
      InvoiceLine invoiceLine0 = mock(InvoiceLine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedList1.add(invoiceLine0);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(invoiceLine0));
      
      Order order1 = new Order(order0);
      assertNotNull(order1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(" was not found", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order1.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertEquals(" was not found", order1.getOrderId());
      assertTrue(linkedList1.contains(invoiceLine0));
      assertFalse(order1.equals((Object)order0));
      
      OrderStatus orderStatus0 = OrderStatus.RETURNED;
      order1.setOrderStatus(orderStatus0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(" was not found", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(" was not found", order1.getOrderId());
      assertTrue(order1.hasBeenReturned());
      assertEquals(OrderStatus.RETURNED, order1.getOrderStatus());
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertTrue(linkedList1.contains(invoiceLine0));
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      
      orderManager0.registerOrder(order1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(" was not found", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(" was not found", order1.getOrderId());
      assertTrue(order1.hasBeenReturned());
      assertEquals(OrderStatus.RETURNED, order1.getOrderStatus());
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertTrue(linkedList1.contains(invoiceLine0));
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      
      LinkedList linkedList2 = (LinkedList)linkedList0.clone();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList2.size());
      
      LinkedList<InvoiceLine> linkedList3 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      assertFalse(linkedList3.contains(invoiceLine0));
      assertFalse(linkedList3.equals((Object)linkedList1));
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      String string1 = bigDecimal1.toEngineeringString();
      assertNotNull(string1);
      assertEquals("1", string1);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      Order order2 = orderManager0.getOrder(" was not found");
      assertNotNull(order2);
      assertEquals(" was not found", order2.getOrderId());
      assertEquals(OrderStatus.RETURNED, order2.getOrderStatus());
      assertTrue(order2.hasBeenReturned());
      assertNotSame(order2, order0);
      assertNotSame(order2, order1);
      assertFalse(order2.equals((Object)order0));
      assertFalse(order2.equals((Object)order1));
      
      // Undeclared exception!
      try { 
        VintageDate.of((-763), (-763), 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -763
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      String string0 = " was not found";
      UUID uUID0 = MockUUID.fromString(" was not found");
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      BigDecimal bigDecimal0 = new BigDecimal((-1762.70548765));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      
      Order order0 = new Order(" was not found", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null);
      assertNotNull(order0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      
      Order order1 = new Order(order0);
      assertNotNull(order1);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order1.hasBeenReturned());
      assertEquals(" was not found", order1.getOrderId());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertFalse(order1.equals((Object)order0));
      
      List<OrderedItem> list0 = order1.getOrderedItemsByParcelCarrier("com.marketplace.vintage.order.invoice.InvoiceLine");
      assertNotNull(list0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order1.hasBeenReturned());
      assertEquals(" was not found", order1.getOrderId());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      
      orderManager0.registerOrder(order1);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order1.hasBeenReturned());
      assertEquals(" was not found", order1.getOrderId());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      
      LinkedList linkedList2 = (LinkedList)linkedList0.clone();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList2.size());
      
      LinkedList<InvoiceLine> linkedList3 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      assertTrue(linkedList3.equals((Object)linkedList1));
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      String string1 = bigDecimal1.toEngineeringString();
      assertNotNull(string1);
      assertEquals("1", string1);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(string1.equals((Object)string0));
      
      List<Order> list1 = orderManager0.getAll();
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.contains(order0));
      
      Order order2 = orderManager0.getOrder(" was not found");
      assertNotNull(order2);
      assertEquals(" was not found", order2.getOrderId());
      assertEquals(OrderStatus.ORDERED, order2.getOrderStatus());
      assertFalse(order2.hasBeenReturned());
      assertNotSame(order2, order0);
      assertNotSame(order2, order1);
      assertFalse(order2.equals((Object)order0));
      assertFalse(order2.equals((Object)order1));
      
      // Undeclared exception!
      try { 
        VintageDate.of((-763), (-763), 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -763
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      String string0 = "com.marketplace.vintage.order.OrderManager";
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      
      LinkedList<InvoiceLine> linkedList0 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = orderManager0.generateUniqueOrderId();
      assertNotNull(string1);
      assertEquals("ORD-EEEEEE", string1);
      assertFalse(string1.equals((Object)string0));
      
      OrderStatus orderStatus0 = OrderStatus.ORDERED;
      InvoiceLine invoiceLine0 = mock(InvoiceLine.class, new ViolatedAssumptionAnswer());
      int int0 = (-1);
      Order order0 = new Order("Ol(XXXXXX", uUID0, (List<OrderedItem>) null, linkedList0, (BigDecimal) null, (VintageDate) null, orderStatus0);
      assertNotNull(order0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals("Ol(XXXXXX", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertFalse(linkedList0.contains(invoiceLine0));
      
      List<Order> list0 = orderManager0.getAll();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(order0));
      
      orderManager0.registerOrder(order0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals("Ol(XXXXXX", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertFalse(linkedList0.contains(invoiceLine0));
      
      // Undeclared exception!
      try { 
        orderManager0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      OrderStatus orderStatus0 = OrderStatus.DELIVERED;
      List<Order> list0 = orderManager0.getAllWithStatus(orderStatus0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Predicate<Order> predicate0 = Predicate.isEqual((Object) orderStatus0);
      assertNotNull(predicate0);
      
      List<Order> list1 = orderManager0.getAll(predicate0);
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      String string0 = orderManager0.generateUniqueOrderId();
      assertNotNull(string0);
      assertEquals("ORD-AAAAAA", string0);
      
      UUID uUID0 = MockUUID.fromString((String) null);
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      LinkedList<InvoiceLine> linkedList0 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      Order order0 = new Order("Date must have integers in: DD/MM/YYYY", uUID0, (List<OrderedItem>) null, linkedList0, bigDecimal0, (VintageDate) null);
      assertNotNull(order0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals("Date must have integers in: DD/MM/YYYY", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      
      List<InvoiceLine> list2 = order0.getInvoiceLines();
      assertNotNull(list2);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals("Date must have integers in: DD/MM/YYYY", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      OrderStatus orderStatus1 = OrderStatus.DELIVERED;
      Order order1 = new Order("Date must have integers in: DD/MM/YYYY", uUID0, (List<OrderedItem>) null, list2, bigDecimal0, (VintageDate) null, orderStatus1);
      assertNotNull(order1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals("Date must have integers in: DD/MM/YYYY", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(OrderStatus.DELIVERED, order1.getOrderStatus());
      assertEquals("Date must have integers in: DD/MM/YYYY", order1.getOrderId());
      assertFalse(order1.hasBeenReturned());
      assertFalse(order1.equals((Object)order0));
      
      orderManager0.registerOrder(order1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(order0.hasBeenReturned());
      assertEquals("Date must have integers in: DD/MM/YYYY", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(OrderStatus.DELIVERED, order1.getOrderStatus());
      assertEquals("Date must have integers in: DD/MM/YYYY", order1.getOrderId());
      assertFalse(order1.hasBeenReturned());
      assertNotSame(order0, order1);
      assertSame(orderStatus1, orderStatus0);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      
      Order order2 = new Order("ORD-AAAAAA", uUID0, (List<OrderedItem>) null, linkedList0, bigDecimal0, (VintageDate) null, orderStatus0);
      assertNotNull(order2);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(order2.hasBeenReturned());
      assertEquals("ORD-AAAAAA", order2.getOrderId());
      assertEquals(OrderStatus.DELIVERED, order2.getOrderStatus());
      assertFalse(order2.equals((Object)order0));
      assertFalse(order2.equals((Object)order1));
      
      // Undeclared exception!
      try { 
        orderManager0.getAllWithStatus(orderStatus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      String string0 = "com.marketplace.vintage.order.OrderManager";
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      
      LinkedList<InvoiceLine> linkedList0 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = orderManager0.generateUniqueOrderId();
      assertNotNull(string1);
      assertEquals("ORD-EEEEEE", string1);
      assertFalse(string1.equals((Object)string0));
      
      OrderStatus orderStatus0 = OrderStatus.ORDERED;
      InvoiceLine invoiceLine0 = mock(InvoiceLine.class, new ViolatedAssumptionAnswer());
      int int0 = (-1);
      Order order0 = new Order("com.marketplace.vintage.order.OrderManager", uUID0, (List<OrderedItem>) null, linkedList0, (BigDecimal) null, (VintageDate) null, orderStatus0);
      assertNotNull(order0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals("com.marketplace.vintage.order.OrderManager", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(linkedList0.contains(invoiceLine0));
      
      List<Order> list0 = orderManager0.getAll();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(order0));
      
      orderManager0.registerOrder(order0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals("com.marketplace.vintage.order.OrderManager", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(linkedList0.contains(invoiceLine0));
      
      List<InvoiceLine> list1 = order0.getInvoiceLines();
      assertNotNull(list1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals("com.marketplace.vintage.order.OrderManager", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(linkedList0.contains(invoiceLine0));
      assertFalse(list1.contains(invoiceLine0));
      
      // Undeclared exception!
      try { 
        orderManager0.registerOrder(order0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with that id already exists
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      OrderStatus orderStatus0 = OrderStatus.DELIVERED;
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      OrderStatus orderStatus1 = OrderStatus.DELIVERED;
      Order order0 = new Order("A;t2)XYr8cW!eW", uUID0, linkedList0, linkedList1, (BigDecimal) null, (VintageDate) null, orderStatus1);
      assertNotNull(order0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(OrderStatus.DELIVERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals("A;t2)XYr8cW!eW", order0.getOrderId());
      
      BigDecimal bigDecimal0 = order0.getSumOfSatisfactionPrices();
      assertNotNull(bigDecimal0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(OrderStatus.DELIVERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals("A;t2)XYr8cW!eW", order0.getOrderId());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertSame(orderStatus1, orderStatus0);
      
      orderManager0.registerOrder(order0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(OrderStatus.DELIVERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals("A;t2)XYr8cW!eW", order0.getOrderId());
      assertSame(orderStatus1, orderStatus0);
      
      orderManager0.updateOrder(order0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(OrderStatus.DELIVERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals("A;t2)XYr8cW!eW", order0.getOrderId());
      assertSame(orderStatus1, orderStatus0);
      
      List<Order> list0 = orderManager0.getAllWithStatus(orderStatus0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(orderStatus0, orderStatus1);
      assertFalse(list0.contains(order0));
      
      boolean boolean0 = orderManager0.containsOrder("Date must have integers in: DD/MM/YYYY");
      assertFalse(boolean0);
      
      Order order1 = null;
      // Undeclared exception!
      try { 
        orderManager0.registerOrder((Order) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      String string0 = " was not found";
      UUID uUID0 = MockUUID.fromString(" was not found");
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      BigDecimal bigDecimal0 = new BigDecimal((-1762.70548765));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      
      Order order0 = new Order(" was not found", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null);
      assertNotNull(order0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(" was not found", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      
      Order order1 = new Order(order0);
      assertNotNull(order1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(" was not found", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertFalse(order1.hasBeenReturned());
      assertEquals(" was not found", order1.getOrderId());
      assertFalse(order1.equals((Object)order0));
      
      orderManager0.registerOrder(order1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertEquals(" was not found", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertFalse(order1.hasBeenReturned());
      assertEquals(" was not found", order1.getOrderId());
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      
      LinkedList linkedList2 = (LinkedList)linkedList0.clone();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList2.size());
      
      LinkedList<InvoiceLine> linkedList3 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      assertTrue(linkedList3.equals((Object)linkedList1));
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      String string1 = bigDecimal1.toEngineeringString();
      assertNotNull(string1);
      assertEquals("1", string1);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(string1.equals((Object)string0));
      
      Order order2 = orderManager0.getOrder(" was not found");
      assertNotNull(order2);
      assertEquals(" was not found", order2.getOrderId());
      assertEquals(OrderStatus.ORDERED, order2.getOrderStatus());
      assertFalse(order2.hasBeenReturned());
      assertNotSame(order2, order1);
      assertNotSame(order2, order0);
      assertFalse(order2.equals((Object)order1));
      assertFalse(order2.equals((Object)order0));
      
      // Undeclared exception!
      try { 
        VintageDate.of((-763), (-763), 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -763
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      UUID uUID0 = MockUUID.fromString(" was not found");
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      BigDecimal bigDecimal0 = new BigDecimal((-1762.70548765));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      
      Order order0 = new Order(" was not found", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null);
      assertNotNull(order0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      
      Order order1 = new Order(order0);
      assertNotNull(order1);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals(" was not found", order1.getOrderId());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertFalse(order1.hasBeenReturned());
      assertFalse(order1.equals((Object)order0));
      
      orderManager0.registerOrder(order1);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals(" was not found", order1.getOrderId());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertFalse(order1.hasBeenReturned());
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      
      LinkedList linkedList2 = (LinkedList)linkedList0.clone();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList2.size());
      
      LinkedList<InvoiceLine> linkedList3 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      assertTrue(linkedList3.equals((Object)linkedList1));
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      double double0 = bigDecimal1.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      String string0 = bigDecimal1.toEngineeringString();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      String string1 = orderManager0.generateUniqueOrderId();
      assertNotNull(string1);
      assertEquals("ORD-EEEEEE", string1);
      assertFalse(string1.equals((Object)string0));
      
      orderManager0.updateOrder(order0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertNotSame(linkedList1, linkedList3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(order0, order1);
      assertTrue(linkedList1.equals((Object)linkedList3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(order0.equals((Object)order1));
      
      String string2 = orderManager0.generateUniqueOrderId();
      assertNotNull(string2);
      assertEquals("ORD-EEEEEE", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = orderManager0.generateUniqueOrderId();
      assertNotNull(string3);
      assertEquals("ORD-EEEEEE", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        orderManager0.getOrder("ORD-EEEEEE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with the id ORD-EEEEEE was not found
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      String string0 = null;
      String string1 = "com.marketplace.vintage.order.OrderManager";
      UUID uUID0 = MockUUID.fromString("com.marketplace.vintage.order.OrderManager");
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      
      List<OrderedItem> list0 = null;
      LinkedList<InvoiceLine> linkedList0 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      BigDecimal bigDecimal0 = null;
      String string2 = orderManager0.generateUniqueOrderId();
      assertNotNull(string2);
      assertEquals("ORD-EEEEEE", string2);
      assertFalse(string2.equals((Object)string1));
      
      VintageDate vintageDate0 = null;
      OrderStatus orderStatus0 = OrderStatus.ORDERED;
      InvoiceLine invoiceLine0 = mock(InvoiceLine.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedList0.add(invoiceLine0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(invoiceLine0));
      
      int int0 = (-1);
      Order order0 = new Order("ORD-XXXXXX", uUID0, (List<OrderedItem>) null, linkedList0, (BigDecimal) null, (VintageDate) null, orderStatus0);
      assertNotNull(order0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(1, linkedList0.size());
      assertEquals("ORD-XXXXXX", order0.getOrderId());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertTrue(linkedList0.contains(invoiceLine0));
      
      List<Order> list1 = orderManager0.getAll();
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list1.contains(order0));
      
      // Undeclared exception!
      try { 
        orderManager0.registerOrder(order0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The order id must be of the format ORD-XXXXXX
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      String string0 = " was not found";
      UUID uUID0 = MockUUID.fromString(" was not found");
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      BigDecimal bigDecimal0 = new BigDecimal((-1762.70548765));
      assertNotNull(bigDecimal0);
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      
      Order order0 = new Order(" was not found", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null);
      assertNotNull(order0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      
      Order order1 = new Order(order0);
      assertNotNull(order1);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertEquals(" was not found", order1.getOrderId());
      assertFalse(order1.hasBeenReturned());
      assertFalse(order1.equals((Object)order0));
      
      orderManager0.registerOrder(order1);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals((short) (-1762), bigDecimal0.shortValue());
      assertEquals(" was not found", order0.getOrderId());
      assertEquals(OrderStatus.ORDERED, order0.getOrderStatus());
      assertFalse(order0.hasBeenReturned());
      assertEquals(OrderStatus.ORDERED, order1.getOrderStatus());
      assertEquals(" was not found", order1.getOrderId());
      assertFalse(order1.hasBeenReturned());
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      
      LinkedList<InvoiceLine> linkedList2 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList1));
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      String string1 = bigDecimal1.toEngineeringString();
      assertNotNull(string1);
      assertEquals("1", string1);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        VintageDate.of((-763), (-763), 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -763
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      OrderStatus orderStatus0 = OrderStatus.ORDERED;
      String string0 = "com.marketplace.vintage.utils.AlphanumericGenerator";
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        orderManager0.registerOrder((Order) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      OrderStatus orderStatus0 = OrderStatus.DELIVERED;
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      OrderStatus orderStatus1 = OrderStatus.DELIVERED;
      Order order0 = new Order("A;t2)XYr8cW!eW", uUID0, linkedList0, linkedList1, (BigDecimal) null, (VintageDate) null, orderStatus1);
      assertNotNull(order0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(order0.hasBeenReturned());
      assertEquals("A;t2)XYr8cW!eW", order0.getOrderId());
      assertEquals(OrderStatus.DELIVERED, order0.getOrderStatus());
      
      // Undeclared exception!
      try { 
        orderManager0.updateOrder(order0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with the id A;t2)XYr8cW!eW was not found
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      // Undeclared exception!
      try { 
        orderManager0.registerOrder((Order) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      List<Order> list0 = orderManager0.getAll();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Predicate<Order> predicate0 = null;
      // Undeclared exception!
      try { 
        orderManager0.getAll((Predicate<Order>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      Predicate<Order> predicate0 = Predicate.isEqual((Object) "17\"b;Wk,");
      assertNotNull(predicate0);
      
      List<Order> list0 = orderManager0.getAll(predicate0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Order> list1 = orderManager0.getAll();
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      boolean boolean0 = orderManager0.containsOrder((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      OrderStatus orderStatus0 = OrderStatus.RETURNED;
      List<Order> list0 = orderManager0.getAllWithStatus(orderStatus0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = orderManager0.generateUniqueOrderId();
      assertNotNull(string0);
      assertEquals("ORD-AAAAAA", string0);
      
      // Undeclared exception!
      try { 
        orderManager0.updateOrder((Order) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      String string0 = orderManager0.generateUniqueOrderId();
      assertNotNull(string0);
      assertEquals("ORD-AAAAAA", string0);
      
      OrderStatus orderStatus0 = OrderStatus.DELIVERED;
      List<Order> list0 = orderManager0.getAllWithStatus(orderStatus0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Predicate<Order> predicate0 = Predicate.isEqual((Object) orderStatus0);
      assertNotNull(predicate0);
      
      List<Order> list1 = orderManager0.getAll(predicate0);
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        orderManager0.getOrder((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with the id null was not found
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      assertNotNull(orderManager0);
      
      // Undeclared exception!
      try { 
        orderManager0.getOrder("C6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with the id C6 was not found
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      UUID uUID0 = MockUUID.fromString("Date must have integers in: DD/MM/YYYY");
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Order order0 = new Order("Date must have integers in: DD/MM/YYYY", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null);
      orderManager0.generateUniqueOrderId();
      OrderStatus orderStatus0 = OrderStatus.RETURNED;
      Order order1 = new Order("ORD-EEEEEE", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null, orderStatus0);
      orderManager0.registerOrder(order1);
      orderManager0.getOrder("ORD-EEEEEE");
      // Undeclared exception!
      orderManager0.generateUniqueOrderId();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      UUID uUID0 = MockUUID.fromString("Date must have integers in: DD/MM/YYYY");
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Order order0 = new Order("Date must have integers in: DD/MM/YYYY", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null);
      orderManager0.registerOrder(order0);
      orderManager0.generateUniqueOrderId();
      orderManager0.updateOrder(order0);
      // Undeclared exception!
      try { 
        orderManager0.getOrder("ORD-EEEEEE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with the id ORD-EEEEEE was not found
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("Br2Y");
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Order order0 = new Order("Br2Y", uUID0, linkedList0, linkedList1, bigDecimal0, (VintageDate) null);
      OrderManager orderManager0 = new OrderManager();
      orderManager0.registerOrder(order0);
      orderManager0.containsOrder("Br2Y");
      // Undeclared exception!
      try { 
        orderManager0.registerOrder(order0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with that id already exists
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      UUID uUID0 = MockUUID.fromString("TKwA'!I9NB3q");
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      OrderStatus orderStatus0 = OrderStatus.ORDERED;
      Order order0 = new Order("TKwA'!I9NB3q", uUID0, linkedList0, linkedList1, (BigDecimal) null, (VintageDate) null, orderStatus0);
      orderManager0.getAllWithStatus(orderStatus0);
      // Undeclared exception!
      try { 
        orderManager0.updateOrder(order0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with the id TKwA'!I9NB3q was not found
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OrderManager orderManager0 = new OrderManager();
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<InvoiceLine> linkedList0 = new LinkedList<InvoiceLine>();
      orderManager0.generateUniqueOrderId();
      Order order0 = new Order("ORD-XXXXXX", uUID0, (List<OrderedItem>) null, linkedList0, (BigDecimal) null, (VintageDate) null);
      // Undeclared exception!
      try { 
        orderManager0.registerOrder(order0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The order id must be of the format ORD-XXXXXX
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }
}
