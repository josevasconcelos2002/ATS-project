/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 21:13:38 GMT 2024
 */

package com.marketplace.vintage.commands.item.stock;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.Vintage;
import com.marketplace.vintage.carrier.ParcelCarrierController;
import com.marketplace.vintage.carrier.ParcelCarrierManager;
import com.marketplace.vintage.commands.item.stock.ItemStockAddCommand;
import com.marketplace.vintage.expression.Exp4jExpressionSolver;
import com.marketplace.vintage.input.impl.BufferedInputPrompter;
import com.marketplace.vintage.input.impl.StdinInputPrompter;
import com.marketplace.vintage.item.Item;
import com.marketplace.vintage.item.ItemController;
import com.marketplace.vintage.item.ItemFactory;
import com.marketplace.vintage.item.ItemManager;
import com.marketplace.vintage.item.condition.UsedItemCondition;
import com.marketplace.vintage.logging.JavaLogger;
import com.marketplace.vintage.logging.Logger;
import com.marketplace.vintage.logging.OnlyWarnLogger;
import com.marketplace.vintage.logging.PrefixLogger;
import com.marketplace.vintage.order.OrderController;
import com.marketplace.vintage.order.OrderFactory;
import com.marketplace.vintage.order.OrderManager;
import com.marketplace.vintage.scripting.ScriptController;
import com.marketplace.vintage.time.TimeManager;
import com.marketplace.vintage.user.User;
import com.marketplace.vintage.user.UserController;
import com.marketplace.vintage.user.UserManager;
import com.marketplace.vintage.view.ViewFactory;
import com.marketplace.vintage.view.impl.UserView;
import impl.PremiumMalaItem;
import impl.SapatilhasItem;
import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ItemStockAddCommand_ESTest extends ItemStockAddCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = PrefixLogger.of("L0X^c", javaLogger0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, (TimeManager) null, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      ViewFactory viewFactory0 = new ViewFactory(logger0, stdinInputPrompter0, vintage0);
      UUID uUID0 = MockUUID.fromString("L0X^c");
      User user0 = new User(uUID0, "jrFnp-ri[xOT:'R", "", "jrFnp-ri[xOT:'R", "Adds stock to an item", "jrFnp-ri[xOT:'R");
      UserView userView0 = viewFactory0.createUserView(user0);
      ItemStockAddCommand itemStockAddCommand0 = new ItemStockAddCommand(userView0, vintage0);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1, 1);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      SapatilhasItem sapatilhasItem0 = new SapatilhasItem(uUID0, "", 6, usedItemCondition0, "L0X^c", "", bigDecimal0, "com.marketplace.vintage.commands.item.stock.ItemStockAddCommand", 6, true, "", 0);
      // Undeclared exception!
      try { 
        itemStockAddCommand0.operation(logger0, sapatilhasItem0, 2012);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An item with the id  was not found
         //
         verifyException("com.marketplace.vintage.item.ItemManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      OnlyWarnLogger onlyWarnLogger0 = new OnlyWarnLogger(javaLogger0);
      Logger logger0 = PrefixLogger.of((String) null, onlyWarnLogger0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(listIterator0);
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      Vintage vintage0 = new Vintage(itemController0, orderController0, (TimeManager) null, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      ViewFactory viewFactory0 = new ViewFactory(logger0, bufferedInputPrompter0, vintage0);
      UUID uUID0 = MockUUID.fromString((String) null);
      User user0 = new User(uUID0, " stock to item '", "R ", (String) null, "USER_LOGIN", " stock to item '");
      UserView userView0 = viewFactory0.createUserView(user0);
      ItemStockAddCommand itemStockAddCommand0 = new ItemStockAddCommand(userView0, vintage0);
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, (-1636));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "^LFh/^,7%z", 0, usedItemCondition0, "", "R ", bigDecimal0, "", 0, "", 3274, 3274);
      // Undeclared exception!
      try { 
        itemStockAddCommand0.operation(javaLogger0, premiumMalaItem0, (-2355));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Stock change cannot be negative.
         //
         verifyException("com.marketplace.vintage.item.ItemController", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JavaLogger javaLogger0 = new JavaLogger();
      ItemStockAddCommand itemStockAddCommand0 = new ItemStockAddCommand((UserView) null, (Vintage) null);
      // Undeclared exception!
      try { 
        itemStockAddCommand0.operation(javaLogger0, (Item) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.commands.item.stock.ItemStockAddCommand", e);
      }
  }
}
