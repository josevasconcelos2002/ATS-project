/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:55:35 GMT 2024
 */

package com.marketplace.vintage.command;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.command.CommandManager;
import com.marketplace.vintage.command.ParentCommand;
import com.marketplace.vintage.commands.HelpCommand;
import com.marketplace.vintage.input.impl.BufferedInputPrompter;
import com.marketplace.vintage.input.impl.StdinInputPrompter;
import com.marketplace.vintage.logging.JavaLogger;
import com.marketplace.vintage.logging.Logger;
import com.marketplace.vintage.logging.OnlyWarnLogger;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseCommand_ESTest extends BaseCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      HelpCommand helpCommand0 = new HelpCommand(parentCommand0, "W`-oNz-$bq:G");
      String string0 = helpCommand0.getUsage();
      assertEquals("help", helpCommand0.getName());
      assertEquals("Show this help", helpCommand0.getDescription());
      assertEquals(0, helpCommand0.getMinArgs());
      assertEquals("help", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      HelpCommand helpCommand0 = new HelpCommand(parentCommand0, "", "W`-oNz-$bq:G");
      String string0 = helpCommand0.getUsage();
      assertEquals("", string0);
      assertEquals("Show this help", helpCommand0.getDescription());
      assertEquals(0, helpCommand0.getMinArgs());
      assertEquals("help", helpCommand0.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      HelpCommand helpCommand0 = new HelpCommand(parentCommand0, "e/ AtT,7", "e/ AtT,7");
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = OnlyWarnLogger.of(javaLogger0);
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      // Undeclared exception!
      try { 
        helpCommand0.execute(logger0, bufferedInputPrompter0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.command.BaseCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      HelpCommand helpCommand0 = new HelpCommand(commandManager0, " ");
      JavaLogger javaLogger0 = new JavaLogger();
      Logger logger0 = OnlyWarnLogger.of(javaLogger0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      String[] stringArray0 = new String[1];
      helpCommand0.execute(logger0, stdinInputPrompter0, stringArray0);
      assertEquals(0, helpCommand0.getMinArgs());
      assertEquals("help", helpCommand0.getName());
      assertEquals("Show this help", helpCommand0.getDescription());
      assertEquals("help", helpCommand0.getUsage());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("Command name cannot contain spaces", "^'bM#crP'6j\"/n] ");
      HelpCommand helpCommand0 = new HelpCommand(parentCommand0, "UD`JrlZiC8aTOsetU_N");
      String string0 = helpCommand0.getDescription();
      assertEquals(0, helpCommand0.getMinArgs());
      assertEquals("help", helpCommand0.getName());
      assertEquals("Show this help", string0);
      assertEquals("help", helpCommand0.getUsage());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("Command name cannot contain spaces", "^'bM#crP'6j\"/n] ");
      HelpCommand helpCommand0 = new HelpCommand(parentCommand0, "UD`JrlZiC8aTOsetU_N");
      String string0 = helpCommand0.getName();
      assertEquals("help", helpCommand0.getUsage());
      assertEquals("Show this help", helpCommand0.getDescription());
      assertEquals("help", string0);
      assertEquals(0, helpCommand0.getMinArgs());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("SAPATILHAS", (String) null);
      HelpCommand helpCommand0 = new HelpCommand(parentCommand0, (String) null, "The shopping cart is empty.");
      String string0 = helpCommand0.getUsage();
      assertNull(string0);
      assertEquals("help", helpCommand0.getName());
      assertEquals(0, helpCommand0.getMinArgs());
      assertEquals("Show this help", helpCommand0.getDescription());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      HelpCommand helpCommand0 = new HelpCommand(parentCommand0, "", "");
      int int0 = helpCommand0.getMinArgs();
      assertEquals("help", helpCommand0.getName());
      assertEquals(0, int0);
      assertEquals("Show this help", helpCommand0.getDescription());
      assertEquals("", helpCommand0.getUsage());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ParentCommand parentCommand0 = new ParentCommand("", "");
      JavaLogger javaLogger0 = new JavaLogger();
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      String[] stringArray0 = new String[0];
      parentCommand0.execute(javaLogger0, stdinInputPrompter0, stringArray0);
      assertEquals("", parentCommand0.getDescription());
  }
}
