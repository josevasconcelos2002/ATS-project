/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:56:01 GMT 2024
 */

package com.marketplace.vintage.command;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.command.Command;
import com.marketplace.vintage.command.CommandManager;
import com.marketplace.vintage.command.ParentCommand;
import com.marketplace.vintage.input.InputPrompter;
import com.marketplace.vintage.input.impl.BufferedInputPrompter;
import com.marketplace.vintage.input.impl.StdinInputPrompter;
import com.marketplace.vintage.logging.JavaLogger;
import com.marketplace.vintage.logging.Logger;
import java.util.Iterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommandManager_ESTest extends CommandManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      ParentCommand parentCommand0 = new ParentCommand("I_Mjee=|OX4lDc=9u", "I_Mjee=|OX4lDc=9u");
      commandManager0.registerCommand(parentCommand0);
      JavaLogger javaLogger0 = new JavaLogger();
      commandManager0.executeRawCommand(javaLogger0, (InputPrompter) null, "I_Mjee=|OX4lDc=9u <subcommand>");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      JavaLogger javaLogger0 = new JavaLogger();
      commandManager0.executeRawCommand(javaLogger0, (InputPrompter) null, "I_Mjee=|OX4lDc=9u <subcommand>");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      ParentCommand parentCommand0 = new ParentCommand("I_Mjee=|OX4lDc=9u", "I_Mjee=|OX4lDc=9u");
      commandManager0.registerCommand(parentCommand0);
      List<Command> list0 = commandManager0.getRegisteredCommands();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      ParentCommand parentCommand0 = new ParentCommand("help", "help");
      Command command0 = parentCommand0.getCommand("help");
      commandManager0.registerCommand(command0);
      Command command1 = commandManager0.getCommand("help");
      assertEquals("help help", command1.getUsage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      ParentCommand parentCommand0 = new ParentCommand("I_Mjee=|OX4lDc=9u", "I_Mjee=|OX4lDc=9u");
      commandManager0.registerCommand(parentCommand0);
      Command command0 = commandManager0.getCommand("I_Mjee=|OX4lDc=9u");
      assertEquals("I_Mjee=|OX4lDc=9u", command0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      // Undeclared exception!
      try { 
        commandManager0.registerCommand((Command) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.command.CommandManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      // Undeclared exception!
      try { 
        commandManager0.getCommand((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.command.CommandManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      ParentCommand parentCommand0 = new ParentCommand("help", "help");
      Command command0 = parentCommand0.getCommand("help");
      commandManager0.registerCommand(command0);
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      // Undeclared exception!
      try { 
        commandManager0.executeRawCommand((Logger) null, stdinInputPrompter0, "help");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.marketplace.vintage.command.CommandManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      // Undeclared exception!
      try { 
        commandManager0.executeRawCommand((Logger) null, bufferedInputPrompter0, "fta");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.command.CommandManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      Command command0 = commandManager0.getCommand("com.marketplace.vintage.logging.JavaLogger");
      assertNull(command0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommandManager commandManager0 = new CommandManager();
      List<Command> list0 = commandManager0.getRegisteredCommands();
      assertEquals(0, list0.size());
  }
}
