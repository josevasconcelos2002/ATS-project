/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:21:13 GMT 2024
 */

package com.marketplace.vintage.stats;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.Vintage;
import com.marketplace.vintage.carrier.NormalParcelCarrier;
import com.marketplace.vintage.carrier.ParcelCarrier;
import com.marketplace.vintage.carrier.ParcelCarrierController;
import com.marketplace.vintage.carrier.ParcelCarrierManager;
import com.marketplace.vintage.carrier.PremiumParcelCarrier;
import com.marketplace.vintage.expression.Exp4jExpressionSolver;
import com.marketplace.vintage.item.ItemController;
import com.marketplace.vintage.item.ItemFactory;
import com.marketplace.vintage.item.ItemManager;
import com.marketplace.vintage.order.Order;
import com.marketplace.vintage.order.OrderController;
import com.marketplace.vintage.order.OrderFactory;
import com.marketplace.vintage.order.OrderManager;
import com.marketplace.vintage.order.OrderedItem;
import com.marketplace.vintage.order.invoice.InvoiceLine;
import com.marketplace.vintage.scripting.ScriptController;
import com.marketplace.vintage.stats.StatsManager;
import com.marketplace.vintage.time.TimeManager;
import com.marketplace.vintage.user.User;
import com.marketplace.vintage.user.UserController;
import com.marketplace.vintage.user.UserManager;
import com.marketplace.vintage.utils.VintageDate;
import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.UUID;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StatsManager_ESTest extends StatsManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) "kM");
      List<User> list0 = statsManager0.getTopSellers(895, predicate0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      userManager0.createUser("p$_Y6?VvwPv|z\"k~", "p$_Y6?VvwPv|z\"k~", "e!\"1kvxL4`xF8T", "", "");
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) "kM");
      List<User> list0 = statsManager0.getTopSellers(895, predicate0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      User user0 = userManager0.createUser("tax", "~", "tax", "tax", "tax");
      UserController userController0 = new UserController(userManager0);
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      StatsManager statsManager0 = new StatsManager(vintage0);
      Object object0 = new Object();
      Predicate<VintageDate> predicate0 = Predicate.isEqual(object0);
      List<User> list0 = statsManager0.getTopBuyers(1, predicate0);
      assertTrue(list0.contains(user0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController((ItemManager) null, itemFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      userController0.createUser("J%~V", "J%~V", "J%~V", "Jfn", "ox");
      Vintage vintage0 = new Vintage(itemController0, (OrderController) null, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      User user0 = statsManager0.getSellerWithMoreMoneySales((Predicate<VintageDate>) null);
      assertEquals("ox", user0.getTaxNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserController userController0 = new UserController((UserManager) null);
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("0ix:", "0ix:");
      parcelCarrierController0.registerParcelCarrier(normalParcelCarrier0);
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      StatsManager statsManager0 = new StatsManager(vintage0);
      ParcelCarrier parcelCarrier0 = statsManager0.getParcelCarrierWithMoreMoneyReceived();
      assertEquals("0ix:", parcelCarrier0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserController userController0 = new UserController((UserManager) null);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, (OrderController) null, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      // Undeclared exception!
      try { 
        statsManager0.getVintageProfit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserController userController0 = new UserController((UserManager) null);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier(",", "");
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) normalParcelCarrier0);
      // Undeclared exception!
      try { 
        statsManager0.getTopSellers(13, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.user.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatsManager statsManager0 = new StatsManager((Vintage) null);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) null);
      // Undeclared exception!
      try { 
        statsManager0.getTopBuyers(1095, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.stats.StatsManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderController orderController0 = new OrderController((OrderManager) null, (OrderFactory) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, (TimeManager) null, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) exp4jExpressionSolver0);
      // Undeclared exception!
      try { 
        statsManager0.getTopBuyers((-1736), predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1736
         //
         verifyException("java.util.stream.ReferencePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserController userController0 = new UserController((UserManager) null);
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      StatsManager statsManager0 = new StatsManager(vintage0);
      // Undeclared exception!
      try { 
        statsManager0.getSellerWithMoreMoneySales((Predicate<VintageDate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.user.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatsManager statsManager0 = new StatsManager((Vintage) null);
      // Undeclared exception!
      try { 
        statsManager0.getParcelCarrierWithMoreMoneyReceived();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.stats.StatsManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserController userController0 = new UserController((UserManager) null);
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("Sh'T", "Sh'T");
      normalParcelCarrier0.addDeliveredOrder("Sh'T");
      Vintage vintage0 = new Vintage(itemController0, (OrderController) null, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      StatsManager statsManager0 = new StatsManager(vintage0);
      // Undeclared exception!
      try { 
        statsManager0.getParcelCarrierReceivedMoney(normalParcelCarrier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatsManager statsManager0 = new StatsManager((Vintage) null);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) null);
      // Undeclared exception!
      try { 
        statsManager0.getMoneyFromUserSalesByDatePredicate((User) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.stats.StatsManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserController userController0 = new UserController((UserManager) null);
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      StatsManager statsManager0 = new StatsManager(vintage0);
      UserManager userManager0 = new UserManager();
      User user0 = userManager0.createUser("j$", "j$", "j$", "j$", "j$");
      user0.addCompletedSellOrderId("j$");
      // Undeclared exception!
      try { 
        statsManager0.getMoneyFromUserSalesByDatePredicate(user0, (Predicate<VintageDate>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with the id j$ was not found
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserController userController0 = new UserController((UserManager) null);
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      StatsManager statsManager0 = new StatsManager(vintage0);
      UserManager userManager0 = new UserManager();
      User user0 = userManager0.createUser("j$", "j$", "j$", "j$", "j$");
      BigDecimal bigDecimal0 = statsManager0.getMoneyFromUserSalesByDatePredicate(user0, (Predicate<VintageDate>) null);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      Order order0 = new Order("", uUID0, linkedList0, linkedList1, (BigDecimal) null, (VintageDate) null);
      orderManager0.registerOrder(order0);
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, (ParcelCarrierController) null, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) null);
      User user0 = new User("", "", "", "Couldn't split view and command from script: ", "");
      user0.addCompletedOrderId("");
      // Undeclared exception!
      try { 
        statsManager0.getMoneySpentByUserInDatePredicate(user0, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      Order order0 = new Order("", uUID0, linkedList0, linkedList1, (BigDecimal) null, (VintageDate) null);
      orderManager0.registerOrder(order0);
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, (ParcelCarrierController) null, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) vintage0);
      User user0 = new User("", "", "", "Couldn't split view and command from script: ", "");
      user0.addCompletedOrderId("");
      BigDecimal bigDecimal0 = statsManager0.getMoneySpentByUserInDatePredicate(user0, predicate0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      Order order0 = new Order("", uUID0, linkedList0, linkedList1, (BigDecimal) null, (VintageDate) null);
      orderManager0.registerOrder(order0);
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      orderController0.returnOrder(order0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, (ParcelCarrierController) null, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) vintage0);
      User user0 = new User("", "", "", "", "");
      user0.addCompletedOrderId("");
      BigDecimal bigDecimal0 = statsManager0.getMoneySpentByUserInDatePredicate(user0, predicate0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, (ParcelCarrierController) null, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) vintage0);
      User user0 = new User("", "", "", "Couldn't split view and command from script: ", "");
      user0.addCompletedOrderId("");
      // Undeclared exception!
      try { 
        statsManager0.getMoneySpentByUserInDatePredicate(user0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with the id  was not found
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserController userController0 = new UserController((UserManager) null);
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("0ix:", "0ix:");
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      StatsManager statsManager0 = new StatsManager(vintage0);
      normalParcelCarrier0.addDeliveredOrder("Ht^=#Tet_z<)?bM'");
      // Undeclared exception!
      try { 
        statsManager0.getParcelCarrierReceivedMoney(normalParcelCarrier0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with the id Ht^=#Tet_z<)?bM' was not found
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserController userController0 = new UserController((UserManager) null);
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, (ScriptController) null);
      StatsManager statsManager0 = new StatsManager(vintage0);
      NormalParcelCarrier normalParcelCarrier0 = new NormalParcelCarrier("j$", "j$");
      BigDecimal bigDecimal0 = statsManager0.getParcelCarrierReceivedMoney(normalParcelCarrier0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      Order order0 = new Order("", uUID0, linkedList0, linkedList1, (BigDecimal) null, (VintageDate) null);
      orderManager0.registerOrder(order0);
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      orderController0.returnOrder(order0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, (ParcelCarrierController) null, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      BigDecimal bigDecimal0 = statsManager0.getVintageProfit();
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UUID uUID0 = MockUUID.randomUUID();
      LinkedList<OrderedItem> linkedList0 = new LinkedList<OrderedItem>();
      LinkedList<InvoiceLine> linkedList1 = new LinkedList<InvoiceLine>();
      Order order0 = new Order("", uUID0, linkedList0, linkedList1, (BigDecimal) null, (VintageDate) null);
      orderManager0.registerOrder(order0);
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, (ParcelCarrierController) null, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      BigDecimal bigDecimal0 = statsManager0.getVintageProfit();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController((OrderManager) null, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      // Undeclared exception!
      try { 
        statsManager0.getParcelCarrierWithMoreMoneyReceived();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, (TimeManager) null, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      PremiumParcelCarrier premiumParcelCarrier0 = new PremiumParcelCarrier("AAA-AAA", "AAA-AAA");
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) premiumParcelCarrier0);
      // Undeclared exception!
      try { 
        statsManager0.getTopSellers((-2790), predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2790
         //
         verifyException("java.util.stream.ReferencePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, (TimeManager) null, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) itemController0);
      // Undeclared exception!
      try { 
        statsManager0.getSellerWithMoreMoneySales(predicate0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      OrderFactory orderFactory0 = new OrderFactory();
      OrderController orderController0 = new OrderController(orderManager0, orderFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, (ParcelCarrierController) null, exp4jExpressionSolver0, userController0, scriptController0);
      StatsManager statsManager0 = new StatsManager(vintage0);
      Predicate<VintageDate> predicate0 = Predicate.isEqual((Object) vintage0);
      List<User> list0 = statsManager0.getTopBuyers(824, predicate0);
      assertEquals(0, list0.size());
  }
}
