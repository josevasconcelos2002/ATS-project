/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:29:29 GMT 2024
 */

package com.marketplace.vintage.item;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.item.ItemFactory;
import com.marketplace.vintage.item.ItemProperty;
import com.marketplace.vintage.item.ItemType;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ItemFactory_ESTest extends ItemFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ItemType itemType0 = ItemType.TSHIRT;
      HashMap<ItemProperty, Object> hashMap0 = new HashMap<ItemProperty, Object>();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemProperty itemProperty0 = ItemProperty.STOCK;
      Integer integer0 = new Integer((-1120));
      hashMap0.put(itemProperty0, integer0);
      UUID uUID0 = MockUUID.fromString("q)` !oG");
      // Undeclared exception!
      try { 
        itemFactory0.createItem(uUID0, "q)` !oG", itemType0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The item property ITEM_CONDITION is required
         //
         verifyException("com.marketplace.vintage.item.ItemFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ItemFactory itemFactory0 = new ItemFactory();
      UUID uUID0 = MockUUID.fromString("com.marketplace.vintage.item.ItemFactory");
      ItemType itemType0 = ItemType.SAPATILHAS_PREMIUM;
      HashMap<ItemProperty, Object> hashMap0 = new HashMap<ItemProperty, Object>();
      ItemProperty itemProperty0 = ItemProperty.STOCK;
      Integer integer0 = new Integer(204);
      hashMap0.put(itemProperty0, integer0);
      // Undeclared exception!
      try { 
        itemFactory0.createItem(uUID0, "com.marketplace.vintage.item.ItemFactory", itemType0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The item property ITEM_CONDITION is required
         //
         verifyException("com.marketplace.vintage.item.ItemFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ItemType itemType0 = ItemType.SAPATILHAS;
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<ItemProperty, Object> hashMap0 = new HashMap<ItemProperty, Object>();
      ItemProperty itemProperty0 = ItemProperty.STOCK;
      Integer integer0 = new Integer(1346);
      hashMap0.put(itemProperty0, integer0);
      ItemFactory itemFactory0 = new ItemFactory();
      // Undeclared exception!
      try { 
        itemFactory0.createItem(uUID0, "", itemType0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The item property ITEM_CONDITION is required
         //
         verifyException("com.marketplace.vintage.item.ItemFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ItemFactory itemFactory0 = new ItemFactory();
      UUID uUID0 = MockUUID.randomUUID();
      ItemType itemType0 = ItemType.MALA_PREMIUM;
      HashMap<ItemProperty, Object> hashMap0 = new HashMap<ItemProperty, Object>();
      ItemProperty itemProperty0 = ItemProperty.STOCK;
      Integer integer0 = new Integer(5);
      hashMap0.put(itemProperty0, integer0);
      // Undeclared exception!
      try { 
        itemFactory0.createItem(uUID0, (String) null, itemType0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The item property ITEM_CONDITION is required
         //
         verifyException("com.marketplace.vintage.item.ItemFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ItemFactory itemFactory0 = new ItemFactory();
      UUID uUID0 = MockUUID.fromString("com.marketplace.vintage.item.ItemFactory");
      ItemType itemType0 = ItemType.MALA;
      HashMap<ItemProperty, Object> hashMap0 = new HashMap<ItemProperty, Object>();
      ItemProperty itemProperty0 = ItemProperty.STOCK;
      Integer integer0 = new Integer(204);
      hashMap0.put(itemProperty0, integer0);
      // Undeclared exception!
      try { 
        itemFactory0.createItem(uUID0, "com.marketplace.vintage.item.ItemFactory", itemType0, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The item property ITEM_CONDITION is required
         //
         verifyException("com.marketplace.vintage.item.ItemFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ItemFactory itemFactory0 = new ItemFactory();
      HashMap<ItemProperty, Object> hashMap0 = new HashMap<ItemProperty, Object>();
      ItemProperty itemProperty0 = ItemProperty.STOCK;
      hashMap0.put(itemProperty0, "fdrELv^A^@aXob?8|6");
      UUID uUID0 = MockUUID.randomUUID();
      ItemType itemType0 = ItemType.MALA;
      // Undeclared exception!
      try { 
        itemFactory0.createItem(uUID0, "fdrELv^A^@aXob?8|6", itemType0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ItemFactory itemFactory0 = new ItemFactory();
      UUID uUID0 = MockUUID.randomUUID();
      ItemType itemType0 = ItemType.SAPATILHAS;
      // Undeclared exception!
      try { 
        itemFactory0.createItem(uUID0, "", itemType0, (Map<ItemProperty, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
