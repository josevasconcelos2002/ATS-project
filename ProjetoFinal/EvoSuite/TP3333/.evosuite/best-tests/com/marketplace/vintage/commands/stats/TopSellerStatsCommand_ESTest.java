/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:57:58 GMT 2024
 */

package com.marketplace.vintage.commands.stats;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.Vintage;
import com.marketplace.vintage.carrier.ParcelCarrierController;
import com.marketplace.vintage.carrier.ParcelCarrierManager;
import com.marketplace.vintage.commands.stats.TopSellerStatsCommand;
import com.marketplace.vintage.expression.Exp4jExpressionSolver;
import com.marketplace.vintage.input.impl.BufferedInputPrompter;
import com.marketplace.vintage.input.impl.StdinInputPrompter;
import com.marketplace.vintage.item.ItemController;
import com.marketplace.vintage.item.ItemFactory;
import com.marketplace.vintage.item.ItemManager;
import com.marketplace.vintage.logging.JavaLogger;
import com.marketplace.vintage.logging.Logger;
import com.marketplace.vintage.order.OrderController;
import com.marketplace.vintage.order.OrderFactory;
import com.marketplace.vintage.order.OrderManager;
import com.marketplace.vintage.scripting.ScriptController;
import com.marketplace.vintage.time.TimeManager;
import com.marketplace.vintage.user.User;
import com.marketplace.vintage.user.UserController;
import com.marketplace.vintage.user.UserManager;
import com.marketplace.vintage.utils.VintageDate;
import java.util.Iterator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TopSellerStatsCommand_ESTest extends TopSellerStatsCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      String[] stringArray0 = new String[5];
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      OrderController orderController0 = new OrderController(orderManager0, (OrderFactory) null);
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController((ParcelCarrierManager) null);
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      User user0 = vintage0.createUser("up8^L*v?5)A/mTrw8n_", "", " made in sales.", "t35SQ Z3r+G|?`", "t35SQ Z3r+G|?`");
      user0.addCompletedSellOrderId("");
      TopSellerStatsCommand topSellerStatsCommand0 = new TopSellerStatsCommand(vintage0);
      // Undeclared exception!
      try { 
        topSellerStatsCommand0.executeSafely((Logger) null, bufferedInputPrompter0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // An order with the id  was not found
         //
         verifyException("com.marketplace.vintage.order.OrderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      ParcelCarrierManager parcelCarrierManager0 = new ParcelCarrierManager();
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController(parcelCarrierManager0);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      Vintage vintage0 = new Vintage(itemController0, (OrderController) null, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      TopSellerStatsCommand topSellerStatsCommand0 = new TopSellerStatsCommand(vintage0);
      JavaLogger javaLogger0 = new JavaLogger();
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        topSellerStatsCommand0.executeSafely(javaLogger0, stdinInputPrompter0, stringArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      String[] stringArray0 = new String[5];
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BufferedInputPrompter bufferedInputPrompter0 = new BufferedInputPrompter(iterator0);
      OrderController orderController0 = new OrderController(orderManager0, (OrderFactory) null);
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController((ParcelCarrierManager) null);
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      vintage0.createUser("up8^L*v?5)A/mTrw8n_", "", " made in sales.", "", "");
      TopSellerStatsCommand topSellerStatsCommand0 = new TopSellerStatsCommand(vintage0);
      // Undeclared exception!
      try { 
        topSellerStatsCommand0.executeSafely((Logger) null, bufferedInputPrompter0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.commands.stats.TopSellerStatsCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ItemManager itemManager0 = new ItemManager();
      ItemFactory itemFactory0 = new ItemFactory();
      ItemController itemController0 = new ItemController(itemManager0, itemFactory0);
      OrderManager orderManager0 = new OrderManager();
      TimeManager timeManager0 = new TimeManager((VintageDate) null);
      Exp4jExpressionSolver exp4jExpressionSolver0 = new Exp4jExpressionSolver();
      UserManager userManager0 = new UserManager();
      UserController userController0 = new UserController(userManager0);
      ScriptController scriptController0 = new ScriptController();
      String[] stringArray0 = new String[12];
      OrderController orderController0 = new OrderController(orderManager0, (OrderFactory) null);
      ParcelCarrierController parcelCarrierController0 = new ParcelCarrierController((ParcelCarrierManager) null);
      Vintage vintage0 = new Vintage(itemController0, orderController0, timeManager0, parcelCarrierController0, exp4jExpressionSolver0, userController0, scriptController0);
      vintage0.createUser("$", "com.marketplace.vintage.exceptions.EntityAlreadyExistsException", "com.marketplace.vintage.exceptions.EntityAlreadyExistsException", "com.marketplace.vintage.exceptions.EntityAlreadyExistsException", "com.marketplace.vintage.exceptions.EntityAlreadyExistsException");
      TopSellerStatsCommand topSellerStatsCommand0 = new TopSellerStatsCommand(vintage0);
      JavaLogger javaLogger0 = new JavaLogger();
      StdinInputPrompter stdinInputPrompter0 = new StdinInputPrompter();
      topSellerStatsCommand0.executeSafely(javaLogger0, stdinInputPrompter0, stringArray0);
      assertEquals(0, topSellerStatsCommand0.getMinArgs());
  }
}
