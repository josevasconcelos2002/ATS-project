/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 21:02:28 GMT 2024
 */

package com.marketplace.vintage.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.item.condition.UsedItemCondition;
import com.marketplace.vintage.utils.StringUtils;
import impl.MalaItem;
import impl.PremiumMalaItem;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Optional;
import java.util.UUID;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("-*t,sf=ze]nz/Qt2");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      String string0 = StringUtils.joinQuoted((Collection<String>) linkedList0, (Function<String, String>) unaryOperator0, "\"qMw#IRP1lO#6;,x7Zt");
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      String string0 = StringUtils.joinQuoted((Collection<String>) linkedList0, (Function<String, String>) unaryOperator0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(")WUQ.j!>/=");
      String string0 = StringUtils.joinQuoted((Collection<String>) linkedList0, "");
      assertEquals("')WUQ.j!>/='", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 1201);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "", 0, usedItemCondition0, "", "'", bigDecimal0, "'", 1201, "", (-2067), 1201);
      premiumMalaItem0.getPriceCorrection(3344);
      premiumMalaItem0.getFinalPrice(0);
      // Undeclared exception!
      StringUtils.printItem(premiumMalaItem0, 1201);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      UUID uUID0 = MockUUID.fromString("1,00\u20AC");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1, 7);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "1,00\u20AC", 1627, usedItemCondition0, "1,00\u20AC", (String) null, bigDecimal0, (String) null, 0, (String) null, 7, 1627);
      // Undeclared exception!
      try { 
        StringUtils.printItem(premiumMalaItem0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(1, 1);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, "!N\tG$m;BkB?", 10, usedItemCondition0, "10,00\u20AC", "Sx,0", bigDecimal0, "<itemType>", 2967, "10,00\u20AC", 0, 1681);
      // Undeclared exception!
      try { 
        StringUtils.printItem(premiumMalaItem0, (-1586));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current year cannot be before collection year
         //
         verifyException("impl.MalaItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.joinQuoted((Collection<String>) null, ", alphanumericID='");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.formatCurrency((BigDecimal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        StringUtils.joinQuoted((Collection<String>) linkedList0, (Function<String, String>) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(28, 28);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MalaItem malaItem0 = new MalaItem(uUID0, "v", 28, usedItemCondition0, "v", "v", bigDecimal0, "v", 28, "v", 28, 28);
      String string0 = StringUtils.printItem(malaItem0, 28);
      assertEquals("[v] (Mala) v (of brand 'v') - 10,00\u20AC (sent by v)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optional<Integer> optional0 = StringUtils.parseIntSafe("v");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = StringUtils.joinQuoted((Collection<String>) linkedList0, "");
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      String string0 = StringUtils.formatCurrency(bigDecimal0);
      assertEquals("1,00\u20AC", string0);
  }
}
