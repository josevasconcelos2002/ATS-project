/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 20:31:39 GMT 2024
 */

package com.marketplace.vintage.item;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.item.ItemProperty;
import com.marketplace.vintage.item.ItemType;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ItemType_ESTest extends ItemType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ItemType[] itemTypeArray0 = ItemType.values();
      assertEquals(5, itemTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ItemType itemType0 = ItemType.valueOf("MALA_PREMIUM");
      assertEquals("Mala Premium", itemType0.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ItemType itemType0 = ItemType.valueOf("MALA");
      assertEquals(ItemType.MALA, itemType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ItemType itemType0 = ItemType.MALA_PREMIUM;
      boolean boolean0 = itemType0.isPremium();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ItemType itemType0 = ItemType.fromDisplayName("Mala");
      assertEquals(ItemType.MALA, itemType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ItemType itemType0 = ItemType.SAPATILHAS;
      Set<ItemProperty> set0 = itemType0.getRequiredProperties();
      //  // Unstable assertion: assertEquals(16, set0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ItemType itemType0 = ItemType.MALA;
      String string0 = itemType0.getDisplayName();
      assertEquals("Mala", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ItemType itemType0 = ItemType.MALA_PREMIUM;
      Set<ItemProperty> set0 = itemType0.getRequiredProperties();
      //  // Unstable assertion: assertEquals(16, set0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ItemType itemType0 = ItemType.TSHIRT;
      Set<ItemProperty> set0 = itemType0.getRequiredProperties();
      //  // Unstable assertion: assertEquals(15, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ItemType itemType0 = ItemType.fromDisplayName("Sapatilhas Premium");
      Set<ItemProperty> set0 = itemType0.getRequiredProperties();
      //  // Unstable assertion: assertEquals(14, set0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ItemType itemType0 = ItemType.MALA;
      Set<ItemProperty> set0 = itemType0.getRequiredProperties();
      assertEquals(10, set0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ItemType.fromDisplayName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No item type with display name  was found
         //
         verifyException("com.marketplace.vintage.item.ItemType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ItemType itemType0 = ItemType.MALA;
      boolean boolean0 = itemType0.isPremium();
      assertFalse(boolean0);
  }
}
