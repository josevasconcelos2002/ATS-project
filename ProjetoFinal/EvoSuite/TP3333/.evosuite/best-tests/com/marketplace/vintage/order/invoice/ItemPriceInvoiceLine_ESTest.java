/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 21:08:01 GMT 2024
 */

package com.marketplace.vintage.order.invoice;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.marketplace.vintage.item.Item;
import com.marketplace.vintage.item.condition.UsedItemCondition;
import com.marketplace.vintage.order.invoice.ItemPriceInvoiceLine;
import impl.PremiumMalaItem;
import impl.PremiumSapatilhasItem;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ItemPriceInvoiceLine_ESTest extends ItemPriceInvoiceLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(0, 0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PremiumMalaItem premiumMalaItem0 = new PremiumMalaItem(uUID0, " (", 0, usedItemCondition0, " (", " (", bigDecimal0, "gtymbr?eOio(h$kxr", 0, " (", 713, 0);
      ItemPriceInvoiceLine itemPriceInvoiceLine0 = null;
      try {
        itemPriceInvoiceLine0 = new ItemPriceInvoiceLine(premiumMalaItem0, (-2339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current year cannot be before collection year
         //
         verifyException("impl.MalaItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UsedItemCondition usedItemCondition0 = new UsedItemCondition(3081, 3081);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      PremiumSapatilhasItem premiumSapatilhasItem0 = new PremiumSapatilhasItem(uUID0, "EGgxC=", 3081, usedItemCondition0, "EGgxC=", "", bigDecimal0, "\"9dy}es8#SO%Pw],", 3081, false, "NGO^B", 3081, 3081);
      ItemPriceInvoiceLine itemPriceInvoiceLine0 = new ItemPriceInvoiceLine(premiumSapatilhasItem0, 3081);
      assertEquals("Item EGgxC= (Sapatilhas Premium) EGgxC=", itemPriceInvoiceLine0.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ItemPriceInvoiceLine itemPriceInvoiceLine0 = null;
      try {
        itemPriceInvoiceLine0 = new ItemPriceInvoiceLine((Item) null, (-6176));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.marketplace.vintage.order.invoice.ItemPriceInvoiceLine", e);
      }
  }
}
