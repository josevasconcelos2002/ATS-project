/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 13:41:59 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Artigo;
import Model.Malas;
import Model.Sapatilhas;
import Model.TShirt;
import Model.Utilizador;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate1 = MockLocalDate.now((ZoneId) zoneOffset0);
      utilizador0.calculaFaturacaoIntervalo(localDate1, localDate0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, 886.0);
      utilizador0.adicionaFaturacao((LocalDate) null, 886.0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador1 = new Utilizador("_C k4>(\"8", "_C k4>(\"8", "ls*FfUR%W'}AJw+g8L", "ls*FfUR%W'}AJw+g8L", 0, list0, list0, list0, hashMap0);
      Sapatilhas sapatilhas0 = new Sapatilhas();
      utilizador1.adicionaVendas(sapatilhas0);
      utilizador1.removeVenda(1915);
      assertEquals(2, utilizador1.getId());
      assertEquals("_C k4>(\"8", utilizador1.getEmail());
      assertEquals(0, utilizador1.getNif());
      assertEquals("ls*FfUR%W'}AJw+g8L", utilizador1.getNome());
      assertEquals("_C k4>(\"8", utilizador1.getPassword());
      assertEquals("ls*FfUR%W'}AJw+g8L", utilizador1.getMorada());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      LinkedHashSet<TShirt> linkedHashSet0 = new LinkedHashSet<TShirt>();
      TShirt tShirt0 = new TShirt();
      linkedHashSet0.add(tShirt0);
      linkedList0.addAll((Collection<? extends Artigo>) linkedHashSet0);
      utilizador0.setPorVender(linkedList0);
      Artigo artigo0 = utilizador0.removePorVender(0);
      assertNull(artigo0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Sapatilhas sapatilhas0 = new Sapatilhas();
      sapatilhas0.setPrecoBase(603);
      sapatilhas0.setId(603);
      utilizador0.adicionarPorVender(sapatilhas0);
      Artigo artigo0 = utilizador0.removePorVender(603);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
      assertNotNull(artigo0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Sapatilhas sapatilhas0 = new Sapatilhas();
      sapatilhas0.setPrecoBase((-1132.3087036));
      sapatilhas0.setId(603);
      utilizador0.adicionarPorVender(sapatilhas0);
      Artigo artigo0 = utilizador0.removePorVender(603);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertNotNull(artigo0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Sapatilhas sapatilhas0 = new Sapatilhas();
      sapatilhas0.setId(0);
      utilizador0.adicionarPorVender(sapatilhas0);
      Artigo artigo0 = utilizador0.removePorVender(0);
      assertNotNull(artigo0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Sapatilhas sapatilhas0 = new Sapatilhas();
      sapatilhas0.setId((-1473));
      utilizador0.adicionarPorVender(sapatilhas0);
      Artigo artigo0 = utilizador0.removePorVender((-1473));
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertNotNull(artigo0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Sapatilhas sapatilhas0 = new Sapatilhas();
      sapatilhas0.setCorrecaoPreco((-1658.840494));
      sapatilhas0.setId(621);
      utilizador0.adicionarPorVender(sapatilhas0);
      Artigo artigo0 = utilizador0.removePorVender(621);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertNotNull(artigo0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("Transportadora: ", "Transportadora: ", (String) null, "", 206, linkedList0, linkedList0, linkedList0, hashMap0);
      utilizador0.getVendas();
      assertEquals(1, utilizador0.getId());
      assertEquals(206, utilizador0.getNif());
      assertEquals("Transportadora: ", utilizador0.getPassword());
      assertEquals("", utilizador0.getMorada());
      assertEquals("Transportadora: ", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, "p_9if/iT#", "p_9if/iT#", 166, linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getPassword();
      assertNull(string0);
      assertEquals(1, utilizador0.getId());
      assertEquals(166, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getPassword();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("wcTho>", "wcTho>", "wcTho>", "", (-1629), linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getNome();
      assertEquals(1, utilizador0.getId());
      assertEquals("wcTho>", utilizador0.getEmail());
      assertEquals("wcTho>", string0);
      assertEquals((-1629), utilizador0.getNif());
      assertEquals("wcTho>", utilizador0.getPassword());
      assertEquals("", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getNome();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("USADO", "", "EjabE", "USADO", 594, list0, list0, list0, map0);
      int int0 = utilizador1.getNif();
      assertEquals(2, utilizador1.getId());
      assertEquals(594, int0);
      assertEquals("USADO", utilizador1.getEmail());
      assertEquals(0, utilizador0.getNif());
      assertEquals("USADO", utilizador1.getMorada());
      assertEquals("EjabE", utilizador1.getNome());
      assertEquals("", utilizador1.getPassword());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", (String) null, "", "", (-1), linkedList0, linkedList0, linkedList0, hashMap0);
      int int0 = utilizador0.getNif();
      assertEquals(1, utilizador0.getId());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada((String) null);
      utilizador0.getMorada();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("Tamanho Numerico: ", "Tamanho Numerico: ", "Pre\u00E7o Final: ", "Pre\u00E7o Final: ", 0, linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getMorada();
      assertEquals(0, utilizador0.getNif());
      assertEquals("Tamanho Numerico: ", utilizador0.getEmail());
      assertEquals(1, utilizador0.getId());
      assertEquals("Pre\u00E7o Final: ", string0);
      assertEquals("Tamanho Numerico: ", utilizador0.getPassword());
      assertEquals("Pre\u00E7o Final: ", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(1, utilizador0.getId());
      
      utilizador0.setId(0);
      int int0 = utilizador0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.adicionaFaturacao(localDate0, (-1.0));
      utilizador0.getFaturacao();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("LMrdG OfB'BOf", "", "", "LMrdG OfB'BOf", (-56), linkedList0, linkedList0, linkedList0, map0);
      String string0 = utilizador1.getEmail();
      assertEquals("LMrdG OfB'BOf", string0);
      assertEquals((-56), utilizador1.getNif());
      assertEquals("", utilizador1.getPassword());
      assertEquals(0, utilizador0.getNif());
      assertEquals("LMrdG OfB'BOf", utilizador1.getMorada());
      assertEquals("", utilizador1.getNome());
      assertEquals(2, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getEmail();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador((String) null, "", "x;?c47A?;l -HJ8q 2`", (String) null, (-1), linkedList0, linkedList0, linkedList0, hashMap0);
      utilizador0.getCompras();
      assertEquals(1, utilizador0.getId());
      assertEquals("", utilizador0.getPassword());
      assertEquals((-1), utilizador0.getNif());
      assertEquals("x;?c47A?;l -HJ8q 2`", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("", "", "", "", 0, linkedList0, linkedList0, linkedList0, map0);
      Utilizador utilizador2 = utilizador1.clone();
      assertEquals(0, utilizador2.getNif());
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador2.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador1 = new Utilizador(";8Ghn Ry &q+&O", ";8Ghn Ry &q+&O", ";8Ghn Ry &q+&O", "cNfJB+UG-A~Zb: ", 2438, list0, list0, list0, hashMap0);
      Utilizador utilizador2 = utilizador1.clone();
      assertEquals(2438, utilizador2.getNif());
      assertEquals(1, utilizador0.getId());
      assertEquals("cNfJB+UG-A~Zb: ", utilizador2.getMorada());
      assertEquals(2438, utilizador1.getNif());
      assertEquals(";8Ghn Ry &q+&O", utilizador2.getPassword());
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador2.getId());
      assertEquals(";8Ghn Ry &q+&O", utilizador2.getEmail());
      assertEquals(";8Ghn Ry &q+&O", utilizador2.getNome());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("wcTho>", "wcTho>", "wcTho>", "", (-1629), linkedList0, linkedList0, linkedList0, hashMap0);
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals("", utilizador1.getMorada());
      assertEquals(1, utilizador1.getId());
      assertEquals((-1629), utilizador0.getNif());
      assertEquals("wcTho>", utilizador1.getNome());
      assertEquals("wcTho>", utilizador1.getEmail());
      assertEquals("wcTho>", utilizador1.getPassword());
      assertEquals((-1629), utilizador1.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      utilizador0.adicionaFaturacao(localDate0, 135.6337777);
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals(1, utilizador0.getId());
      assertEquals(135.6337777, double0, 0.01);
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.adicionaFaturacao(localDate0, (-1.0));
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setVendas((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      linkedList0.add((Artigo) null);
      // Undeclared exception!
      try { 
        utilizador0.setPorVender(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setFaturacao((Map<LocalDate, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setCompras((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.removeVenda((-965));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.adicionaFaturacao(localDate0, (-1.0));
      // Undeclared exception!
      try { 
        utilizador0.removeFaturacao(localDate0, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.removeCompras((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.getVendas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, (-1.0));
      // Undeclared exception!
      try { 
        utilizador0.calculaFaturacaoIntervalo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.adicionarPorVender((Artigo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.adicionaCompra((Artigo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("Password: ", "Password: ", (String) null, "Password: ", 1, linkedList0, linkedList0, linkedList0, (Map<LocalDate, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.M;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliacao artigo_Avaliacao0 = Artigo.Avaliacao.BOM;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, ",p|", artigo_Estado0, 983, artigo_Avaliacao0, ",p|", "", "", 983, (-2103.6471984), "P~tV[o&ih76_'EA$1");
      utilizador0.adicionaCompra(tShirt0);
      List<Artigo> list0 = utilizador0.getCompras();
      utilizador0.setVendas(list0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("Transportadora: ", "Transportadora: ", (String) null, "", 206, linkedList0, linkedList0, linkedList0, hashMap0);
      int int0 = utilizador0.getId();
      assertEquals("Transportadora: ", utilizador0.getPassword());
      assertEquals(206, utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals(1, int0);
      assertEquals("Transportadora: ", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("Transportadora: ", "Transportadora: ", (String) null, "", 206, linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getPassword();
      assertEquals("Transportadora: ", utilizador0.getEmail());
      assertEquals(206, utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals(1, utilizador0.getId());
      assertNotNull(string0);
      assertEquals("Transportadora: ", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("Transportadora: ", "Transportadora: ", (String) null, "", 206, linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getNome();
      assertEquals(1, utilizador0.getId());
      assertNull(string0);
      assertEquals("Transportadora: ", utilizador0.getEmail());
      assertEquals("", utilizador0.getMorada());
      assertEquals("Transportadora: ", utilizador0.getPassword());
      assertEquals(206, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador((String) null, "", "x;?c47A?;l -HJ8q 2`", (String) null, (-1), linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getEmail();
      assertEquals("x;?c47A?;l -HJ8q 2`", utilizador0.getNome());
      assertNull(string0);
      assertEquals("", utilizador0.getPassword());
      assertEquals((-1), utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getMorada();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", (String) null, "", "", (-1), linkedList0, linkedList0, linkedList0, hashMap0);
      utilizador0.setFaturacao(hashMap0);
      assertEquals((-1), utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getNif();
      assertEquals(0, int0);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.adicionaFaturacao(localDate0, (-1.0));
      Double double0 = new Double(1557);
      utilizador0.removeFaturacao(localDate0, double0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("U!.5{ x #{-\";< T`", "", "", "U!.5{ x #{-\";< T`", 1, linkedList0, linkedList0, linkedList0, hashMap0);
      LocalDate localDate0 = MockLocalDate.now();
      Double double0 = new Double(1);
      utilizador0.removeFaturacao(localDate0, double0);
      assertEquals(1, utilizador0.getId());
      assertEquals("", utilizador0.getNome());
      assertEquals("U!.5{ x #{-\";< T`", utilizador0.getMorada());
      assertEquals("", utilizador0.getPassword());
      assertEquals(1, utilizador0.getNif());
      assertEquals("U!.5{ x #{-\";< T`", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("LMrdG OfB'BOf", "", "", "LMrdG OfB'BOf", (-56), linkedList0, linkedList0, linkedList0, map0);
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertEquals((-56), utilizador1.getNif());
      assertEquals("LMrdG OfB'BOf", utilizador1.getMorada());
      assertEquals(0, utilizador0.getNif());
      assertFalse(boolean0);
      assertEquals("LMrdG OfB'BOf", utilizador1.getEmail());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals(2, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(linkedList0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("LMrdG OfB'BOf", "", "", "LMrdG OfB'BOf", (-56), linkedList0, linkedList0, linkedList0, map0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      Sapatilhas sapatilhas0 = new Sapatilhas();
      utilizador2.adicionaVendas(sapatilhas0);
      utilizador2.removeVenda((-56));
      assertEquals((-56), utilizador2.getNif());
      assertEquals("LMrdG OfB'BOf", utilizador2.getMorada());
      assertEquals("", utilizador2.getPassword());
      assertEquals("LMrdG OfB'BOf", utilizador2.getEmail());
      assertEquals((-56), utilizador1.getNif());
      assertEquals("", utilizador2.getNome());
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals(2, utilizador2.getId());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      LinkedHashSet<TShirt> linkedHashSet0 = new LinkedHashSet<TShirt>();
      TShirt tShirt0 = new TShirt();
      linkedHashSet0.add(tShirt0);
      linkedList0.addAll((Collection<? extends Artigo>) linkedHashSet0);
      utilizador0.setPorVender(linkedList0);
      Artigo artigo0 = utilizador0.removePorVender(603);
      assertNull(artigo0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Malas malas0 = new Malas();
      linkedList0.add((Artigo) malas0);
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("zaQN6.2h?", "zaQN6.2h?", "zaQN6.2h?", "zaQN6.2h?", 158, linkedList0, linkedList0, linkedList0, map0);
      assertEquals(158, utilizador1.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("LMrdG OfB'BOf", "LMrdG OfB'BOf", "LMrdG OfB'BOf", "LMrdG OfB'BOf", (-65), linkedList0, linkedList0, linkedList0, map0);
      Sapatilhas sapatilhas0 = new Sapatilhas();
      utilizador1.adicionaVendas(sapatilhas0);
      utilizador1.getVendas();
      assertEquals(2, utilizador1.getId());
      assertEquals((-65), utilizador1.getNif());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("LMrdG OfB'BOf", "LMrdG OfB'BOf", "LMrdG OfB'BOf", "LMrdG OfB'BOf", (-68), linkedList0, linkedList0, linkedList0, map0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      Sapatilhas sapatilhas0 = new Sapatilhas();
      sapatilhas0.setId((-68));
      utilizador2.adicionaVendas(sapatilhas0);
      utilizador2.removeVenda((-68));
      assertEquals(0, utilizador0.getNif());
      assertEquals((-68), utilizador1.getNif());
      assertEquals((-68), utilizador2.getNif());
      assertEquals(2, utilizador2.getId());
      assertEquals(2, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      LinkedHashSet<TShirt> linkedHashSet0 = new LinkedHashSet<TShirt>();
      TShirt tShirt0 = new TShirt();
      linkedHashSet0.add(tShirt0);
      linkedList0.addAll((Collection<? extends Artigo>) linkedHashSet0);
      utilizador0.setPorVender(linkedList0);
      List<Artigo> list0 = utilizador0.getPorVender();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("U!.5{ x #{-\";< T`", "", "", "U!.5{ x #{-\";< T`", 1, linkedList0, linkedList0, linkedList0, hashMap0);
      Malas malas0 = new Malas();
      linkedList0.add(0, (Artigo) malas0);
      utilizador0.setCompras(linkedList0);
      assertEquals(1, utilizador0.getId());
      assertEquals("", utilizador0.getNome());
      assertEquals("U!.5{ x #{-\";< T`", utilizador0.getMorada());
      assertEquals(1, utilizador0.getNif());
      assertEquals("", utilizador0.getPassword());
      assertEquals("U!.5{ x #{-\";< T`", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      utilizador0.removeCompras(linkedList0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail("----------------------------------------\n               UTILIZADOR               \n----------------------------------------\nUtilizador: 1\nEmail: \nPassword: \nNome: \nMorada: \nNIF: 0\nPor Vender: []\n");
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setId((-477));
      int int0 = utilizador0.getId();
      assertEquals((-477), int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.toString();
      assertEquals("----------------------------------------\n               UTILIZADOR               \n----------------------------------------\nUtilizador: 1\nEmail: \nPassword: \nNome: \nMorada: \nNIF: 0\nPor Vender: []\n", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNif(603);
      assertEquals(603, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setPassword("LMrdG OfB'BOf");
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = null;
      try {
        utilizador1 = new Utilizador(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome("Q#Kd.wBN");
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Sapatilhas sapatilhas0 = new Sapatilhas();
      // Undeclared exception!
      try { 
        utilizador0.adicionaVendas(sapatilhas0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }
}
