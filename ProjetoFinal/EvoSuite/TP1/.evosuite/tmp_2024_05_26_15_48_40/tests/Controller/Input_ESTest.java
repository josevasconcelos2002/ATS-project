/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 14:53:28 GMT 2024
 */

package Controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Controller.Input;
import View.Apresentacao;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Input_ESTest extends Input_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemInUtil.addInputLine("");
      Apresentacao apresentacao0 = new Apresentacao();
      Input input0 = new Input();
      int int0 = input0.lerInt(apresentacao0, "Controller.Input", (-2021392637), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemInUtil.addInputLine("PRODUTOS COMPRADOS");
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      int int0 = input0.lerInt(apresentacao0, "PRODUTOS COMPRADOS", (-1), 2425);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemInUtil.addInputLine("");
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      double double0 = input0.lerDouble(apresentacao0, "", (-2028409689), 1305);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Input input0 = new Input();
      SystemInUtil.addInputLine("N");
      Apresentacao apresentacao0 = new Apresentacao();
      String string0 = input0.lerString(apresentacao0, "N");
      assertEquals("N", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine("");
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      String string0 = input0.lerString(apresentacao0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Input input0 = new Input();
      SystemInUtil.addInputLine("9");
      Apresentacao apresentacao0 = new Apresentacao();
      int int0 = input0.lerInt(apresentacao0, "'me{S62f(1$", (-2021392643), 892);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      SystemInUtil.addInputLine("9");
      float float0 = input0.lerFloat(apresentacao0, "-", 9.0F, 9.0F);
      assertEquals(9.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      SystemInUtil.addInputLine("2");
      double double0 = input0.lerDouble(apresentacao0, ",;ytLd}}9c][X]>", 2, 2);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      // Undeclared exception!
      try { 
        input0.lerString(apresentacao0, "");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Input input0 = new Input();
      // Undeclared exception!
      try { 
        input0.lerSN((Apresentacao) null, "S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Input input0 = new Input();
      // Undeclared exception!
      try { 
        input0.lerInt((Apresentacao) null, "V<Hj", 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Input input0 = new Input();
      // Undeclared exception!
      try { 
        input0.lerFloat((Apresentacao) null, "N", 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Input input0 = new Input();
      // Undeclared exception!
      try { 
        input0.lerDouble((Apresentacao) null, "J>GWg&}@:U$o6:D", (-1), 1812);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Input input0 = new Input();
      // Undeclared exception!
      try { 
        input0.lerData((Apresentacao) null, "=LtI9@*9DG$3f{x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      SystemInUtil.addInputLine("");
      // Undeclared exception!
      try { 
        input0.lerData(apresentacao0, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("Controller.Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine("+------------------------------+");
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      // Undeclared exception!
      try { 
        input0.lerData(apresentacao0, "Qv");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      SystemInUtil.addInputLine("");
      float float0 = input0.lerFloat(apresentacao0, "9", (-1), 1.0F);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      SystemInUtil.addInputLine("7");
      // Undeclared exception!
      try { 
        input0.lerFloat(apresentacao0, "-", 9.0F, 9.0F);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Input input0 = new Input();
      SystemInUtil.addInputLine("5");
      Apresentacao apresentacao0 = new Apresentacao();
      // Undeclared exception!
      try { 
        input0.lerInt(apresentacao0, "N", (-5), (-5));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemInUtil.addInputLine("Descri\u00E7\u00E3o: ");
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      // Undeclared exception!
      try { 
        input0.lerInt(apresentacao0, "Descri\u00E7\u00E3o: ", 1, 1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemInUtil.addInputLine("+-----------------------------+");
      Apresentacao apresentacao0 = new Apresentacao();
      Input input0 = new Input();
      // Undeclared exception!
      try { 
        input0.lerDouble(apresentacao0, "+-----------------------------+", (-3524), (-3524));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      SystemInUtil.addInputLine("");
      input0.lerDouble(apresentacao0, "9", (-1), (-1));
      SystemInUtil.addInputLine("9");
      // Undeclared exception!
      try { 
        input0.lerFloat(apresentacao0, "9", (-1), 1.0F);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Input input0 = new Input();
      SystemInUtil.addInputLine("-");
      Apresentacao apresentacao0 = new Apresentacao();
      // Undeclared exception!
      try { 
        input0.lerDouble(apresentacao0, "-", 924, 924);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemInUtil.addInputLine("+------------------------------+");
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      // Undeclared exception!
      try { 
        input0.lerSN(apresentacao0, "+------------------------------+");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Input input0 = new Input();
      Apresentacao apresentacao0 = new Apresentacao();
      SystemInUtil.addInputLine("N");
      boolean boolean0 = input0.lerSN(apresentacao0, "DwEATA INV\u00C1IDA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Input input0 = new Input();
      SystemInUtil.addInputLine("S");
      Apresentacao apresentacao0 = new Apresentacao();
      boolean boolean0 = input0.lerSN(apresentacao0, ",%|Zx<'60@8QI%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Input input0 = new Input();
      // Undeclared exception!
      try { 
        input0.lerString((Apresentacao) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Controller.Input", e);
      }
  }
}
