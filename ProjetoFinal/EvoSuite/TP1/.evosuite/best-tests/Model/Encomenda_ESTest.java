/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 13:43:46 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Artigo;
import Model.Encomenda;
import Model.TShirt;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setCustosExpedicao((-1009.17067407));
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertEquals((-1009.17067407), encomenda0.getCustosExpedicao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      
      encomenda1.setPrecoFinal(1.0);
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda();
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertEquals(2, encomenda1.getId());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertFalse(boolean0);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<Artigo> list0 = encomenda0.getArtigos();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1548L));
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(2179);
      hashMap0.put(integer0, (String) null);
      Encomenda encomenda1 = new Encomenda("/", list0, 0.0, localDate0, hashMap0);
      encomenda1.getVendedores();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setTamanho(3);
      int int0 = encomenda0.getTamanho();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setTamanho((-1));
      int int0 = encomenda0.getTamanho();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPrecoFinal(1541.99761);
      double double0 = encomenda0.getPrecoFinal();
      assertEquals(1541.99761, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPrecoFinal((-3808.25744478298));
      double double0 = encomenda0.getPrecoFinal();
      assertEquals((-3808.25744478298), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      
      encomenda0.setId((-1));
      int int0 = encomenda0.getId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.PEQUENO;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      encomenda0.getEmbalagem();
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.getDono();
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertTrue(encomenda1.equals((Object)encomenda0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getDono();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<Artigo> list0 = encomenda0.getArtigos();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(4);
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Map<Integer, String> map0 = encomenda0.getVendedores();
      Encomenda encomenda1 = new Encomenda("", list0, 4413.664734108286, localDate0, map0);
      double double0 = encomenda1.getCustosExpedicao();
      assertEquals(2, encomenda1.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(4413.664734108286, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(4413.664734108286, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCustosExpedicao((-1685.436));
      double double0 = encomenda0.getCustosExpedicao();
      assertEquals((-1685.436), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setTamanho(2);
      encomenda0.clone();
      assertEquals(2, encomenda0.getTamanho());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setTamanho((-1));
      encomenda0.clone();
      assertEquals((-1), encomenda0.getTamanho());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPrecoFinal(954.2283139);
      encomenda0.clone();
      assertEquals(954.2283139, encomenda0.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPrecoFinal((-3808.25744478298));
      encomenda0.clone();
      assertEquals((-3808.25744478298), encomenda0.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      
      encomenda0.setId(0);
      encomenda0.clone();
      assertEquals(0, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setId((-367));
      encomenda0.clone();
      assertEquals((-367), encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCustosExpedicao(0.5);
      encomenda0.clone();
      assertEquals(0.5, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCustosExpedicao((-1009.17067407));
      encomenda0.clone();
      assertEquals((-1009.17067407), encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      // Undeclared exception!
      try { 
        encomenda0.setVendedores((Map<Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      // Undeclared exception!
      try { 
        encomenda0.setArtigos((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setDataCriacao((LocalDate) null);
      // Undeclared exception!
      try { 
        encomenda1.equals(encomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.of(1, 1, 1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda("RK<c%p,", (List<Artigo>) null, 0.0, localDate0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      TShirt tShirt0 = new TShirt();
      linkedList0.addFirst(tShirt0);
      encomenda0.setArtigos(linkedList0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getEstado();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      int int0 = encomenda0.getId();
      assertEquals(1, int0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getDataCriacao();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      double double0 = encomenda0.getPrecoFinal();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      double double0 = encomenda0.getCustosExpedicao();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getPrazoLimite();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getEmbalagem();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      int int0 = encomenda0.getTamanho();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, int0);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-24L));
      encomenda0.setDataCriacao(localDate0);
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = Encomenda.Estado_Encomenda.EXPEDIDA;
      encomenda1.setEstado(encomenda_Estado_Encomenda0);
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setCustosExpedicao(2026.7905422426475);
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertEquals(2026.7905422426475, encomenda1.getCustosExpedicao(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertTrue(boolean0);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.MEDIO;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda();
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, encomenda1.getTamanho());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<Artigo> list0 = encomenda0.getArtigos();
      boolean boolean0 = encomenda0.equals(list0);
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      boolean boolean0 = encomenda0.equals((Object) null);
      assertEquals(0, encomenda0.getTamanho());
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      boolean boolean0 = encomenda0.equals(encomenda0);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertTrue(boolean0);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setPrecoFinal(1.0);
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertFalse(boolean0);
      assertEquals(1.0, encomenda0.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1238L);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(0);
      Encomenda encomenda0 = new Encomenda("#!l", linkedList0, 0.0, localDate0, hashMap0);
      encomenda0.getDono();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDataCriacao((LocalDate) null);
      encomenda0.getDataCriacao();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      encomenda0.setVendedores(hashMap0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPrazoLimite((LocalDate) null);
      encomenda0.getPrazoLimite();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDono("");
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      // Undeclared exception!
      try { 
        encomenda1.getVendedores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
