/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 14:22:03 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.IsoChronology;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gestor_Artigos_ESTest extends Gestor_Artigos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), 1852, 0L, 0L, 1062, "\n", 1062, boolean0, 0L);
      String string0 = gestor_Artigos0.pesquisar_artigos_ano_colecao(1852);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-762));
      gestor_Artigos0.criar_artigo_sapatilhas("Gestor_Artigos", "lHaB7-NgY@jws@", 0.01, true, (-762), (-762), long0, 24L, 10, true, "lHaB7-NgY@jws@", 732, true, 264.8);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas(1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>(6398, 6398);
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("", "", 6398, true, 0, 6398, 6398, long0, tamanho0, padrao0);
      gestor_Artigos0.alteraDataToInicio("A1");
      assertEquals(0.25, gestor_Artigos0.getTaxaUsado(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), (-1), 0L, (-20L), 1069, "d1", 1069, boolean0, 0.0F);
      long long0 = gestor_Artigos0.tirar_disponivel_artigo("A1");
      assertEquals((-20L), long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), true, 1, 0, long0, (-1272L), 0, false, "", 1, false, 2655.543378);
      Long long1 = gestor_Artigos0.id_artigo_para_id_vendedor("A1");
      assertEquals((-1272L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala((String) null, (String) null, 0.0, false, 0, 0, (-836L), (-836L), 0, (String) null, 0, boolean0, (-836L));
      gestor_Artigos0.criar_artigo_mala("", "F~X-E;fA1", 0.0, false, 1062, 0, 0L, 0L, 1062, " AriBos: ", 1062, boolean0, 1062);
      Long long0 = gestor_Artigos0.id_artigo_para_id_vendedor("A2");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf(true);
      gestor_Artigos0.criar_artigo_mala(";^/OB)B`", "TGJb3[nsa|C,TmR", 0.0, true, 1872, 3653, 1872, 31L, (-1797534633), "TGJb3[nsa|C,TmR", 1872, boolean0, (-517.5504F));
      Long long0 = gestor_Artigos0.id_artigo_para_id_vendedor("A1");
      assertEquals(31L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), 1852, 0L, 0L, 1069, "\n", 1069, boolean0, 0L);
      Long long0 = gestor_Artigos0.id_artigo_para_id_transportadora("A1");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), false, 1, 0, long0, (-1272L), 0, false, "", 1, false, 2655.543378);
      Long long1 = gestor_Artigos0.id_artigo_para_id_transportadora("A1");
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>(6398, 6398);
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("", "", 6398, true, 0, 6398, 6398, long0, tamanho0, padrao0);
      Long long1 = gestor_Artigos0.id_artigo_para_id_transportadora("A1");
      assertEquals(6398L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Gestor_Artigos.setTaxaUsado(0.0);
      double double0 = Gestor_Artigos.getTaxaUsado();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Gestor_Artigos.setTaxaNovo((-1730));
      double double0 = Gestor_Artigos.getTaxaNovo();
      assertEquals((-1730.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), 1852, 0L, 0L, 1069, "\n", 1069, boolean0, 0L);
      long long0 = gestor_Artigos0.colocar_disponivel_artigo("A1");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala((String) null, (String) null, (-20.353847558558314), false, 0, 0, (-836L), (-836L), 0, (String) null, 0, boolean0, (-836L));
      long long0 = gestor_Artigos0.colocar_disponivel_artigo("A1");
      assertEquals((-836L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), true, 1, 0, long0, (-1272L), 0, false, "", 1, false, 2655.543378);
      String string0 = gestor_Artigos0.artigoToString("A1");
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: $|} Marca: $|} Pre\u00E7o base: -1272.0 Novo: true Estado de uso: 1 N\u00FAmero de utilizadores: 0 Disponivel: true Id da transportadora: -1272 Id do vendedor: -1272 } Tamanho: 0 Atacadores: false Cor:  Data da Cole\u00E7\u00E3o: 1 Premium: false Desconto: 2655.543378}", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), true, 1, 0, long0, (-1272L), 0, false, "", 1, false, 2655.543378);
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_novo_sapatilhas((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala((String) null, (String) null, 0.0, false, 0, 0, (-836L), (-836L), 0, (String) null, 0, boolean0, (-836L));
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_novo_mala((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = new Boolean("SX](2Nc|=O3S@cdS");
      gestor_Artigos0.criar_artigo_mala((String) null, "SX](2Nc|=O3S@cdS", 1.0, false, (-1), (-1), (-1), 0L, (-3990), (String) null, 0, boolean0, (-663.51F));
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_material("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("lHaB7-NgY@jws@", (String) null, (-1), false, (-1982292596), (-1), (-1), long0, tamanho0, padrao0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_marca_tshirt("\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>(6398, 6398);
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      gestor_Artigos0.criar_artigo_sapatilhas("s", (String) null, 0, false, (-2147483645), 0, long0, (-241L), (-2147483645), true, "s", 6398, true, 572.7648659099851);
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_marca_sapatilha("'L8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala((String) null, (String) null, 0.0, false, 0, 0, (-836L), (-836L), 0, (String) null, 0, boolean0, (-836L));
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_marca_mala("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long((-591));
      gestor_Artigos0.criar_artigo_sapatilhas("", "", (-2642.2), true, (-591), (-1), long0, 1558L, (-1797534633), true, (String) null, 2147483645, true, (-591));
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_cor("Dr:RK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = new Boolean(true);
      gestor_Artigos0.criar_artigo_mala("Y:-(/?0BT/7", "-z<Aww a", 0.0, false, 2028, (-1797534633), 2028, 2028, (-1797534633), "|Dr:RKS}#", 1, boolean0, 0.0F);
      // Undeclared exception!
      try { 
        gestor_Artigos0.mostrar_gestor((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Mala", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.riscas;
      // Undeclared exception!
      try { 
        gestor_Artigos0.criar_artigo_tshirt("@.Z1", "@.Z1", 0.0, true, 5, (-3475), (-1L), (Long) null, tamanho0, padrao0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.criar_artigo_sapatilhas("VX/ZBgC6v/Jv)Y4IhF'", "m&*3SHR{L[", 0.0, false, 0, 0, (Long) null, 1954L, (-3442), false, "m&*3SHR{L[", 0, false, 100.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.criar_artigo_mala("\n", "\n", 0.0, true, (-3217), 0, 0, (-3217), 45, "v(A%ZHz#&Coih+", (-1110), (Boolean) null, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Gestor_Artigos gestor_Artigos1 = null;
      try {
        gestor_Artigos1 = new Gestor_Artigos(gestor_Artigos0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-400L));
      // Undeclared exception!
      try { 
        gestor_Artigos0.entreDatas(set0, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-504));
      int int0 = gestor_Artigos0.entreDatas(set0, localDate0, localDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@|ws@", "|Dr:RK#", 2955.333065430282, true, (-1), 1852, 0L, 0L, 1069, "\n", 1069, boolean0, 0L);
      double double0 = gestor_Artigos0.vintageFaturou();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Period period0 = Period.ofMonths(2027);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.precoFaturouTempo(set0, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.removeTudo();
      LocalDate localDate0 = MockLocalDate.now();
      double double0 = gestor_Artigos0.precoFaturouTempo(set0, localDate0, localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Month month0 = Month.AUGUST;
      LocalDate localDate0 = MockLocalDate.of(550, month0, 10);
      // Undeclared exception!
      try { 
        gestor_Artigos0.precoFaturou(set0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      double double0 = gestor_Artigos0.precoFaturou(linkedHashSet0, (LocalDate) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1272L));
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      // Undeclared exception!
      try { 
        gestor_Artigos0.vendaTotal(set0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      double double0 = gestor_Artigos0.vendaTotal(linkedHashSet0, (LocalDate) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Dimensao dimensao0 = Dimensao.Pequeno;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2093L));
      Encomenda encomenda0 = new Encomenda(set0, 0L, dimensao0, localDate0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.alteraData(encomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>(6398, 6398);
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Encomenda encomenda0 = new Encomenda();
      gestor_Artigos0.alteraData(encomenda0);
      assertEquals((-1L), encomenda0.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("|Dr:RK#", "\n", 1852, false, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      long long1 = gestor_Artigos0.colocar_disponivel_artigo("A1");
      assertEquals(1069L, long1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      try { 
        gestor_Artigos0.colocar_disponivel_artigo("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o existe!
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      try { 
        gestor_Artigos0.tirar_disponivel_artigo("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o existe!
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, 26, 1852, 0L, 0L, 1066, "\n", 1066, boolean0, 0L);
      String string0 = gestor_Artigos0.pesquisar_artigos_ano_colecao(1066);
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: lHaB7-NgY@jws@ Marca: |Dr:RK# Pre\u00E7o base: 2955.333065430282 Novo: true Estado de uso: 26 N\u00FAmero de utilizadores: 1852 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Dimens\u00E3o: 1066 Material: \n Ano da Cole\u00E7\u00E3o: 1066 Premium: true Valoriza\u00E7\u00E3o: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), 1852, 0L, 0L, 1069, "\n", 1069, boolean0, 0L);
      String string0 = gestor_Artigos0.pesquisar_artigos_ano_colecao((-1648163379));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      String string0 = gestor_Artigos0.criar_artigo_tshirt("lHaB7-NgY@jws@", (String) null, (-1), false, (-1982292596), (-1), (-1), long0, tamanho0, padrao0);
      String string1 = gestor_Artigos0.pesquisar_artigos_ano_colecao((-1073741822));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), 1852, 0L, 0L, 1069, "\n", 1069, boolean0, 0L);
      String string0 = gestor_Artigos0.pesquisar_artigos_material("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@|ws@", "|Dr:RK#", 2955.333065430282, true, (-1), 1852, 0L, 0L, 1069, "\n", 1069, boolean0, 0L);
      String string0 = gestor_Artigos0.pesquisar_artigos_material("\n");
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: lHaB7-NgY@|ws@ Marca: |Dr:RK# Pre\u00E7o base: 2955.333065430282 Novo: true Estado de uso: -1 N\u00FAmero de utilizadores: 1852 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Dimens\u00E3o: 1069 Material: \n Ano da Cole\u00E7\u00E3o: 1069 Premium: false Valoriza\u00E7\u00E3o: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("lHaB7-NgY@jws@", (String) null, 1852, false, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_material("A1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      Padrao padrao1 = Padrao.riscas;
      gestor_Artigos0.criar_artigo_tshirt("A1", "lHaB7-NgY@jws@", 0L, false, 3, (-1884), 1130L, long0, tamanho0, padrao1);
      String string0 = gestor_Artigos0.pesquisar_artigos_padrao(padrao0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), false, 1, 0, long0, (-1272L), 0, false, "", 1, false, 2655.543378);
      Padrao padrao0 = Padrao.palmeiras;
      String string0 = gestor_Artigos0.pesquisar_artigos_padrao(padrao0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("|Dr:RK#", "\n", 1852, false, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_padrao(padrao0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: |Dr:RK# Marca: \n Pre\u00E7o base: 1852.0 Novo: false Estado de uso: -1982292596 N\u00FAmero de utilizadores: 1852 Disponivel: true Id da transportadora: -1 Id do vendedor: 1069 } Tamanho: S Padr\u00E3o: palmeiras}\n", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(199);
      gestor_Artigos0.criar_artigo_sapatilhas("", "", 0.25, false, 199, 0, long0, 1554L, 3241, false, "", 199, true, 0.0);
      String string0 = gestor_Artigos0.pesquisar_artigos_cor("*%Q.NMaP");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(199);
      gestor_Artigos0.criar_artigo_sapatilhas("", "", 0.25, true, 199, 0, long0, 1554L, 3241, true, "", 199, true, 0.0);
      String string0 = gestor_Artigos0.pesquisar_artigos_cor("");
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Marca:  Pre\u00E7o base: 0.25 Novo: true Estado de uso: 199 N\u00FAmero de utilizadores: 0 Disponivel: true Id da transportadora: 199 Id do vendedor: 1554 } Tamanho: 3241 Atacadores: true Cor:  Data da Cole\u00E7\u00E3o: 199 Premium: true Desconto: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      String string0 = gestor_Artigos0.criar_artigo_mala((String) null, (String) null, (-20.353847558558314), false, 0, 0, (-836L), (-836L), 0, (String) null, 0, boolean0, (-836L));
      String string1 = gestor_Artigos0.pesquisar_artigos_cor("Dg2yW$lq\"65y^^<K");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("lHaB7-NgY@jws@", (String) null, 1852, false, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      Tamanho tamanho1 = Tamanho.M;
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho__tshit(tamanho1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(199);
      gestor_Artigos0.criar_artigo_sapatilhas("", "", 0.25, true, 199, 0, long0, 1554L, 3241, true, "", 199, true, 0.0);
      Tamanho tamanho0 = Tamanho.M;
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho__tshit(tamanho0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("|Dr:RK#", "\n", 1852, false, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho__tshit(tamanho0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: |Dr:RK# Marca: \n Pre\u00E7o base: 1852.0 Novo: false Estado de uso: -1982292596 N\u00FAmero de utilizadores: 1852 Disponivel: true Id da transportadora: -1 Id do vendedor: 1069 } Tamanho: S Padr\u00E3o: palmeiras}\n", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), true, 1, 0, long0, (-1272L), 0, false, "", 1, false, 2655.543378);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas(0);
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: $|} Marca: $|} Pre\u00E7o base: -1272.0 Novo: true Estado de uso: 1 N\u00FAmero de utilizadores: 0 Disponivel: true Id da transportadora: -1272 Id do vendedor: -1272 } Tamanho: 0 Atacadores: false Cor:  Data da Cole\u00E7\u00E3o: 1 Premium: false Desconto: 2655.543378}\n", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), true, 1, 0, long0, (-1272L), 0, false, "", 1, false, 2655.543378);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas(981);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), (-1), 0L, 271L, 1069, "d1", 1069, boolean0, 0.0F);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas((-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala((String) null, (String) null, (-20.353847558558314), false, 0, 0, (-836L), (-836L), 0, (String) null, 0, boolean0, (-836L));
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_mala(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), (-1), 0L, 271L, 1069, "d1", 1069, boolean0, 0.0F);
      long long0 = gestor_Artigos0.tirar_disponivel_artigo("A1");
      assertEquals(271L, long0);
      
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_mala(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), (-1), 0L, 271L, 1069, "d1", 1069, boolean0, 0.0F);
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_mala(boolean0);
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: lHaB7-NgY@jws@ Marca: |Dr:RK# Pre\u00E7o base: 2955.333065430282 Novo: true Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: true Id da transportadora: 0 Id do vendedor: 271 } Dimens\u00E3o: 1069 Material: d1 Ano da Cole\u00E7\u00E3o: 1069 Premium: true Valoriza\u00E7\u00E3o: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      String string0 = gestor_Artigos0.criar_artigo_tshirt("|Dr:RK#", "\n", 1852, false, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      String string1 = gestor_Artigos0.pesquisar_artigos_novo_mala(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("|Dr:RK#", (String) null, 1852, true, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_tshirt(boolean0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: |Dr:RK# Marca: null Pre\u00E7o base: 1852.0 Novo: true Estado de uso: -1982292596 N\u00FAmero de utilizadores: 1852 Disponivel: true Id da transportadora: -1 Id do vendedor: 1069 } Tamanho: S Padr\u00E3o: palmeiras}\n", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("|Dr:RK#", "\n", 1852, false, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_tshirt(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), true, 1, 0, long0, (-1272L), 0, false, "", 1, false, 2655.543378);
      Boolean boolean0 = Boolean.FALSE;
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_tshirt(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("|Dr:RK#", "\n", 1852, false, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_novo_tshirt((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), (-1), 0L, 271L, 1069, "d1", 1069, boolean0, 0.0F);
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_sapatilhas(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), false, 1, 0, long0, (-1272L), 0, false, "", 1, false, (-1272L));
      Boolean boolean0 = Boolean.FALSE;
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_sapatilhas(boolean0);
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: $|} Marca: $|} Pre\u00E7o base: -1272.0 Novo: false Estado de uso: 1 N\u00FAmero de utilizadores: 0 Disponivel: true Id da transportadora: -1272 Id do vendedor: -1272 } Tamanho: 0 Atacadores: false Cor:  Data da Cole\u00E7\u00E3o: 1 Premium: false Desconto: -1272.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@|ws@", "|Dr:RK#", 2955.333065430282, true, (-1), 1852, 0L, 0L, 1069, "\n", 1069, boolean0, 0L);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_mala("|Dr:RK#");
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: lHaB7-NgY@|ws@ Marca: |Dr:RK# Pre\u00E7o base: 2955.333065430282 Novo: true Estado de uso: -1 N\u00FAmero de utilizadores: 1852 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Dimens\u00E3o: 1069 Material: \n Ano da Cole\u00E7\u00E3o: 1069 Premium: false Valoriza\u00E7\u00E3o: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      String string0 = gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), (-1), 0L, 0L, 1069, "d1", 1069, boolean0, 0.0F);
      gestor_Artigos0.tirar_disponivel_artigo("A1");
      String string1 = gestor_Artigos0.pesquisar_artigos_marca_mala("lHaB7-NgY@jws@");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), (-1), 0L, 0L, 1069, "d1", 1069, boolean0, 0.0F);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_mala("j4I;GI[`G0u!");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("lHaB7-NgY@jws@", "\n", 1852, false, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_mala("\n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("\n", "", 1852, false, 2183, (-1202), 0L, long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_tshirt("");
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: \n Marca:  Pre\u00E7o base: 1852.0 Novo: false Estado de uso: 2183 N\u00FAmero de utilizadores: -1202 Disponivel: true Id da transportadora: 0 Id do vendedor: 1069 } Tamanho: S Padr\u00E3o: palmeiras}\n", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      String string0 = gestor_Artigos0.criar_artigo_mala((String) null, (String) null, 0.0, false, 0, 0, (-836L), (-836L), 0, (String) null, 0, boolean0, (-836L));
      String string1 = gestor_Artigos0.pesquisar_artigos_marca_tshirt("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(1069);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("|Dr:RK#", "\n", 1852, false, (-1982292596), 1852, (-1), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_tshirt("DbU=Uk*==;M~(@J");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), false, 1, 0, long0, (-1272L), 0, false, "", 1, false, (-1272L));
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_sapatilha("A1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.palmeiras;
      String string0 = gestor_Artigos0.criar_artigo_tshirt("", "", 6398, true, 0, 6398, 6398, long0, tamanho0, padrao0);
      String string1 = gestor_Artigos0.pesquisar_artigos_marca_sapatilha("'L8");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), false, 1, 0, long0, (-1272L), 0, false, "", 1, false, (-1272L));
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_sapatilha("$|}");
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: $|} Marca: $|} Pre\u00E7o base: -1272.0 Novo: false Estado de uso: 1 N\u00FAmero de utilizadores: 0 Disponivel: true Id da transportadora: -1272 Id do vendedor: -1272 } Tamanho: 0 Atacadores: false Cor:  Data da Cole\u00E7\u00E3o: 1 Premium: false Desconto: -1272.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos1 = new Gestor_Artigos(hashMap0);
      boolean boolean0 = gestor_Artigos0.equals(gestor_Artigos1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      boolean boolean0 = gestor_Artigos0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      boolean boolean0 = gestor_Artigos0.equals(gestor_Artigos0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      boolean boolean0 = gestor_Artigos0.equals("A%7|0CqDi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      boolean boolean0 = gestor_Artigos0.pesquisar_artigo_id("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf(true);
      gestor_Artigos0.criar_artigo_mala(";^/OB)B`", "TGJb3[nsa|C,TmR", 0.0, true, 1872, 3653, 1872, 31L, (-1797534633), "TGJb3[nsa|C,TmR", 1872, boolean0, (-517.5504F));
      boolean boolean1 = gestor_Artigos0.pesquisar_artigo_id("A1");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>(6398, 6398);
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("", "", 6398, true, 0, 6398, 6398, long0, tamanho0, padrao0);
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      String string0 = gestor_Artigos0.mostrar_gestor(localDate0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Marca:  Pre\u00E7o base: 6398.0 Novo: true Estado de uso: 0 N\u00FAmero de utilizadores: 6398 Disponivel: true Id da transportadora: 6398 Id do vendedor: 0 } Tamanho: L Padr\u00E3o: palmeiras} Pre\u00E7o atual: 6398.00\u20AC \n\n", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1272L));
      String string0 = gestor_Artigos0.mostrar_gestor(localDate0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("lHaB7-NgY@jws@", "|Dr:RK#", 2955.333065430282, true, (-1), (-1), 0L, 0L, 1069, "d1", 1069, boolean0, 0.0F);
      gestor_Artigos0.tirar_disponivel_artigo("A1");
      String string0 = gestor_Artigos0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), false, 1, 0, long0, (-1272L), 0, false, "", 1, false, (-1272L));
      Map<String, Artigo> map0 = gestor_Artigos0.getArtigos();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Map<String, Artigo> map0 = gestor_Artigos0.getArtigos();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("HaB7-NgY@jws@", "Dr:RK", 2955.333065430282, true, (-22), (-22), 0L, 0L, 1069, "d1", 1069, boolean0, 0.0F);
      String string0 = gestor_Artigos0.toString();
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: HaB7-NgY@jws@ Marca: Dr:RK Pre\u00E7o base: 2955.333065430282 Novo: true Estado de uso: -22 N\u00FAmero de utilizadores: -22 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Dimens\u00E3o: 1069 Material: d1 Ano da Cole\u00E7\u00E3o: 1069 Premium: true Valoriza\u00E7\u00E3o: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = Gestor_Artigos.getTaxaNovo();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      gestor_Artigos0.setArtigos((Map<String, Artigo>) null);
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas(981);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      // Undeclared exception!
      try { 
        gestor_Artigos0.id_artigo_para_id_transportadora("aO`+?HN-I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = Gestor_Artigos.getTaxaUsado();
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.artigoToString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>(6398, 6398);
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos((Map<Integer, Artigo>) null);
      Long long0 = new Long((-1272L));
      gestor_Artigos0.criar_artigo_sapatilhas("$|}", "$|}", (-1272L), true, 1, 0, long0, (-1272L), 0, false, "", 1, false, 2655.543378);
      Boolean boolean0 = Boolean.FALSE;
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_sapatilhas(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Gestor_Artigos.setTaxaNovo(0.0);
      double double0 = Gestor_Artigos.getTaxaNovo();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.alteraDataToInicio("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.id_artigo_para_id_vendedor("j4I;GI[`G0u!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Artigos", e);
      }
  }
}
