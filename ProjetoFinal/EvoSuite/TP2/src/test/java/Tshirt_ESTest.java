/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 14:35:41 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tshirt_ESTest extends Tshirt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long((-13));
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("RXLnJ\"~e?,i", "RXLnJ\"~e?,i", (-21.804438189948083), false, (-13), (-13), long0, long0, tamanho0, padrao0);
      LocalDate localDate0 = tshirt0.getData_venda();
      double double0 = tshirt0.preco_atual(localDate0);
      assertEquals((-10.902219094974042), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = new Long((-1));
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.palmeiras;
      Tshirt tshirt0 = new Tshirt("VC{}2#<AWfK`.7>", "VC{}2#<AWfK`.7>", 1.0, false, (-1), (-1), long0, long0, tamanho0, padrao0);
      Tamanho tamanho1 = tshirt0.getTamanho();
      assertSame(tamanho0, tamanho1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      tshirt0.getPadrao();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = Long.getLong("", 0L);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("", "", (-1.0), true, 0, 0, long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = tshirt0.clone();
      assertEquals(Padrao.riscas, tshirt1.getPadrao());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(5037L);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("zN4", "zN4", 3338.9451990723, false, 3801, 3801, long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = tshirt0.clone();
      assertEquals(3801, tshirt1.getEstado_uso());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      Artigo.contador = 0L;
      Tshirt tshirt1 = tshirt0.clone();
      assertEquals(0L, tshirt1.getContador());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.M;
      Padrao padrao0 = Padrao.palmeiras;
      Tshirt tshirt0 = new Tshirt("", "T-shirt:: {", 1.0, false, 4267, 241, long0, long0, tamanho0, padrao0);
      Artigo.setContador((-3969L));
      Tshirt tshirt1 = tshirt0.clone();
      assertEquals(Padrao.palmeiras, tshirt1.getPadrao());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      // Undeclared exception!
      try { 
        tshirt0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Tshirt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      LocalDate localDate0 = tshirt0.getData_venda();
      // Undeclared exception!
      try { 
        tshirt0.preco_atual(localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Tshirt", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      Tshirt tshirt1 = tshirt0.clone();
      // Undeclared exception!
      try { 
        tshirt1.equals(tshirt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Tshirt", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = Long.getLong("$VALUES");
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.palmeiras;
      Tshirt tshirt0 = null;
      try {
        tshirt0 = new Tshirt("$VALUES", "Artigo:: {", 1.0, false, 0, 0, (Long) null, long0, tamanho0, padrao0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tshirt tshirt0 = null;
      try {
        tshirt0 = new Tshirt((Tshirt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Long long0 = new Long((-1));
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.palmeiras;
      Tshirt tshirt0 = new Tshirt("VC{}2#<AWfK`.7>", "VC{}2#<AWfK`.7>", 1.0, false, (-1), (-1), long0, long0, tamanho0, padrao0);
      Padrao padrao1 = tshirt0.getPadrao();
      assertSame(padrao0, padrao1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      tshirt0.getTamanho();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long((-13));
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("RXLnJ\"~e?,i", "RXLnJ\"~e?,i", (-21.804438189948083), false, (-13), (-13), long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = new Tshirt(tshirt0);
      assertEquals((-13L), tshirt1.getIdVendedor());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Long long0 = new Long(0);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("RXLnJ\"~e?,i", "RXLnJ\"~e?,i", 0.0, false, 0, 0, long0, long0, tamanho0, padrao0);
      LocalDate localDate0 = tshirt0.getData_venda();
      tshirt0.setNovo(true);
      double double0 = tshirt0.preco_atual(localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long(219);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.liso;
      Tshirt tshirt0 = new Tshirt("Padro: ", "Padro: ", 1824.33574, true, 219, 219, long0, long0, tamanho0, padrao0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2L);
      double double0 = tshirt0.preco_atual(localDate0);
      assertEquals(1824.33574, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Long long0 = new Long(0);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("RXLnJ\"~e?,i", "RXLnJ\"~e?,i", 0.0, false, 0, 0, long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = tshirt0.clone();
      boolean boolean0 = tshirt0.equals(tshirt1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = new Long(0);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("RXLnJ\"~e?,i", "RXLnJ\"~e?,i", 0.0, false, 0, 0, long0, long0, tamanho0, padrao0);
      Tamanho tamanho1 = Tamanho.L;
      tshirt0.setTamanho(tamanho1);
      Tshirt tshirt1 = tshirt0.clone();
      assertTrue(tshirt1.equals((Object)tshirt0));
      
      tshirt1.setTamanho(tamanho0);
      boolean boolean0 = tshirt1.equals(tshirt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      Tshirt tshirt1 = new Tshirt();
      boolean boolean0 = tshirt0.equals(tshirt1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Long long0 = new Long(0);
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("RXLnJ\"~e?,i", "RXLnJ\"~e?,i", 0.0, false, 0, 0, long0, long0, tamanho0, padrao0);
      boolean boolean0 = tshirt0.equals(padrao0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Long long0 = new Long((-13));
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("RXLnJ\"~e?,i", "RXLnJ\"~e?,i", (-21.804438189948083), false, (-13), (-13), long0, long0, tamanho0, padrao0);
      boolean boolean0 = tshirt0.equals(tshirt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Long long0 = new Long((-13));
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("RXLnJ\"~e?,i", "RXLnJ\"~e?,i", (-21.804438189948083), false, (-13), (-13), long0, long0, tamanho0, padrao0);
      tshirt0.setPadrao(padrao0);
      assertEquals((-13), tshirt0.getN_utilizadores());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Long long0 = new Long((-13));
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("RXLnJ\"~e?,i", "RXLnJ\"~e?,i", (-21.804438189948083), false, (-13), (-13), long0, long0, tamanho0, padrao0);
      String string0 = tshirt0.toString();
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: RXLnJ\"~e?,i Marca: RXLnJ\"~e?,i Pre\u00E7o base: -21.804438189948083 Novo: false Estado de uso: -13 N\u00FAmero de utilizadores: -13 Disponivel: true Id da transportadora: -13 Id do vendedor: -13 } Tamanho: S Padr\u00E3o: riscas}", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tshirt tshirt0 = new Tshirt();
      boolean boolean0 = tshirt0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Long long0 = new Long((-13));
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.riscas;
      Tshirt tshirt0 = new Tshirt("RXLnJ\"~e?,i", "RXLnJ\"~e?,i", (-21.804438189948083), false, (-13), (-13), long0, long0, tamanho0, padrao0);
      Tshirt tshirt1 = tshirt0.clone();
      assertTrue(tshirt1.equals((Object)tshirt0));
      
      Padrao padrao1 = Padrao.palmeiras;
      tshirt1.setPadrao(padrao1);
      boolean boolean0 = tshirt0.equals(tshirt1);
      assertFalse(boolean0);
  }
}
