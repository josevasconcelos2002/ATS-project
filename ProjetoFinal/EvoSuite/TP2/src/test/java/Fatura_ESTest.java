/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 14:34:42 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fatura_ESTest extends Fatura_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.atualizaFatura("", 698L, 0.0, 1989.790956119);
      assertEquals(1989.790956119, fatura0.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.precoFinal = (double) 1049L;
      fatura0.atualizaFatura("", 0.0, 1049.0, 2L);
      assertEquals(1049.0, fatura0.alteracaoPreco, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, (-1038L), (-1038L), set0, 0L, (-1.0), 0.0);
      fatura1.atualizaFatura("h~A\"01J", 0.0, (-781.1517), (-781.1517));
      assertEquals((-781.1517), fatura1.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, 2276L, 2276L, set0, 0.0, (-1.0), 0L);
      fatura1.toString();
      assertEquals(3L, fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      
      fatura0.precoFinal = (double) 1046L;
      fatura0.toString();
      assertEquals(2L, fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      
      fatura0.setAlteracaoPreco((-1.0));
      fatura0.toString();
      assertEquals((-1.0), fatura0.alteracaoPreco, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertEquals(0L, fatura0.nifComprador);
      
      fatura0.nifComprador = 1049L;
      fatura0.toString();
      assertEquals(0L, fatura0.getIdEncomenda());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura1 = new Fatura(false, 1L, 0L, linkedHashSet0, 0.0, 0.0, (-1.0));
      fatura1.idEncomenda = 0L;
      fatura1.setId(1L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura1 = new Fatura(false, 1L, 0L, linkedHashSet0, 0.0, (-1.0), (-1.0));
      fatura0.custoProdutos = 1533.0;
      fatura1.idEncomenda = 0L;
      fatura1.setId(1L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(1533.0, fatura0.getCustoProdutos(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.clone();
      Fatura.criaCodigo();
      fatura0.precoFinal = (double) 1046L;
      Fatura fatura1 = fatura0.clone();
      fatura0.id = 4L;
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(4L, fatura0.getId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.clone();
      Fatura.criaCodigo();
      Fatura fatura1 = fatura0.clone();
      fatura0.id = 4L;
      fatura0.setAlteracaoPreco((-1.0));
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(4L, fatura0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura1 = new Fatura(false, 0L, (-1538L), linkedHashSet0, (-1.0), 0.0, (-426.709316479182));
      fatura1.setId(1L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura1 = new Fatura(false, 1L, 0L, linkedHashSet0, 0.0, (-814.88259), (-1.0));
      fatura1.setIdEncomenda((-195L));
      fatura1.setId(1L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.clone();
      Fatura.criaCodigo();
      fatura0.nifComprador = 1049L;
      Fatura fatura1 = fatura0.clone();
      fatura0.id = 4L;
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(1049L, fatura0.getNifComprador());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      assertEquals(2L, fatura0.getCodigo());
      
      Fatura.setCodigo((-1L));
      Fatura fatura1 = new Fatura(false, 938L, 0L, set0, 2061.97, 0.0, 938L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(0L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setNifComprador(0L);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(fatura0.compra);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0L, fatura0.nifComprador);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, (-3506L), 0L, set0, (-3506L), (-1569.32), 0.0);
      boolean boolean0 = fatura1.isCompra();
      assertEquals(3L, fatura0.getCodigo());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(true, 0L, 3438L, linkedHashSet0, (-301.2), 3438L, 3438L);
      double double0 = fatura0.getPrecoFinal();
      assertEquals(3438.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(3438.0, double0, 0.01);
      assertEquals(3438L, fatura0.nifComprador);
      assertEquals(0L, fatura0.idEncomenda);
      assertTrue(fatura0.compra);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals((-301.2), fatura0.custoProdutos, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      
      fatura0.precoFinal = (-1.0);
      double double0 = fatura0.getPrecoFinal();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(true, 1750L, 3108L, linkedHashSet0, 4332.5828754428, 1.0, 1475.0);
      long long0 = fatura0.getNifComprador();
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(3108L, long0);
      assertEquals(1.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(4332.5828754428, fatura0.custoProdutos, 0.01);
      assertEquals(1750L, fatura0.idEncomenda);
      assertTrue(fatura0.compra);
      assertEquals(1475.0, fatura0.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, (-1038L), (-1038L), set0, 0L, (-1.0), 0.0);
      long long0 = fatura1.getNifComprador();
      assertEquals(3L, fatura0.getCodigo());
      assertEquals((-1038L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, 938L, 0L, set0, 2061.97, 0.0, 938L);
      long long0 = fatura1.getIdEncomenda();
      assertEquals(3L, fatura0.getCodigo());
      assertEquals(938L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, (-1038L), (-1038L), set0, 0L, (-1.0), 0.0);
      long long0 = fatura1.getIdEncomenda();
      assertEquals(3L, fatura0.getCodigo());
      assertEquals((-1038L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertEquals(1L, fatura0.id);
      
      fatura0.id = 0L;
      fatura0.getId();
      assertEquals(0L, fatura0.getNifComprador());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      assertEquals(2L, fatura0.getCodigo());
      
      Fatura.setCodigo((-1L));
      Fatura fatura1 = new Fatura(false, 938L, 0L, set0, 2061.97, 0.0, 938L);
      long long0 = fatura1.getId();
      assertEquals(0L, fatura0.getCodigo());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 1L, 824L, linkedHashSet0, (-1761.43), 150.83229316, 150.83229316);
      double double0 = fatura0.getCustoProdutos();
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(824L, fatura0.nifComprador);
      assertEquals(150.83229316, fatura0.alteracaoPreco, 0.01);
      assertEquals(1L, fatura0.idEncomenda);
      assertEquals((-1761.43), double0, 0.01);
      assertFalse(fatura0.compra);
      assertEquals(150.83229316, fatura0.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fatura.setCodigo(0L);
      long long0 = Fatura.getCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fatura.setCodigo((-1L));
      long long0 = Fatura.getCodigo();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.atualizaFatura("", 0.0, 1049.0, 2L);
      fatura0.getArtigos();
      assertEquals(2.0, fatura0.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setAlteracaoPreco(1382.08411344582);
      double double0 = fatura0.getAlteracaoPreco();
      assertEquals(1382.08411344582, fatura0.alteracaoPreco, 0.01);
      assertEquals(1382.08411344582, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, (-3506L), 0L, set0, (-3506L), (-1569.32), 0.0);
      double double0 = fatura1.getAlteracaoPreco();
      assertEquals(3L, fatura0.getCodigo());
      assertEquals((-1569.32), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fatura.setCodigo(0L);
      long long0 = Fatura.criaCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fatura.setCodigo((-185L));
      long long0 = Fatura.criaCodigo();
      assertEquals((-185L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setIdEncomenda(1L);
      fatura0.clone();
      assertEquals(3L, fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, (-1L), 1343L, set0, 1.0, 0.0, 0.0);
      fatura1.clone();
      assertEquals(4L, fatura1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura.setCodigo(0L);
      fatura0.clone();
      assertEquals(1L, fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, (-1538L), linkedHashSet0, (-1.0), 0.0, (-426.709316479182));
      fatura0.clone();
      assertEquals(3L, fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertEquals(2L, fatura0.getCodigo());
      
      Fatura.setCodigo((-1L));
      fatura0.clone();
      assertEquals(0L, fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fatura.setCodigo((-185L));
      Fatura fatura0 = new Fatura();
      fatura0.clone();
      assertEquals((-183L), fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.alteracaoPreco = (-31.59540233754199);
      fatura0.clone();
      assertEquals((-31.59540233754199), fatura0.getAlteracaoPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fatura fatura0 = new Fatura(true, (-4728L), (-4728L), (Set<String>) null, 0.0, (-4728L), (-473.73));
      // Undeclared exception!
      try { 
        fatura0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      // Undeclared exception!
      try { 
        fatura0.setArtigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fatura fatura0 = new Fatura(false, 0L, 0L, (Set<String>) null, 2487.593892823, 0.0, 2487.593892823);
      // Undeclared exception!
      try { 
        fatura0.getArtigos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(false, 1L, 0L, (Set<String>) null, 0.0, 0.0, 0.0);
      fatura1.idEncomenda = 0L;
      fatura1.setId(1L);
      // Undeclared exception!
      try { 
        fatura0.equals(fatura1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fatura fatura0 = new Fatura(true, 1L, (-3339L), (Set<String>) null, 0.0, 978.6048104688135, (-3339L));
      // Undeclared exception!
      try { 
        fatura0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fatura fatura0 = new Fatura(true, 1L, 1L, (Set<String>) null, (-1.0), (-607.902), 1L);
      // Undeclared exception!
      try { 
        fatura0.atualizaFatura("L)t%Pz", 1L, 1L, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fatura fatura0 = new Fatura(true, 1146L, 1146L, (Set<String>) null, 0.0, 0.0, 0.0);
      Fatura fatura1 = null;
      try {
        fatura1 = new Fatura(fatura0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getCustoProdutos();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(fatura0.compra);
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0.0, fatura0.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getAlteracaoPreco();
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertFalse(fatura0.compra);
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.idEncomenda);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      long long0 = fatura0.getId();
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(fatura0.compra);
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(1L, long0);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0L, fatura0.idEncomenda);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      long long0 = fatura0.getNifComprador();
      assertEquals(0L, long0);
      assertEquals(0L, fatura0.idEncomenda);
      assertFalse(fatura0.compra);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getPrecoFinal();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertFalse(fatura0.compra);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      long long0 = fatura0.getIdEncomenda();
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0L, fatura0.nifComprador);
      assertFalse(fatura0.compra);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      boolean boolean0 = fatura0.isCompra();
      assertEquals(0L, fatura0.idEncomenda);
      assertFalse(boolean0);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setId(0L);
      Fatura fatura1 = fatura0.clone();
      fatura1.setPrecoFinal(1676.418142);
      fatura1.setId(0L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(0L, fatura0.id);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      fatura0.setId(0L);
      Fatura fatura1 = new Fatura(false, 0L, 0L, linkedHashSet0, 0L, (-5075.1537615052), 0L);
      fatura1.setId(0L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(0L, fatura0.id);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura();
      fatura1.setCustoProdutos(1L);
      fatura0.setId(2L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(2L, fatura0.id);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura();
      fatura0.setId(2L);
      fatura0.setNifComprador(2L);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(2L, fatura0.nifComprador);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fatura.setCodigo(0L);
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setCompra(true);
      fatura0.setId(1L);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(1L, fatura0.id);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura1 = new Fatura(false, 1L, 1L, linkedHashSet0, 0L, 0.0, 1.0);
      fatura0.setId(0L);
      fatura1.setId(0L);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(0L, fatura0.id);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Object object0 = new Object();
      boolean boolean0 = fatura0.equals(object0);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.nifComprador);
      assertFalse(boolean0);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(fatura0.compra);
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      boolean boolean0 = fatura0.equals((Object) null);
      assertFalse(fatura0.compra);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertFalse(boolean0);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0L, fatura0.idEncomenda);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      boolean boolean0 = fatura0.equals(fatura0);
      assertFalse(fatura0.compra);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertTrue(boolean0);
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.idEncomenda);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      
      fatura0.setCustoProdutos(1L);
      double double0 = fatura0.getCustoProdutos();
      assertEquals(1.0, fatura0.custoProdutos, 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura1 = new Fatura(false, 1L, 1L, linkedHashSet0, 0L, 0.0, 1.0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(3L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = Fatura.getCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.atualizaFatura("", 0.0, 1049.0, 2L);
      fatura0.clone();
      assertEquals(3L, fatura0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      fatura0.setArtigos(set0);
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.idEncomenda);
      assertFalse(fatura0.compra);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.clone();
      Fatura.criaCodigo();
      Fatura fatura1 = fatura0.clone();
      fatura1.atualizaFatura("", 0.0, 1049.0, 2L);
      fatura0.id = 4L;
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(5L, fatura0.getCodigo());
      assertFalse(boolean0);
  }
}
