/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 14:30:39 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadora_ESTest extends Transportadora_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.preco_transportadora3(2);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-4855.1888), (-4855.1888), 0.7, 847.4988306, 847.4988306, true, 1930);
      assertEquals((-4855.1888), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals(1930, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertTrue(transportadora0.isPremium());
      assertEquals(847.4988306, transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-4855.1888), transportadora0.getValor_medio(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(847.4988306, transportadora0.getMargemlucro(), 0.01);
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.preco_transportadora2((-3371));
      assertEquals((-4855.1888), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals(1930, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertTrue(transportadora0.isPremium());
      assertEquals(847.4988306, transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-4855.1888), transportadora0.getValor_medio(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(847.4988306, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.preco_transportadora2(5);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-4855.1888), (-4855.1888), 0.7, 847.4988306, 847.4988306, true, 1930);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-4855.1888), transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1930, transportadora0.getFormula());
      assertEquals(847.4988306, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(847.4988306, transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-4855.1888), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.preco_transportadora1(5);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-4855.1888), transportadora0.getValor_medio(), 0.01);
      assertEquals(1930, transportadora0.getFormula());
      assertEquals(847.4988306, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(847.4988306, transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-4855.1888), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals((-3.142237359363336E9), transportadora0.getTotalLucro(), 0.01);
      assertEquals((-3.142237359363336E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertNotNull(transportadora0);
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0, transportadora1.getFormula());
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setFormula((-606));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals((-606), transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals((-606), transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertNotNull(transportadora0);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setTotalLucro((-147.8495606361521));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-147.8495606361521), transportadora1.getTotalLucro(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-147.8495606361521), transportadora1.getTotalLucro(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("&Qn$X'm4", 1639.5610182121322, 0.7, 1639.5610182121322, 1639.5610182121322, (-2361.4646685342345), false, (-728));
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-728), transportadora0.getFormula());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1639.5610182121322, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-2361.4646685342345), transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("&Qn$X'm4", transportadora0.getNome());
      assertEquals(1639.5610182121322, transportadora0.getValor_grande(), 0.01);
      assertEquals(1639.5610182121322, transportadora0.getValor_pequenas(), 0.01);
      assertNotNull(transportadora0);
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-728), transportadora0.getFormula());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1639.5610182121322, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-2361.4646685342345), transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("&Qn$X'm4", transportadora0.getNome());
      assertEquals(1639.5610182121322, transportadora0.getValor_grande(), 0.01);
      assertEquals(1639.5610182121322, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-728), transportadora1.getFormula());
      assertEquals(1639.5610182121322, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("&Qn$X'm4", transportadora1.getNome());
      assertEquals(1639.5610182121322, transportadora1.getValor_grande(), 0.01);
      assertEquals((-2361.4646685342345), transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(1639.5610182121322, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.7, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertFalse(transportadora1.isPremium());
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora0.setMargemlucro((-728));
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-728), transportadora0.getFormula());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1639.5610182121322, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("&Qn$X'm4", transportadora0.getNome());
      assertEquals((-728.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(1639.5610182121322, transportadora0.getValor_grande(), 0.01);
      assertEquals(1639.5610182121322, transportadora0.getValor_pequenas(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertFalse(transportadora0.equals((Object)transportadora1));
      
      Transportadora transportadora2 = transportadora1.clone();
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-728), transportadora0.getFormula());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1639.5610182121322, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("&Qn$X'm4", transportadora0.getNome());
      assertEquals((-728.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(1639.5610182121322, transportadora0.getValor_grande(), 0.01);
      assertEquals(1639.5610182121322, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-728), transportadora1.getFormula());
      assertEquals(1639.5610182121322, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("&Qn$X'm4", transportadora1.getNome());
      assertEquals(1639.5610182121322, transportadora1.getValor_grande(), 0.01);
      assertEquals((-2361.4646685342345), transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(1639.5610182121322, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.7, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora2.formula1());
      assertEquals(1639.5610182121322, transportadora2.getValor_grande(), 0.01);
      assertFalse(transportadora2.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora2.formula3());
      assertEquals(0.0, transportadora2.getTotalLucro(), 0.01);
      assertEquals((-2361.4646685342345), transportadora2.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora2.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora2.formula2());
      assertEquals((-728), transportadora2.getFormula());
      assertEquals(1639.5610182121322, transportadora2.getValor_pequenas(), 0.01);
      assertEquals(1639.5610182121322, transportadora2.getImpostos(), 0.01);
      assertEquals(1L, transportadora2.getId());
      assertEquals(0.7, transportadora2.getValor_medio(), 0.01);
      assertEquals("&Qn$X'm4", transportadora2.getNome());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora0, transportadora2);
      assertNotSame(transportadora1, transportadora2);
      assertNotSame(transportadora1, transportadora0);
      assertNotSame(transportadora2, transportadora0);
      assertNotSame(transportadora2, transportadora1);
      assertNotNull(transportadora2);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertTrue(transportadora2.equals((Object)transportadora1));
      assertFalse(transportadora2.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora2.equals(transportadora0);
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-728), transportadora0.getFormula());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1639.5610182121322, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("&Qn$X'm4", transportadora0.getNome());
      assertEquals((-728.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(1639.5610182121322, transportadora0.getValor_grande(), 0.01);
      assertEquals(1639.5610182121322, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-728), transportadora1.getFormula());
      assertEquals(1639.5610182121322, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("&Qn$X'm4", transportadora1.getNome());
      assertEquals(1639.5610182121322, transportadora1.getValor_grande(), 0.01);
      assertEquals((-2361.4646685342345), transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(1639.5610182121322, transportadora1.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.7, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora2.formula1());
      assertEquals(1639.5610182121322, transportadora2.getValor_grande(), 0.01);
      assertFalse(transportadora2.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora2.formula3());
      assertEquals(0.0, transportadora2.getTotalLucro(), 0.01);
      assertEquals((-2361.4646685342345), transportadora2.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora2.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora2.formula2());
      assertEquals((-728), transportadora2.getFormula());
      assertEquals(1639.5610182121322, transportadora2.getValor_pequenas(), 0.01);
      assertEquals(1639.5610182121322, transportadora2.getImpostos(), 0.01);
      assertEquals(1L, transportadora2.getId());
      assertEquals(0.7, transportadora2.getValor_medio(), 0.01);
      assertEquals("&Qn$X'm4", transportadora2.getNome());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora0, transportadora2);
      assertNotSame(transportadora1, transportadora2);
      assertNotSame(transportadora1, transportadora0);
      assertNotSame(transportadora2, transportadora0);
      assertNotSame(transportadora2, transportadora1);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora0.equals((Object)transportadora2));
      assertFalse(transportadora1.equals((Object)transportadora0));
      assertTrue(transportadora1.equals((Object)transportadora2));
      assertTrue(transportadora2.equals((Object)transportadora1));
      assertFalse(transportadora2.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertNotNull(transportadora0);
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setImpostos(661.6502145674613);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(661.6502145674613, transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(661.6502145674613, transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertNotNull(transportadora0);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setValor_pequenas((-3204.848900456));
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals((-3204.848900456), transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals((-3204.848900456), transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", (-1.0), 0.0, (-1.0), 0.0, (-1.0), false, 0);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertNotNull(transportadora0);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(0, transportadora1.getFormula());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals((-1.0), transportadora1.getMargemlucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setValor_medio((-1.0));
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(0, transportadora1.getFormula());
      assertEquals(1L, transportadora1.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals((-1.0), transportadora1.getMargemlucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_pequenas(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(0, transportadora1.getFormula());
      assertEquals(1L, transportadora1.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals((-1.0), transportadora1.getMargemlucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertNotNull(transportadora0);
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora1.setValor_grande((-3812.2239936811));
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals((-3812.2239936811), transportadora1.getValor_grande(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals((-3812.2239936811), transportadora1.getValor_grande(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertNotNull(transportadora0);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
      
      transportadora0.setId(0L);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0L, transportadora0.getId());
      assertNotSame(transportadora0, transportadora1);
      assertFalse(transportadora0.equals((Object)transportadora1));
      
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertFalse(boolean0);
      assertFalse(transportadora0.equals((Object)transportadora1));
      assertFalse(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-4855.1888), (-4855.1888), 0.7, 847.4988306, 847.4988306, true, 1930);
      assertEquals((-4855.1888), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(847.4988306, transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals(1930, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(847.4988306, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-4855.1888), transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.preco_transportadora3(1930);
      assertEquals((-4855.1888), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(847.4988306, transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals(1930, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(847.4988306, transportadora0.getImpostos(), 0.01);
      assertEquals((-4855.1888), transportadora0.getValor_medio(), 0.01);
      assertEquals(755056.855033916, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(755056.855033916, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("&Qn$X'm4", 1640.142, 0.7, 1640.142, 0.0, (-2361.591439443649), false, (-728));
      assertEquals("&Qn$X'm4", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(1640.142, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-2361.591439443649), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-728), transportadora0.getFormula());
      assertEquals(1640.142, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.preco_transportadora3(5448);
      assertEquals("&Qn$X'm4", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(1640.142, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-2361.591439443649), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-5810017.960007979), transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-728), transportadora0.getFormula());
      assertEquals(1640.142, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-5810017.960007979), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("A,}", 1.0, 0.0, (-1.0), 490.2334651671527, 0.0, true, 2139);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals(2139, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("A,}", transportadora0.getNome());
      assertEquals(490.2334651671527, transportadora0.getImpostos(), 0.01);
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.preco_transportadora2(2139);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-343.8634256170069), transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals(2139, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("A,}", transportadora0.getNome());
      assertEquals(490.2334651671527, transportadora0.getImpostos(), 0.01);
      assertEquals((-343.8634256170069), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-2632.9520648042), 2887.1528522, 2887.1528522, (-1.0), (-1.0), true, (-945));
      assertEquals(2887.1528522, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertTrue(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2887.1528522, transportadora0.getValor_grande(), 0.01);
      assertEquals((-2632.9520648042), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-945), transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNotNull(transportadora0);
      
      boolean boolean0 = transportadora0.isPremium();
      assertEquals(2887.1528522, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertTrue(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2887.1528522, transportadora0.getValor_grande(), 0.01);
      assertEquals((-2632.9520648042), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-945), transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getValor_pequenas();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertNotNull(transportadora0);
      
      transportadora0.setValor_pequenas(1743);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1743.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      
      double double0 = transportadora0.getValor_pequenas();
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1743.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1743.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 1142.772906512, 1142.772906512, 1.0, (-1107.2335532527807), (-1107.2335532527807), true, (-1927));
      assertEquals("", transportadora0.getNome());
      assertTrue(transportadora0.isPremium());
      assertEquals((-1927), transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1142.772906512, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1107.2335532527807), transportadora0.getImpostos(), 0.01);
      assertEquals(1142.772906512, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1107.2335532527807), transportadora0.getMargemlucro(), 0.01);
      assertNotNull(transportadora0);
      
      transportadora0.setValor_medio(0.0);
      assertEquals("", transportadora0.getNome());
      assertTrue(transportadora0.isPremium());
      assertEquals((-1927), transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1107.2335532527807), transportadora0.getImpostos(), 0.01);
      assertEquals(1142.772906512, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1107.2335532527807), transportadora0.getMargemlucro(), 0.01);
      
      double double0 = transportadora0.getValor_medio();
      assertEquals("", transportadora0.getNome());
      assertTrue(transportadora0.isPremium());
      assertEquals((-1927), transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1107.2335532527807), transportadora0.getImpostos(), 0.01);
      assertEquals(1142.772906512, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1107.2335532527807), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, (-945.7272457863245), (-173.655785), 0.7, 0.7, 0.0, true, 5);
      assertTrue(transportadora0.isPremium());
      assertEquals(0.7, transportadora0.getImpostos(), 0.01);
      assertNull(transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-173.655785), transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-945.7272457863245), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(5, transportadora0.getFormula());
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getValor_medio();
      assertTrue(transportadora0.isPremium());
      assertEquals(0.7, transportadora0.getImpostos(), 0.01);
      assertNull(transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-173.655785), transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-945.7272457863245), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(5, transportadora0.getFormula());
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals((-173.655785), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertFalse(transportadora0.isPremium());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getValor_grande();
      assertFalse(transportadora0.isPremium());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, 1.0, (-1.0), 1.0, (-1.0), (-1.0), false, (-1));
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNull(transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals((-1), transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getValor_grande();
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNull(transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals((-1), transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertNotNull(transportadora0);
      
      transportadora0.setValor_pequenas(1743);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1743.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      
      double double0 = transportadora0.preco_transportadora2(1);
      assertEquals(1743.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1220.1, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(1220.1, double0, 0.01);
      
      double double1 = transportadora0.getTotalLucro();
      assertEquals(1743.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1220.1, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(1220.1, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertNotNull(transportadora0);
      
      transportadora0.setTotalLucro((-1.0));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1.0), transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      
      double double0 = transportadora0.getTotalLucro();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1.0), transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, 1.0, (-1.0), 1.0, (-1.0), (-1.0), false, (-1));
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1), transportadora0.getFormula());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertNull(transportadora0.getNome());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertNotNull(transportadora0);
      
      String string0 = transportadora0.getNome();
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1), transportadora0.getFormula());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertNull(transportadora0.getNome());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getMargemlucro();
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("Transportadora", 1.0, 1.0, 1.0, 1.0, 1.0, false, 2267);
      assertEquals(1L, transportadora0.getId());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("Transportadora", transportadora0.getNome());
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2267, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getMargemlucro();
      assertEquals(1L, transportadora0.getId());
      assertEquals(1.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("Transportadora", transportadora0.getNome());
      assertEquals(1.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2267, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1.0, transportadora0.getValor_medio(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getImpostos();
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertNotNull(transportadora0);
      
      transportadora0.setImpostos(1545.62797);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1545.62797, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      
      double double0 = transportadora0.getImpostos();
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(1545.62797, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1545.62797, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertNotNull(transportadora0);
      
      transportadora0.setId(0L);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      
      long long0 = transportadora0.getId();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertNotNull(transportadora0);
      
      transportadora0.setId((-1639L));
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1639L), transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      
      long long0 = transportadora0.getId();
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1639L), transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1639L), long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 0.0, 0.0, 0.0, 1251.0, 0.0, true, 20);
      assertEquals(1251.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(20, transportadora0.getFormula());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertNotNull(transportadora0);
      
      int int0 = transportadora0.getFormula();
      assertEquals(1251.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(20, transportadora0.getFormula());
      assertEquals("", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-862.874), (-862.874), 0.7, 0.0, 0.0, false, (-1654));
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-862.874), transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals((-862.874), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals((-1654), transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNotNull(transportadora0);
      
      int int0 = transportadora0.getFormula();
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-862.874), transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.7, transportadora0.getValor_grande(), 0.01);
      assertEquals((-862.874), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals((-1654), transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1654), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transportadora.setCodigo(0L);
      long long0 = Transportadora.getCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Transportadora.setCodigo((-2041L));
      long long0 = Transportadora.getCodigo();
      assertEquals((-2041L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transportadora.setCodigo(0);
      long long0 = Transportadora.criaCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Transportadora.setCodigo((-1735L));
      long long0 = Transportadora.criaCodigo();
      assertEquals((-1735L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 1142.772906512, 1142.772906512, 1.0, (-1107.2335532527807), (-1107.2335532527807), true, (-1927));
      assertEquals((-1107.2335532527807), transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1142.772906512, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(2L, transportadora0.getCodigo());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals(1142.772906512, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1107.2335532527807), transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1927), transportadora0.getFormula());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.preco_transportadora1(3010);
      assertEquals((-1107.2335532527807), transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1142.772906512, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(2L, transportadora0.getCodigo());
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1102373.0171059729, transportadora0.getTotalLucro(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals(1142.772906512, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1107.2335532527807), transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1927), transportadora0.getFormula());
      assertEquals(1102373.0171059729, double0, 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals((-1107.2335532527807), transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1142.772906512, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(2L, transportadora0.getCodigo());
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1102373.0171059729, transportadora0.getTotalLucro(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals(1142.772906512, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1107.2335532527807), transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1927), transportadora0.getFormula());
      assertEquals(1102373.0171059729, transportadora1.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(1142.772906512, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-1107.2335532527807), transportadora1.getMargemlucro(), 0.01);
      assertEquals((-1927), transportadora1.getFormula());
      assertEquals((-1107.2335532527807), transportadora1.getImpostos(), 0.01);
      assertEquals(1.0, transportadora1.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(1142.772906512, transportadora1.getValor_medio(), 0.01);
      assertEquals("", transportadora1.getNome());
      assertTrue(transportadora1.isPremium());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("RO O8a2t'eRKStq", (-1394.12788), 2400.4664466105, 2400.4664466105, 0.0, 0.0, false, 0);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("RO O8a2t'eRKStq", transportadora0.getNome());
      assertEquals(2400.4664466105, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2400.4664466105, transportadora0.getValor_medio(), 0.01);
      assertEquals((-1394.12788), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNotNull(transportadora0);
      
      transportadora0.setTotalLucro((-3171.78312133804));
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("RO O8a2t'eRKStq", transportadora0.getNome());
      assertEquals(2400.4664466105, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-3171.78312133804), transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2400.4664466105, transportadora0.getValor_medio(), 0.01);
      assertEquals((-1394.12788), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("RO O8a2t'eRKStq", transportadora0.getNome());
      assertEquals(2400.4664466105, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-3171.78312133804), transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2400.4664466105, transportadora0.getValor_medio(), 0.01);
      assertEquals((-1394.12788), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora1.isPremium());
      assertEquals((-1394.12788), transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(2400.4664466105, transportadora1.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("RO O8a2t'eRKStq", transportadora1.getNome());
      assertEquals(2400.4664466105, transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(1L, transportadora1.getId());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals((-3171.78312133804), transportadora1.getTotalLucro(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(" Nome: ", 0.9, (-1.0), 0.0, 0.9, 0.9, true, (-956));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.9, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(0.9, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.9, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-956), transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(" Nome: ", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(transportadora0.isPremium());
      assertNotNull(transportadora0);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.9, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(0.9, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.9, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-956), transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(" Nome: ", transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.9, transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals((-1.0), transportadora1.getValor_medio(), 0.01);
      assertEquals(0.9, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.9, transportadora1.getMargemlucro(), 0.01);
      assertEquals((-956), transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(" Nome: ", transportadora1.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertTrue(transportadora1.isPremium());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("RO O8a2t'eRKStq", (-1394.12788), 2400.4664466105, 2400.4664466105, 0.0, 0.0, false, 0);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2400.4664466105, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("RO O8a2t'eRKStq", transportadora0.getNome());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1394.12788), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2400.4664466105, transportadora0.getValor_grande(), 0.01);
      assertNotNull(transportadora0);
      
      transportadora0.setId(0);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2400.4664466105, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("RO O8a2t'eRKStq", transportadora0.getNome());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1394.12788), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2400.4664466105, transportadora0.getValor_grande(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2400.4664466105, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals("RO O8a2t'eRKStq", transportadora0.getNome());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1394.12788), transportadora0.getValor_pequenas(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2400.4664466105, transportadora0.getValor_grande(), 0.01);
      assertEquals((-1394.12788), transportadora1.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertEquals(2400.4664466105, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("RO O8a2t'eRKStq", transportadora1.getNome());
      assertEquals(2400.4664466105, transportadora1.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0L, transportadora1.getId());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNotNull(transportadora0);
      
      transportadora0.setId((-3517L));
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-3517L), transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals((-3517L), transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals((-3517L), transportadora1.getId());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("}KB?", 0.0, (-479.236397), (-512.19246), (-512.19246), (-928.36343362), false, 575);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-479.236397), transportadora0.getValor_medio(), 0.01);
      assertEquals((-512.19246), transportadora0.getImpostos(), 0.01);
      assertEquals((-512.19246), transportadora0.getValor_grande(), 0.01);
      assertEquals(575, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("}KB?", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-928.36343362), transportadora0.getMargemlucro(), 0.01);
      assertNotNull(transportadora0);
      
      Transportadora.setCodigo(0L);
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-479.236397), transportadora0.getValor_medio(), 0.01);
      assertEquals((-512.19246), transportadora0.getImpostos(), 0.01);
      assertEquals((-512.19246), transportadora0.getValor_grande(), 0.01);
      assertEquals(575, transportadora0.getFormula());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals("}KB?", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0L, transportadora0.getCodigo());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-928.36343362), transportadora0.getMargemlucro(), 0.01);
      assertEquals((-928.36343362), transportadora1.getMargemlucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals("}KB?", transportadora1.getNome());
      assertEquals(1L, transportadora1.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertFalse(transportadora1.isPremium());
      assertEquals((-512.19246), transportadora1.getImpostos(), 0.01);
      assertEquals(575, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals((-512.19246), transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-479.236397), transportadora1.getValor_medio(), 0.01);
      assertEquals(0L, transportadora1.getCodigo());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertNotNull(transportadora0);
      
      Transportadora.setCodigo((-1735L));
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-1735L), transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora1.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertEquals((-1735L), transportadora1.getCodigo());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(0.0, transportadora1.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertFalse(transportadora1.isPremium());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
      assertNotNull(transportadora1);
      assertTrue(transportadora1.equals((Object)transportadora0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, 1640.142, 0.7, 1640.142, 0.0, (-2361.591439443649), false, (-728));
      assertEquals(1640.142, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-2361.591439443649), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-728), transportadora0.getFormula());
      assertEquals(1640.142, transportadora0.getValor_pequenas(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertNull(transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNotNull(transportadora0);
      
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals(1640.142, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals((-2361.591439443649), transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-728), transportadora0.getFormula());
      assertEquals(1640.142, transportadora0.getValor_pequenas(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertNull(transportadora0.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora1.formula3());
      assertEquals(1640.142, transportadora1.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora1.getImpostos(), 0.01);
      assertNull(transportadora1.getNome());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora1.formula1());
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals((-728), transportadora1.getFormula());
      assertEquals(0.0, transportadora1.getTotalLucro(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals(1L, transportadora1.getId());
      assertEquals(0.7, transportadora1.getValor_medio(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora1.formula2());
      assertEquals(1640.142, transportadora1.getValor_pequenas(), 0.01);
      assertEquals((-2361.591439443649), transportadora1.getMargemlucro(), 0.01);
      assertNotNull(transportadora1);
      
      // Undeclared exception!
      try { 
        transportadora1.equals(transportadora0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Transportadora transportadora0 = null;
      try {
        transportadora0 = new Transportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Transportadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("'OXKKQFu)$#Hw\"t`{", 1292.340586, (-1.0), (-1970.412), 0.0, 0.7, true, 0);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("'OXKKQFu)$#Hw\"t`{", transportadora0.getNome());
      assertEquals(1292.340586, transportadora0.getValor_pequenas(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1970.412), transportadora0.getValor_grande(), 0.01);
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getValor_grande();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-1.0), transportadora0.getValor_medio(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("'OXKKQFu)$#Hw\"t`{", transportadora0.getNome());
      assertEquals(1292.340586, transportadora0.getValor_pequenas(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals(0.7, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1970.412), transportadora0.getValor_grande(), 0.01);
      assertEquals((-1970.412), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(" +Ibr0OrR#5S", 2147.1, 2147.1, (-601.0), (-289.0), 0.0, true, 866);
      assertEquals(2147.1, transportadora0.getValor_medio(), 0.01);
      assertEquals(" +Ibr0OrR#5S", transportadora0.getNome());
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(2147.1, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-289.0), transportadora0.getImpostos(), 0.01);
      assertEquals((-601.0), transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(866, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertNotNull(transportadora0);
      
      long long0 = transportadora0.getId();
      assertEquals(2147.1, transportadora0.getValor_medio(), 0.01);
      assertEquals(" +Ibr0OrR#5S", transportadora0.getNome());
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(2147.1, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertEquals((-289.0), transportadora0.getImpostos(), 0.01);
      assertEquals((-601.0), transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(866, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 0.0, 0.0, (-1764.2671365), (-1.0), 0.0, true, 2);
      assertEquals(2, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals((-1764.2671365), transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getImpostos();
      assertEquals(2, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals((-1764.2671365), transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("", transportadora0.getNome());
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", (-2632.9520648042), 2887.1528522, 2887.1528522, (-1.0), (-1.0), true, (-945));
      assertEquals(2887.1528522, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(2887.1528522, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals((-2632.9520648042), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-945), transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getMargemlucro();
      assertEquals(2887.1528522, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-1.0), transportadora0.getImpostos(), 0.01);
      assertEquals(2887.1528522, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertTrue(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals((-2632.9520648042), transportadora0.getValor_pequenas(), 0.01);
      assertEquals((-945), transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(1L, transportadora0.getId());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("RO O8a2t'eRKStq", (-1394.12788), 2400.4664466105, 2400.4664466105, 0.0, 0.0, false, 0);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2400.4664466105, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("RO O8a2t'eRKStq", transportadora0.getNome());
      assertEquals((-1394.12788), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2400.4664466105, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getValor_pequenas();
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2400.4664466105, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("RO O8a2t'eRKStq", transportadora0.getNome());
      assertEquals((-1394.12788), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2400.4664466105, transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(1L, transportadora0.getId());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals((-1394.12788), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", 1142.772906512, 1142.772906512, 1.0, (-1107.2335532527807), (-1107.2335532527807), true, (-1927));
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals(1142.772906512, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1107.2335532527807), transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1927), transportadora0.getFormula());
      assertEquals((-1107.2335532527807), transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1142.772906512, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(2L, transportadora0.getCodigo());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getValor_medio();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals("", transportadora0.getNome());
      assertEquals(1142.772906512, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals((-1107.2335532527807), transportadora0.getMargemlucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals((-1927), transportadora0.getFormula());
      assertEquals((-1107.2335532527807), transportadora0.getImpostos(), 0.01);
      assertEquals(1.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(1142.772906512, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(2L, transportadora0.getCodigo());
      assertTrue(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(1142.772906512, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", (-1.0), 0.0, (-1.0), 0.0, (-1.0), false, 0);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.getNome());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertNotNull(transportadora0);
      
      int int0 = transportadora0.getFormula();
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.getNome());
      assertEquals((-1.0), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals((-1.0), transportadora0.getValor_grande(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0, transportadora0.getFormula());
      assertEquals((-1.0), transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertNotNull(transportadora0);
      
      String string0 = transportadora0.getNome();
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertNotNull(string0);
      assertEquals("Transportadora Invalida", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertNotNull(transportadora0);
      
      boolean boolean0 = transportadora0.isPremium();
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertFalse(transportadora0.isPremium());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.getTotalLucro();
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long long0 = Transportadora.criaCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertNotNull(transportadora0);
      
      double double0 = transportadora0.preco_transportadora3(5);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", transportadora0.formula1());
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", transportadora0.formula3());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", transportadora0.formula2());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("&Qn$X'm4", 1639.5610182121322, 0.7, 1639.5610182121322, 1639.5610182121322, (-2361.4646685342345), false, (-728));
      double double0 = transportadora0.preco_transportadora3((-728));
      assertEquals(1639.5610182121322, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(1639.5610182121322, transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(-0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-728), transportadora0.getFormula());
      assertEquals(1639.5610182121322, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.7, transportadora0.getValor_medio(), 0.01);
      assertFalse(transportadora0.isPremium());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.preco_transportadora3(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.preco_transportadora2(2);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.preco_transportadora1(2);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.preco_transportadora1(1);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.preco_transportadora1(0);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora0.setFormula((-606));
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals((-606), transportadora0.getFormula());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setPremium(true);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertFalse(boolean0);
      assertTrue(transportadora1.isPremium());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setTotalLucro((-27.518617099106613));
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals((-27.518617099106613), transportadora1.getTotalLucro(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(2L, transportadora1.getCodigo());
      assertEquals(1L, transportadora0.getId());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0, transportadora1.getFormula());
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(transportadora1.isPremium());
      assertEquals("Transportadora Invalida", transportadora1.getNome());
      assertTrue(transportadora0.equals((Object)transportadora1));
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setImpostos((-2117.8405));
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals((-2117.8405), transportadora1.getImpostos(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = transportadora0.clone();
      transportadora0.setValor_pequenas((-2162.3537));
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals((-2162.3537), transportadora0.getValor_pequenas(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setValor_medio(661.6502145674613);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals(661.6502145674613, transportadora1.getValor_medio(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      
      transportadora0.setNome("");
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora();
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals(3L, transportadora0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Object object0 = new Object();
      boolean boolean0 = transportadora0.equals(object0);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      boolean boolean0 = transportadora0.equals((Object) null);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertFalse(boolean0);
      assertFalse(transportadora0.isPremium());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      boolean boolean0 = transportadora0.equals(transportadora0);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertTrue(boolean0);
      assertEquals(0, transportadora0.getFormula());
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora(transportadora0);
      transportadora1.setMargemlucro(2966.7453);
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertEquals(2966.7453, transportadora1.getMargemlucro(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      String string0 = transportadora0.toString();
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      String string0 = transportadora0.formula1();
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9", string0);
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0, transportadora0.getFormula());
      assertFalse(transportadora0.isPremium());
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      
      transportadora0.setNome("");
      transportadora0.getNome();
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      String string0 = transportadora0.formula2();
      assertEquals(0.0, transportadora0.getValor_grande(), 0.01);
      assertFalse(transportadora0.isPremium());
      assertEquals(0, transportadora0.getFormula());
      assertEquals(2L, transportadora0.getCodigo());
      assertEquals(0.0, transportadora0.getValor_medio(), 0.01);
      assertEquals(0.0, transportadora0.getImpostos(), 0.01);
      assertEquals(0.0, transportadora0.getMargemlucro(), 0.01);
      assertEquals(0.0, transportadora0.getValor_pequenas(), 0.01);
      assertEquals("Transportadora Invalida", transportadora0.getNome());
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals("ValorBase * (1 + MargemLucroTransportadora + Imposto) * 0,7", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      long long0 = Transportadora.getCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}", (-2071.122123502829), (-2071.122123502829), (-2071.122123502829), (-2071.122123502829), (-2071.122123502829), true, (-2832));
      String string0 = transportadora0.formula3();
      assertEquals((-2071.122123502829), transportadora0.getValor_grande(), 0.01);
      assertEquals((-2832), transportadora0.getFormula());
      assertEquals("(ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", string0);
      assertEquals(0.0, transportadora0.getTotalLucro(), 0.01);
      assertEquals((-2071.122123502829), transportadora0.getValor_medio(), 0.01);
      assertEquals((-2071.122123502829), transportadora0.getImpostos(), 0.01);
      assertEquals((-2071.122123502829), transportadora0.getValor_pequenas(), 0.01);
      assertEquals(2L, transportadora0.getCodigo());
      assertTrue(transportadora0.isPremium());
      assertEquals((-2071.122123502829), transportadora0.getMargemlucro(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("&Qn$X'm4", 1639.5610182121322, 0.7, 1639.5610182121322, 1639.5610182121322, (-2361.4646685342345), false, (-728));
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals(1639.5610182121322, transportadora1.getValor_grande(), 0.01);
      
      transportadora1.setValor_grande(0.7);
      boolean boolean0 = transportadora1.equals(transportadora0);
      assertFalse(boolean0);
  }
}
