/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 14:24:17 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(true, 2328L, 4091L, "4\"fB^", 0.0, false, 4091L, 0.0);
      utilizador0.adicionaFaturaVendedor(true, 2328L, 4091L, " j\u00E1 existe na encomenda", 0.0, true, 40.2417, 1629.0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      Utilizador utilizador1 = new Utilizador();
      int int0 = utilizador0.compareTo(utilizador1);
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long(2435L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      Set<String> set0 = utilizador0.getPendentes();
      utilizador0.setPendentes(set0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("q#XPtBW>o9\"8N,Ab&3c");
      utilizador0.removeCarrinho();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      utilizador0.numeroArtigos(set0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "&v%MIs", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      utilizador0.adicionaFaturaVendedor(false, (-1731L), (-1731L), "z_]/O", (-1731L), true, 1.0, (-1.0));
      utilizador0.imprime1FaturaVenda((-1731L));
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getPassword());
      assertEquals("&v%MIs", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("");
      utilizador0.aVendaToPendente("");
      utilizador0.pendenteToVendido("");
      utilizador0.getProdutosVendidos();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("\n");
      utilizador0.aVendaToPendente("\n");
      utilizador0.getPendentes();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getPassword();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      utilizador0.getPassword();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Long long0 = new Long((-2029L));
      Utilizador utilizador0 = new Utilizador("Grande", "?-", "Grande", long0, "Grande");
      String string0 = utilizador0.getNome();
      assertEquals("Grande", utilizador0.getEmail());
      assertEquals("Grande", utilizador0.getMorada());
      assertEquals("Grande", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("?-", string0);
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      String string0 = utilizador0.getNome();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertNotNull(string0);
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long(1604L);
      Utilizador utilizador0 = new Utilizador("", "Q.ZG+", "Q.ZG+", long0, "");
      long long1 = utilizador0.getNif();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("", utilizador0.getPassword());
      assertEquals("Q.ZG+", utilizador0.getNome());
      assertEquals("Q.ZG+", utilizador0.getMorada());
      assertEquals("", utilizador0.getEmail());
      assertEquals(1604L, long1);
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = new Long((-1430L));
      Utilizador utilizador0 = new Utilizador("+5v}EKO>8?_Fex", "+5v}EKO>8?_Fex", "+5v}EKO>8?_Fex", long0, "");
      long long1 = utilizador0.getNif();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("+5v}EKO>8?_Fex", utilizador0.getNome());
      assertEquals("+5v}EKO>8?_Fex", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("+5v}EKO>8?_Fex", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals((-1430L), long1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_vendidos(1774);
      int int0 = utilizador0.getN_vendidos();
      assertEquals(1774, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long long0 = new Long(2435L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      utilizador0.setN_comprados(1604);
      int int0 = utilizador0.getN_comprados();
      assertEquals(1604, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "TBL", long0, "!8t=6aj)Ym");
      utilizador0.setN_comprados((-1932735281));
      int int0 = utilizador0.getN_comprados();
      assertEquals((-1932735281), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long long0 = new Long((-1467L));
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, "_-Smyh'mD0eaT,");
      String string0 = utilizador0.getMorada();
      assertEquals(0, utilizador0.getN_comprados());
      assertNull(string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getMorada();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", string0);
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      utilizador0.setId((-1L));
      long long1 = utilizador0.getId();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Long long0 = Long.valueOf((-1L));
      Utilizador utilizador0 = new Utilizador("Dimensao", "bD15`qK>'r!m;&}o-{j", "bD15`qK>'r!m;&}o-{j", long0, "Pre\u00E7o final: ");
      utilizador0.getFaturasCompras();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("bD15`qK>'r!m;&}o-{j", utilizador0.getNome());
      assertEquals("Dimensao", utilizador0.getEmail());
      assertEquals("Pre\u00E7o final: ", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("bD15`qK>'r!m;&}o-{j", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, "t2#");
      String string0 = utilizador0.getEmail();
      assertNull(string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>();
      Long long0 = new Long(1L);
      linkedHashSet0.add(long0);
      utilizador0.setComprei(linkedHashSet0);
      utilizador0.getComprei();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utilizador.setCodigo(0);
      long long0 = Utilizador.getCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utilizador.setCodigo((-1L));
      long long0 = Utilizador.getCodigo();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "&v%MIs", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      utilizador0.atualizaEncomenda((LocalDate) null);
      Encomenda encomenda0 = utilizador0.getCarrinho();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("&v%MIs", utilizador0.getNome());
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getEmail());
      assertEquals(1L, encomenda0.getIdComprador());
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "&v%MIs", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      utilizador0.adicionaFaturaVendedor(true, (-1731L), (-1731L), "z_]/O", (-1731L), true, 1.0, (-1.0));
      Fatura fatura0 = utilizador0.get1FaturaVenda((-1731L));
      assertEquals(0, utilizador0.getN_vendidos());
      assertNotNull(fatura0);
      assertEquals("&v%MIs", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getPassword());
      assertEquals((-1731.0), fatura0.custoProdutos, 0.01);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1.0), fatura0.alteracaoPreco, 0.01);
      assertEquals((-1731L), fatura0.idEncomenda);
      assertEquals((-1731L), fatura0.nifComprador);
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getEmail());
      assertEquals((-1732.0), fatura0.precoFinal, 0.01);
      assertTrue(fatura0.compra);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Long long0 = new Long(4638L);
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "&v%MIs", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      utilizador0.adicionaFaturaVendedor(false, 4638L, 4638L, "z_]/O", 4638L, false, 1.0, (-1.0));
      Fatura fatura0 = utilizador0.get1FaturaVenda(4638L);
      assertEquals("&v%MIs", utilizador0.getNome());
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getPassword());
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getEmail());
      assertEquals(4638L, fatura0.nifComprador);
      assertEquals(1.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(fatura0.compra);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertNotNull(fatura0);
      assertEquals(4638.0, fatura0.custoProdutos, 0.01);
      assertEquals(4638L, fatura0.idEncomenda);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(4639.0, fatura0.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "&v%MIs", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      utilizador0.adicionaFaturaVendedor(false, (-1731L), (-1731L), "z_]/O", (-1731L), false, 1.0, 0.0);
      Fatura fatura0 = utilizador0.get1FaturaVenda((-1731L));
      assertEquals((-1731L), fatura0.nifComprador);
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(fatura0.compra);
      assertEquals("&v%MIs", utilizador0.getNome());
      assertEquals((-1731.0), fatura0.precoFinal, 0.01);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1731L), fatura0.idEncomenda);
      assertEquals(0, utilizador0.getN_comprados());
      assertNotNull(fatura0);
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getEmail());
      assertEquals((-1731.0), fatura0.custoProdutos, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "&v%MIs", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      utilizador0.adicionaFaturaVendedor(false, (-1731L), (-1731L), "z_]/O", (-1731L), true, (-1731L), (-1.0));
      Fatura fatura0 = utilizador0.get1FaturaVenda((-1731L));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1731.0, fatura0.alteracaoPreco, 0.01);
      assertEquals(2L, utilizador0.getCodigo());
      assertFalse(fatura0.compra);
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getPassword());
      assertEquals((-1731.0), fatura0.custoProdutos, 0.01);
      assertNotNull(fatura0);
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getEmail());
      assertEquals((-1731L), fatura0.nifComprador);
      assertEquals("&v%MIs", utilizador0.getNome());
      assertEquals((-1731L), fatura0.idEncomenda);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0.0, fatura0.precoFinal, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(163L);
      Utilizador utilizador0 = new Utilizador(" j\u00E1 se encontra \u00E0 venda", " j\u00E1 se encontra \u00E0 venda", "VL", long0, "VL");
      Set<String> set0 = utilizador0.getProdutosVendidos();
      utilizador0.adicionaFaturaComprador(true, 163L, 1L, set0, (-1.0), (-1.0), 1L);
      Fatura fatura0 = utilizador0.get1FaturaCompra(163L);
      assertEquals(1L, fatura0.nifComprador);
      assertNotNull(fatura0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1.0, fatura0.precoFinal, 0.01);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(" j\u00E1 se encontra \u00E0 venda", utilizador0.getEmail());
      assertTrue(fatura0.compra);
      assertEquals(" j\u00E1 se encontra \u00E0 venda", utilizador0.getNome());
      assertEquals((-1.0), fatura0.custoProdutos, 0.01);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1.0), fatura0.alteracaoPreco, 0.01);
      assertEquals("VL", utilizador0.getPassword());
      assertEquals(163L, fatura0.idEncomenda);
      assertEquals("VL", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utilizador.setCodigo(0);
      long long0 = Utilizador.criaCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utilizador.setCodigo((-864L));
      long long0 = Utilizador.criaCodigo();
      assertEquals((-864L), long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("0.00", (String) null, (String) null, long0, "0.00");
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals(1L, utilizador1.getId());
      assertNotSame(utilizador1, utilizador0);
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador1.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_vendidos((-1103));
      utilizador0.clone();
      assertEquals((-1103), utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "&v%MIs", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      utilizador0.setN_comprados(2379);
      utilizador0.clone();
      assertEquals(2379, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_comprados((-107));
      utilizador0.clone();
      assertEquals((-107), utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long(1604L);
      Utilizador utilizador0 = new Utilizador("", "Q.ZG+", "Q.ZG+", long0, "");
      assertEquals(1L, utilizador0.getId());
      
      utilizador0.setId(0L);
      utilizador0.clone();
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador.setCodigo((-1731L));
      Utilizador utilizador0 = new Utilizador("wA!IKu>", (String) null, "nc{w/q)p<zD>.j%W", long0, "!8t=6'j)Ym");
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals((-1731L), utilizador0.getNif());
      assertEquals((-1731L), utilizador1.getId());
      assertEquals("!8t=6'j)Ym", utilizador1.getPassword());
      assertEquals((-1731L), utilizador0.getId());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("wA!IKu>", utilizador1.getEmail());
      assertEquals("nc{w/q)p<zD>.j%W", utilizador1.getMorada());
      assertEquals((-1730L), utilizador1.getCodigo());
      assertNotSame(utilizador1, utilizador0);
      assertEquals((-1731L), utilizador1.getNif());
      assertEquals(0, utilizador1.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals(2L, utilizador0.getCodigo());
      
      Utilizador.setCodigo(0L);
      utilizador0.clone();
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo(":");
      utilizador0.artigosCarrinho();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador(" n\u00E3o existe no carrinho", "@gI<", "", long0, "5ouy{|Y?xC$;Nkv#{L*");
      utilizador0.adicionaArtigo((String) null);
      assertEquals("", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(" n\u00E3o existe no carrinho", utilizador0.getEmail());
      assertEquals("@gI<", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("5ouy{|Y?xC$;Nkv#{L*", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      utilizador0.getCarrinho();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setProdutosVendidos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setProdutosVender((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setFaturasVendas((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setFaturasCompras((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setDevolvidos((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long long0 = new Long(372L);
      Utilizador utilizador0 = new Utilizador(".;", ".;", ".;", long0, ".;");
      // Undeclared exception!
      try { 
        utilizador0.setComprei((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setCarrinho((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("!8t=6aj)Ym", "!8t=6aj)Ym", "*]So`m'M", long0, "YP.yv>;1-Gp)");
      // Undeclared exception!
      try { 
        utilizador0.numeroArtigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long(372L);
      Utilizador utilizador0 = new Utilizador(".;", ".;", ".;", long0, ".;");
      utilizador0.adicionaFaturaComprador(false, 372L, (-1L), (Set<String>) null, 0.0, 372L, 1757.6);
      // Undeclared exception!
      try { 
        utilizador0.imprimeFaturasCompras();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.compareTo((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("oU 'n7jC_SFj^", "oU 'n7jC_SFj^", "oU 'n7jC_SFj^", (Long) null, "c F[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      String string0 = utilizador0.getPassword();
      assertEquals(0, utilizador0.getN_comprados());
      assertNull(string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long((-1467L));
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, "_-Smyh'mD0eaT,");
      utilizador0.getDevolvidos();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = Utilizador.criaCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      String string0 = utilizador0.getEmail();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
      assertNotNull(string0);
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      String string0 = utilizador0.getMorada();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertNotNull(string0);
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      long long1 = utilizador0.getId();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(1L, long1);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador("uJm(?ODwpq B{s- ", "", "", long0, "uJm(?ODwpq B{s- ");
      int int0 = utilizador0.getN_comprados();
      assertEquals(0, int0);
      assertEquals("uJm(?ODwpq B{s- ", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("uJm(?ODwpq B{s- ", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Long long0 = Long.valueOf((-1L));
      Utilizador utilizador0 = new Utilizador("Dimensao", "bD15`qK>'r!m;&}o-{j", "bD15`qK>'r!m;&}o-{j", long0, "Pre\u00E7o final: ");
      int int0 = utilizador0.getN_vendidos();
      assertEquals(0, int0);
      assertEquals("Pre\u00E7o final: ", utilizador0.getPassword());
      assertEquals("bD15`qK>'r!m;&}o-{j", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("bD15`qK>'r!m;&}o-{j", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("Dimensao", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = new Long((-890L));
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, (String) null);
      utilizador0.getNome();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(false, 4081L, 4081L, "", (-983.1741409268), false, (-983.1741409268), 1541.600806745);
      utilizador0.imprimeFaturasVendas();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.imprimeFaturasVendas();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador("%',>rO _^D{]|=;p", "@2v7v/(M,Xg,Ta\"PF", " Id dos artigos comprados: ", long0, "@2v7v/(M,Xg,Ta\"PF");
      utilizador0.imprimeFaturasCompras();
      assertEquals("@2v7v/(M,Xg,Ta\"PF", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("@2v7v/(M,Xg,Ta\"PF", utilizador0.getPassword());
      assertEquals(" Id dos artigos comprados: ", utilizador0.getMorada());
      assertEquals("%',>rO _^D{]|=;p", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      Utilizador utilizador1 = new Utilizador();
      utilizador0.setN_comprados(890);
      int int0 = utilizador0.compareTo(utilizador1);
      assertEquals(890, utilizador0.getN_comprados());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.compareTo(utilizador0);
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, int0);
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador("%',>rO _^D{]|=;p", "@2v7v/(M,Xg,Ta\"PF", " Id dos artigos comprados: ", long0, "@2v7v/(M,Xg,Ta\"PF");
      Utilizador utilizador1 = new Utilizador(" n\u00E3o foi vendido", "Dimensao", " Id dos artigos comprados: ", long0, " Id dos artigos comprados: ");
      utilizador0.setN_comprados((-1));
      int int0 = utilizador0.compareTo(utilizador1);
      assertEquals((-1), utilizador0.getN_comprados());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.compreiToDevolvido(1L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A encomenda 1 n\u00E3o foi comprada
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.verificaComprei(2L);
      assertFalse(boolean0);
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador("%',>rO _^D{]|=;p", "@2v7v/(M,Xg,Ta\"PF", " Id dos artigos comprados: ", long0, "@2v7v/(M,Xg,Ta\"PF");
      utilizador0.adicionaArtigo(" Id dos artigos comprados: ");
      utilizador0.finalizaEncomenda((LocalDate) null);
      assertEquals("@2v7v/(M,Xg,Ta\"PF", utilizador0.getPassword());
      assertEquals("@2v7v/(M,Xg,Ta\"PF", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(" Id dos artigos comprados: ", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("%',>rO _^D{]|=;p", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador("%',>rO _^D{]|=;p", "@2v7v/(M,Xg,Ta\"PF", " Id dos artigos comprados: ", long0, "@2v7v/(M,Xg,Ta\"PF");
      try { 
        utilizador0.finalizaEncomenda((LocalDate) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O carrinho est\u00E1 vazio!
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.pendenteToAvenda("23[${b}k{]TZC]V?P[X");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo 23[${b}k{]TZC]V?P[X n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.pendenteToVendido(" Id dos artigos a vender: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  Id dos artigos a vender:  n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("");
      utilizador0.aVendaToPendente("");
      utilizador0.pendenteToVendido("");
      utilizador0.vendidoToaVenda("");
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long long0 = new Long(27L);
      Utilizador utilizador0 = new Utilizador("0.00", "0.00", "0.00", long0, "SO->cxhW`MO");
      try { 
        utilizador0.vendidoToaVenda("0.00");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo 0.00 n\u00E3o foi vendido
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo((String) null);
      utilizador0.aVendaToPendente((String) null);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.aVendaToPendente("Encomenda:: {");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Encomenda:: { n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long long0 = new Long((-25L));
      Utilizador utilizador0 = new Utilizador("\n", "\n", "\n", long0, "n/d");
      utilizador0.insereNovoArtigo("\n");
      utilizador0.eliminaArtigo("\n");
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("\n", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("\n", utilizador0.getMorada());
      assertEquals("\n", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.eliminaArtigo(" Id dos artigos comprados: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  Id dos artigos comprados:  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo("\n");
      try { 
        utilizador0.insereNovoArtigo("\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo 
         //  j\u00E1 se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.adicionaFaturaVendedor(false, 1L, 1L, " Id dos artigos a vender: ", 1.0, false, 1173.19, 1173.19);
      utilizador0.equals(utilizador1);
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.insereNovoArtigo(" Id dos artigos a vender: ");
      utilizador0.equals(utilizador1);
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(1L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador1.getNome());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.insereNovoArtigo(" Id dos artigos a vender: ");
      Set<String> set0 = utilizador1.getProdutosVender();
      utilizador0.setProdutosVendidos(set0);
      utilizador0.equals(utilizador1);
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("n/d", utilizador0.getPassword());
      
      utilizador0.setPassword(" }");
      utilizador0.equals(utilizador1);
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      // Undeclared exception!
      try { 
        utilizador0.equals(utilizador1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      utilizador0.equals(utilizador1);
      assertEquals(3L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Long long0 = new Long((-508L));
      boolean boolean0 = utilizador0.equals(long0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertFalse(boolean0);
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertFalse(boolean0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertTrue(boolean0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.setNif(1643L);
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertEquals(1643L, utilizador1.getNif());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "&v%MIs", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      utilizador0.adicionaFaturaVendedor(false, (-1731L), (-1731L), "z_]/O", (-1731L), false, 1.0, (-1.0));
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      utilizador0.setFaturasVendas(map0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getPassword());
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getEmail());
      assertEquals("&v%MIs", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "&v%MIs", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      utilizador0.setFaturasVendas(map0);
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("EVS<=.cgA<,oSCx5R*", utilizador0.getEmail());
      assertEquals("&v%MIs", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Long long0 = new Long((-1467L));
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, "_-Smyh'mD0eaT,");
      utilizador0.adicionaFaturaVendedor(true, (-1467L), (-2445L), "_-Smyh'mD0eaT,", (-2445L), true, (-2445L), (-1467L));
      HashMap<Long, Fatura> hashMap0 = new HashMap<Long, Fatura>();
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      hashMap0.putAll(map0);
      utilizador0.setFaturasCompras(hashMap0);
      assertFalse(hashMap0.isEmpty());
      
      Map<Long, Fatura> map1 = utilizador0.getFaturasCompras();
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Long long0 = new Long((-1467L));
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, long0, "_-Smyh'mD0eaT,");
      utilizador0.setNome("O carrinho est\u00E1 vazio!");
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getIdCarrinho();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.get1FaturaCompra(1L);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = Utilizador.getCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "&v%MIs", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      // Undeclared exception!
      try { 
        utilizador0.imprime1FaturaVenda(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      assertEquals(1L, utilizador0.getId());
      
      utilizador0.setId(0L);
      utilizador0.getId();
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "EVS<=.cgA<,oSCx5R*", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      Set<Long> set0 = utilizador0.getComprei();
      utilizador0.setDevolvidos(set0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Long long0 = new Long(372L);
      Utilizador utilizador0 = new Utilizador(".;", ".;", ".;", long0, ".;");
      utilizador0.setMorada(" j\u00E1 foi comprada");
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      utilizador0.toString();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      utilizador0.setEmail("l");
      utilizador0.getEmail();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      Set<String> set0 = utilizador0.getProdutosVender();
      utilizador0.numeroArtigos(set0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.removeCarrinho();
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      Set<String> set0 = utilizador0.getProdutosVender();
      utilizador0.setProdutosVender(set0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setPendentes((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "EVS<=.cgA<,oSCx5R*", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      utilizador0.get1FaturaVenda((-1731L));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Long long0 = new Long(372L);
      Utilizador utilizador0 = new Utilizador(".;", ".;", ".;", long0, ".;");
      Set<String> set0 = utilizador0.artigosCarrinho();
      utilizador0.adicionaFaturaComprador(false, 372L, (-1L), set0, 0.0, 372L, 1757.6);
      utilizador0.imprimeFaturasCompras();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Long long0 = new Long((-25L));
      Utilizador utilizador0 = new Utilizador("\n", "\n", "\n", long0, "n/d");
      try { 
        utilizador0.removeArtigo("\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo 
         //  n\u00E3o existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = utilizador0.getCarrinho();
      utilizador0.setCarrinho(encomenda0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Long long0 = new Long((-1731L));
      Utilizador utilizador0 = new Utilizador("EVS<=.cgA<,oSCx5R*", "EVS<=.cgA<,oSCx5R*", (String) null, long0, "EVS<=.cgA<,oSCx5R*");
      utilizador0.novoCarrinho();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador("uJm(?ODwpq B{s- ", "", "", long0, "uJm(?ODwpq B{s- ");
      // Undeclared exception!
      try { 
        utilizador0.imprime1FaturaCompra(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, (String) null);
      utilizador0.getNif();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }
}
