/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 14:32:04 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gestor_Utilizadores_ESTest extends Gestor_Utilizadores_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprime1FaturaCompra(601L, (-1996L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaFaturaVendedor(0L, false, 0L, 0L, "[Yg", (-1085.199), true, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, map0, hashMap1);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaFaturaVendedor((-27L), false, (-1L), 0L, "CarrinhoVazioException", 0.0, false, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.devolveEncomenda((-1623L), (-523L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaArtigoEncomenda("Encomenda", (-565L), (-1529L), localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      gestor_Utilizadores0.novoCarrinho(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("}", "}", "}", 0L, "{");
      gestor_Utilizadores0.alteraQuantiVendida(1L, (-1968526675));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      gestor_Utilizadores0.alteraQuantiComprada(0L, (-1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Locale locale0 = new Locale("@");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      gestor_Utilizadores0.adicionaFaturaComprador(0L, true, (-1L), 0L, set0, (-1L), 0L, (-1.0));
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Set<String> set0 = gestor_Utilizadores0.verCarrinho(0L);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("}", "}", "}", 0L, "{");
      Set<String> set0 = gestor_Utilizadores0.removeTodosComprador(1L);
      assertFalse(set0.contains("}"));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Set<String> set0 = gestor_Utilizadores0.meusArtigos(0L);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(1591L);
      Utilizador utilizador0 = new Utilizador("CarrinhVazioException", "CarrinhVazioException", "", long0, "CarrinhVazioException");
      hashMap0.put(long0, utilizador0);
      gestor_Utilizadores0.setUtilizadores(hashMap0);
      String string0 = gestor_Utilizadores0.imprimeFaturasCompras(1591L);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("}", "}", "}", 0L, "}");
      long long0 = gestor_Utilizadores0.getIdCarrinho(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Set<Long> set0 = gestor_Utilizadores0.getEncomendas(0L);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("}", "}", "}", 0L, "{");
      String string0 = gestor_Utilizadores0.getCarrinho(1L);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Utilizador utilizador1 = gestor_Utilizadores0.get1Utilizador(0L);
      assertEquals(0, utilizador1.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Utilizador utilizador1 = gestor_Utilizadores0.devolveUtilizador(0L);
      assertEquals("n/d", utilizador1.getEmail());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      long long1 = gestor_Utilizadores0.devolveNif(0L);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("DUXN:<E'D>We\"p}", "A6", "A6", 0L, (String) null);
      Set<Long> set0 = gestor_Utilizadores0.chaves();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("mc&-px[qDB", "RTU'a,WTjo/q|07G", "RTU'a,WTjo/q|07G", 0L, "mc&-px[qDB");
      String string0 = gestor_Utilizadores0.artigosVendidos2(1L);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("xUo #L.", "q_M~POKv^rxJ", "q_M~POKv^rxJ", 2724L, (String) null);
      Set<String> set0 = gestor_Utilizadores0.artigosVendidos(1L);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", (String) null, "Gestor_Utilizadores", long0, "'_v8>@lMo5M");
      hashMap0.put(long0, utilizador0);
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, map0, hashMap1);
      try { 
        gestor_Utilizadores0.voltaAVenderArtigo("", 0L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o existe no carrinho
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = Long.getLong("Gestor_Utilizadores", 0L);
      hashMap0.put(long0, (Utilizador) null);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.setUtilizadores(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.setIdUtilizadores((Map<String, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      try { 
        gestor_Utilizadores0.retiraArtigo("", 0L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("Gestor_Utilizadores", "Gestor_Utilizadores", "Gestor_Utilizadores", long0, "CarrinhVazioException");
      hashMap0.put(long0, utilizador0);
      Map<String, Long> map1 = gestor_Utilizadores0.getIdUtilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(hashMap0, map0, map1);
      try { 
        gestor_Utilizadores1.removeArtigoEncomenda("1-|", 0L, 0L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo 1-| n\u00E3o existe na encomenda
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador((String) null, "zu |6Z*~", "NcS]LdCRJ5?$Xk", long0, "}0JwvfwQ");
      hashMap0.put(long0, utilizador0);
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, map0, hashMap1);
      try { 
        gestor_Utilizadores0.passaVendidoParaVender("CarrinhoVazioException", 0L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo CarrinhoVazioException n\u00E3o foi vendido
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores1 = null;
      try {
        gestor_Utilizadores1 = new Gestor_Utilizadores(map0, (Map<String, String>) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = null;
      try {
        gestor_Utilizadores0 = new Gestor_Utilizadores((Gestor_Utilizadores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      hashMap1.put("KQod/Va>", (String) null);
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      boolean boolean0 = gestor_Utilizadores0.existeIdUtilizador("KQod/Va>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      boolean boolean0 = gestor_Utilizadores0.existeIdUtilizador("XG>~yd-i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.get1IdUtilizador("EncomendaNaoEncontradaException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      LocalDate localDate0 = MockLocalDate.now();
      try { 
        gestor_Utilizadores0.adicionaArtigoEncomenda("1-|", 0L, 0L, localDate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo 1-| n\u00E3o se encontra \u00E0 venda
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      Utilizador utilizador1 = gestor_Utilizadores0.devolveUtilizador(0);
      assertEquals(1L, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Utilizador utilizador0 = gestor_Utilizadores0.devolveUtilizador(0L);
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      boolean boolean0 = gestor_Utilizadores1.equals(gestor_Utilizadores0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador("$FvD|yjsA[<", "J|4jvF&)C8E7B+O", "&y{g1", 1L, "$FvD|yjsA[<");
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      boolean boolean0 = gestor_Utilizadores1.equals(gestor_Utilizadores0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      boolean boolean0 = gestor_Utilizadores0.equals(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      boolean boolean0 = gestor_Utilizadores0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      boolean boolean0 = gestor_Utilizadores0.equals(gestor_Utilizadores0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>(map0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      Map<String, Long> map2 = gestor_Utilizadores0.getIdUtilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(hashMap0, map1, map2);
      boolean boolean0 = gestor_Utilizadores0.equals(gestor_Utilizadores1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      long long0 = gestor_Utilizadores0.verificaPassword("", "");
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      hashMap0.put(long0, utilizador0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      boolean boolean0 = gestor_Utilizadores0.existeUtilizador(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      boolean boolean0 = gestor_Utilizadores0.existeUtilizador(1737L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<String, Long> map0 = gestor_Utilizadores0.getIdUtilizadores();
      gestor_Utilizadores0.setIdUtilizadores(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Long long0 = new Long((-1L));
      Utilizador utilizador0 = new Utilizador("CarrinhVazioException", "Pequeno", "", long0, "CarrinhVazioException");
      hashMap0.put(long0, utilizador0);
      gestor_Utilizadores0.setUtilizadores(hashMap0);
      Map<Long, Utilizador> map0 = gestor_Utilizadores0.getUtilizadores();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      gestor_Utilizadores0.adicionaUtilizador(")e\"=.OU-XyX", ")e\"=.OU-XyX", ")e\"=.OU-XyX", 366L, (String) null);
      Map<String, Long> map0 = gestor_Utilizadores0.getIdUtilizadores();
      gestor_Utilizadores0.setIdUtilizadores(map0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.meusArtigos(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      String string0 = gestor_Utilizadores0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.vendeArtigo("VcJqk\"djPTe", 2724L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.removeTodosComprador(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprimeFaturasCompras(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.removeArtigoEncomenda((String) null, 0L, 2062L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1478L));
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.finalizaEncomenda(0L, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Long> hashMap1 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, map0, hashMap1);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.passaVendidoParaVender("CarrinhoVazioException", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.artigosVendidos2(2834L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getEncomendasDevolvidas((-215L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      hashMap1.put("CarrinhoVazioException", "CarrinhoVazioException");
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.verificaPassword("CarrinhoVazioException", "CarrinhoVazioException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprimeFaturasVendas(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaFaturaComprador(2831L, true, (-885L), 0L, (Set<String>) null, (-890.0), 2831L, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.voltaAVenderArtigo("Vq*Z,;ssY4C", 1253L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getIdCarrinho(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getEncomendas((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.retiraArtigo("", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.artigosVendidos(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.alteraQuantiVendida(1L, (-1968526675));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.passaArtigoParaVendido(" Emails associados ao id do utilizador correspondente: ", 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.verCarrinho(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashMap<Long, Utilizador> hashMap0 = new HashMap<Long, Utilizador>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Long> hashMap2 = new HashMap<String, Long>();
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores(hashMap0, hashMap1, hashMap2);
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.novoCarrinho(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Set<Long> set0 = gestor_Utilizadores0.chaves();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.devolveNif(1210L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = gestor_Utilizadores0.clone();
      assertNotSame(gestor_Utilizadores1, gestor_Utilizadores0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.getCarrinho(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.adicionaFaturaVendedor(4248L, false, 4248L, (-1962L), "", 0.0, false, 1000.81818, 2777.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.imprime1FaturaVenda((-2269L), (-490L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.alteraQuantiComprada(0L, (-2235));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      // Undeclared exception!
      try { 
        gestor_Utilizadores0.get1Utilizador(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Gestor_Utilizadores", e);
      }
  }
}
